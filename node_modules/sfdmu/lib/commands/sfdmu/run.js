"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const runCommandExecutor_1 = require("../../modules/commands_processors/runCommandExecutor");
core_1.Messages.importMessagesDirectory(__dirname);
const commandMessages = core_1.Messages.loadMessages('sfdmu', 'run');
const resources = core_1.Messages.loadMessages('sfdmu', 'resources');
class Run extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.exitProcess = true;
        this.commandMessages = commandMessages;
        this.resources = resources;
    }
    async run() {
        this.ux["isOutputEnabled"] = true;
        this.m_flags = this.flags;
        this.m_ux = this.ux;
        await runCommandExecutor_1.default.execute(this);
        return {};
    }
    runCommand() {
        throw new Error('Method not implemented.');
    }
}
Run.supportsUsername = true;
Run.requiresUsername = false;
Run.varargs = false;
Run.description = commandMessages.getMessage('commandDescription');
Run.longDescription = commandMessages.getMessage('commandLongDescription');
Run.flagsConfig = {
    sourceusername: command_1.flags.string({
        char: "s",
        description: commandMessages.getMessage('sourceusernameFlagDescription'),
        longDescription: commandMessages.getMessage('sourceusernameFlagLongDescription'),
        default: ''
    }),
    path: command_1.flags.directory({
        char: 'p',
        description: commandMessages.getMessage('pathFlagDescription'),
        longDescription: commandMessages.getMessage('pathFlagLongDescription'),
        default: ''
    }),
    verbose: command_1.flags.builtin({
        description: commandMessages.getMessage('verboseFlagDescription'),
        longDescription: commandMessages.getMessage('verboseFlagLongDescription')
    }),
    concise: command_1.flags.builtin({
        description: commandMessages.getMessage('conciseFlagDescription'),
        longDescription: commandMessages.getMessage('conciseFlagLongDescription'),
    }),
    quiet: command_1.flags.builtin({
        description: commandMessages.getMessage('quietFlagDescription'),
        longDescription: commandMessages.getMessage('quietFlagLongDescription'),
    }),
    silent: command_1.flags.boolean({
        description: commandMessages.getMessage("silentFlagDescription"),
        longDescription: commandMessages.getMessage("silentFlagLongDescription")
    }),
    version: command_1.flags.boolean({
        char: "v",
        description: commandMessages.getMessage("versionFlagDescription"),
        longDescription: commandMessages.getMessage("versionFlagLongDescription")
    }),
    apiversion: command_1.flags.builtin({
        description: commandMessages.getMessage("apiversionFlagDescription"),
        longDescription: commandMessages.getMessage("apiversionFlagLongDescription")
    }),
    filelog: command_1.flags.integer({
        char: "l",
        description: commandMessages.getMessage("filelogFlagDescription"),
        longDescription: commandMessages.getMessage("filelogFlagLongDescription"),
        default: 1
    }),
    noprompt: command_1.flags.boolean({
        char: "n",
        description: commandMessages.getMessage("nopromptFlagDescription"),
        longDescription: commandMessages.getMessage("nopromptLongFlagDescription")
    }),
    json: command_1.flags.boolean({
        description: commandMessages.getMessage("jsonFlagDescription"),
        longDescription: commandMessages.getMessage("jsonLongFlagDescription"),
        default: false
    }),
    nowarnings: command_1.flags.boolean({
        char: "w",
        description: commandMessages.getMessage("nowarningsFlagDescription"),
        longDescription: commandMessages.getMessage("nowarningsLongFlagDescription")
    }),
    canmodify: command_1.flags.string({
        char: "c",
        description: commandMessages.getMessage('canModifyFlagDescription'),
        longDescription: commandMessages.getMessage('canModifyFlagLongDescription'),
        default: ''
    }),
    simulation: command_1.flags.boolean({
        char: "m",
        description: commandMessages.getMessage("simulationFlagDescription"),
        longDescription: commandMessages.getMessage("simulationLongFlagDescription")
    }),
    loglevel: command_1.flags.string({
        description: commandMessages.getMessage('loglevelFlagDescription'),
        longDescription: commandMessages.getMessage('loglevelLongFlagDescription'),
        default: 'trace',
        options: ['info', 'debug', 'warn', 'error', 'fatal', 'trace', 'INFO', 'DEBUG', 'WARN', 'ERROR', 'FATAL', 'TRACE']
    }),
    usesf: command_1.flags.string({
        description: commandMessages.getMessage("useSfFlagDescription"),
        longDescription: commandMessages.getMessage("useSfLongFlagDescription"),
        default: "true",
        options: ['true', 'false', 'TRUE', 'FALSE']
    }),
    logfullquery: command_1.flags.boolean({
        description: commandMessages.getMessage("logfullqueryFlagDescription"),
        longDescription: commandMessages.getMessage("logfullqueryLongFlagDescription")
    }),
};
exports.default = Run;
//# sourceMappingURL=run.js.map