"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfdmuRunAddonModule_1 = require("../../../components/sfdmu-run/sfdmuRunAddonModule");
const enumerations_1 = require("../../../../modules/components/common_components/enumerations");
const sfdmuRunAddonMessages_1 = require("../../../messages/sfdmuRunAddonMessages");
const BadWordsFilter_1 = require("./BadWordsFilter");
const CONST = {
    SUPPORTED_EVENTS: [
        enumerations_1.ADDON_EVENTS.filterRecordsAddons
    ]
};
const filterFactory = (args, module, RecordsFilterConstructor) => new RecordsFilterConstructor(args, module);
const filterFactoryMap = new Map([
    ['BadWords', (args, module) => filterFactory(args, module, BadWordsFilter_1.BadWordsFilter)]
]);
class RecordsFilter extends sfdmuRunAddonModule_1.default {
    async onExecute(context, args) {
        this.runtime.logAddonExecutionStarted(this);
        if (!this.runtime.validateSupportedEvents(this, CONST.SUPPORTED_EVENTS)) {
            this.runtime.logFormattedWarning(this, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.General_EventNotSupported, context.eventName, context.moduleDisplayName, CONST.SUPPORTED_EVENTS.join());
            return null;
        }
        const filterFactory = filterFactoryMap.get(args.filterType);
        if (!filterFactory) {
            this.runtime.logFormattedError(this, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.FilterUnknown, args.filterType);
            return null;
        }
        try {
            let filterInstance = filterFactory(args, this);
            if (filterInstance.isInitialized) {
                const task = this.runtime.getPluginTask(this);
                if (task) {
                    task.tempRecords = await filterInstance.filterRecords(task.tempRecords);
                }
            }
        }
        catch (ex) {
            this.runtime.logFormattedError(this, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.FilterOperationError, args.filterType, ex.message);
        }
        this.runtime.logAddonExecutionFinished(this);
        return null;
    }
    async onInit(context, args) {
        this.context.moduleDisplayName += ':' + (args.filterType || 'UnknownFilter');
        return null;
    }
}
exports.default = RecordsFilter;
//# sourceMappingURL=index.js.map