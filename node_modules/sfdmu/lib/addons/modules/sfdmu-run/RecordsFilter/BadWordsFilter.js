"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadWordsFilter = void 0;
const sfdmuRunAddonMessages_1 = require("../../../messages/sfdmuRunAddonMessages");
const fs = require("fs");
const path = require("path");
class BadWordsFilter {
    constructor(args, module) {
        this._filteredNumber = 0;
        this._keptNumber = 0;
        this._args = args;
        this._module = module;
        var requiredArgs = [
            '',
            '.settings',
            '.settings.detectFields'
        ];
        for (let prop of requiredArgs) {
            prop = `args${prop}`;
            if (!eval(`${prop}`)) {
                this._module.runtime.logFormattedError(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.General_MissingRequiredArguments, prop);
                return;
            }
        }
        this._args.settings.badwordsFile = this._args.settings.badwordsFile || "badwords.json";
        this._badwordsFile = path.isAbsolute(this._args.settings.badwordsFile) ? this._args.settings.badwordsFile
            : path.join(this._module.runtime.basePath, path.normalize(this._args.settings.badwordsFile));
        if (!fs.existsSync(this._badwordsFile)) {
            this._module.runtime.logFormattedError(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.BadwordFilter_badwordsDetectFileError);
            return;
        }
        const badwordsConfig = JSON.parse(fs.readFileSync(this._badwordsFile).toString());
        if (badwordsConfig.badwords == null || badwordsConfig.badwords.length === 0) {
            this._module.runtime.logFormattedError(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.BadwordFilter_badwordsDetectFileEmptyList, this._badwordsFile);
            return;
        }
        this._badwords = badwordsConfig.badwords;
        for (const word of this._badwords) {
            const wordWithSpecialChars = word.normalize("NFD").replace(/\p{Diacritic}/gu, "");
            if (!this._badwords.includes(wordWithSpecialChars)) {
                this._badwords.push(wordWithSpecialChars);
            }
        }
        const regexString = "\\b(" + this._badwords.join("|") + ")\\b";
        this._module.runtime.logFormattedInfoVerbose(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.BadwordFilter_badwordsDetectRegex, regexString);
        this._badwordsRegex = new RegExp(regexString, "gmi");
        this._detectFields = this._args.settings.detectFields;
        this._outputMatches = this._args.settings.outputMatches;
        this._highlightWords = this._args.settings.highlightWords;
        this.isInitialized = true;
    }
    async filterRecords(records) {
        this._module.runtime.logFormattedInfo(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.BadwordFilter_badwordsDetectStart, this._badwordsFile, this._detectFields.length > 0 ? this._detectFields.join(",") : "all fields");
        let filteredRecords = records.filter((record) => this._checkRecord(record));
        if (this._highlightWords) {
            const replacement = typeof this._highlightWords === 'string' ? this._highlightWords : `***$1***`;
            filteredRecords = filteredRecords.map((record) => this._highlightWordsInRecord(record, replacement));
        }
        this._module.runtime.logFormattedInfo(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.FilteringEnd, this._filteredNumber.toString(), this._keptNumber.toString());
        return filteredRecords;
    }
    _checkRecord(record) {
        const fieldsValues = this._getFieldsValues(record);
        const found = [];
        for (const [field, value] of fieldsValues) {
            if (this._badwordsRegex.test(value)) {
                found.push([field, value]);
            }
        }
        if (found.length > 0) {
            if (this._outputMatches) {
                const foundStr = found.map(([field, value]) => `${field}: ${value}` + (value.includes("\n") ? "\n" : '')).join(",");
                this._module.runtime.logFormattedInfo(this._module, sfdmuRunAddonMessages_1.SFDMU_RUN_ADDON_MESSAGES.BadwordFilter_badwordsDetected, record.Name, foundStr);
            }
            this._keptNumber++;
            return true;
        }
        this._filteredNumber++;
        return false;
    }
    _highlightWordsInRecord(record, replacement) {
        const fieldsValues = this._getFieldsValues(record);
        for (const [field, value] of fieldsValues) {
            if (typeof record[field] === 'string') {
                record[field] = value.replace(this._badwordsRegex, replacement);
            }
        }
        return record;
    }
    _getFieldsValues(record) {
        let fieldsValues = [];
        if (this._detectFields.length > 0) {
            fieldsValues = Object.keys(record)
                .filter(field => this._detectFields.includes(field))
                .map(field => [field, record[field]]);
        }
        else {
            fieldsValues = Object.keys(record).map(field => [field, record[field]]);
        }
        return fieldsValues;
    }
}
exports.BadWordsFilter = BadWordsFilter;
//# sourceMappingURL=BadWordsFilter.js.map