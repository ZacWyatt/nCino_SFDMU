import { OrgConnectionData, Script } from "../../../modules/models";
import { IBlobField } from "../../../modules/models/api_models";
import AddonRuntime from "../common/addonRuntime";
import ContentVersion from "../../../modules/models/sf_models/contentVersion";
import SfdmuRunAddonJob from "./sfdmuRunAddonJob";
import ICommandRunInfo from '../../../modules/models/common_models/ICommandRunInfo';
import { API_ENGINE, OPERATION } from '../../../modules/components/common_components/enumerations';
import SfdmuRunAddonTask from './sfdmuRunAddonTask';
import AddonModule from '../common/addonModule';
import { ISfdmuRunCustomAddonRuntime } from '../../modules/sfdmu-run/custom-addons/package';
import { SfdmuRunCustomAddonService } from './custom';
import ISfdmuRunScript from './ISfdmuRunScript';
export default class SfdmuRunAddonRuntime extends AddonRuntime implements ISfdmuRunCustomAddonRuntime {
    #private;
    runInfo: ICommandRunInfo;
    pluginJob: SfdmuRunAddonJob;
    service: SfdmuRunCustomAddonService;
    constructor(script: Script);
    getScript(): ISfdmuRunScript;
    createSfdmuPluginJob(): void;
    getPluginTask(module: AddonModule): SfdmuRunAddonTask;
    get basePath(): string;
    get sourcePath(): string;
    get targetPath(): string;
    getConnection(isSource: boolean): any;
    getOrgInfo(isSource: boolean): OrgConnectionData;
    queryAsync(isSource: boolean, soql: string, useBulkQueryApi?: boolean): Promise<any[]>;
    queryMultiAsync(isSource: boolean, soqls: string[], useBulkQueryApi?: boolean): Promise<any[]>;
    createFieldInQueries(selectFields: string[], fieldName: string, sObjectName: string, valuesIN: string[], whereClause?: string, orderBy?: string): string[];
    getApiEngine(recordsAmount: number, preferredEngine: API_ENGINE): API_ENGINE;
    updateTargetRecordsAsync(sObjectName: string, operation: OPERATION, records: any[], engine?: API_ENGINE, updateRecordId?: boolean): Promise<any[]>;
    downloadBlobDataAsync(isSource: boolean, recordIds: string[], blobField: IBlobField): Promise<Map<string, string>>;
    transferContentVersions(module: AddonModule, sourceVersions: ContentVersion[], maxChunkSize?: number): Promise<ContentVersion[]>;
    getOrCreateTempPath(module: AddonModule): string;
    destroyTempPath(module: AddonModule, removeParentFolder?: boolean): void;
}
