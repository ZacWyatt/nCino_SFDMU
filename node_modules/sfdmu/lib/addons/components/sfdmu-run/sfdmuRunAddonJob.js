"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SfdmuRunAddonJob_migrationJob, _SfdmuRunAddonJob_pluginTasks;
Object.defineProperty(exports, "__esModule", { value: true });
const sfdmuRunAddonTask_1 = require("./sfdmuRunAddonTask");
class SfdmuRunAddonJob {
    constructor(migrationJob) {
        _SfdmuRunAddonJob_migrationJob.set(this, void 0);
        _SfdmuRunAddonJob_pluginTasks.set(this, void 0);
        __classPrivateFieldSet(this, _SfdmuRunAddonJob_migrationJob, migrationJob, "f");
        __classPrivateFieldSet(this, _SfdmuRunAddonJob_pluginTasks, __classPrivateFieldGet(this, _SfdmuRunAddonJob_migrationJob, "f").tasks.map(jobTask => new sfdmuRunAddonTask_1.default(jobTask)), "f");
    }
    get tasks() {
        return __classPrivateFieldGet(this, _SfdmuRunAddonJob_pluginTasks, "f");
    }
    getTaskByFieldPath(fieldPath) {
        let out = __classPrivateFieldGet(this, _SfdmuRunAddonJob_migrationJob, "f").getTaskByFieldPath(fieldPath);
        if (!out) {
            return {
                field: fieldPath.split('.').pop(),
                task: null
            };
        }
        let task = this.tasks.find(task => task.sObjectName == out.task.sObjectName);
        return {
            field: out.field,
            task
        };
    }
}
_SfdmuRunAddonJob_migrationJob = new WeakMap(), _SfdmuRunAddonJob_pluginTasks = new WeakMap();
exports.default = SfdmuRunAddonJob;
//# sourceMappingURL=sfdmuRunAddonJob.js.map