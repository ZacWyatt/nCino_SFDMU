"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
require("reflect-metadata");
require("es6-shim");
const class_transformer_1 = require("class-transformer");
const models_1 = require("../../../modules/models");
const logger_1 = require("../../../modules/components/common_components/logger");
const statics_1 = require("../../../modules/components/common_components/statics");
const enumerations_1 = require("../../../modules/components/common_components/enumerations");
const sfdmuRunAddonRuntime_1 = require("./sfdmuRunAddonRuntime");
class SfdmuRunAddonManager {
    get logger() {
        return this.script.logger;
    }
    get fullCommandName() {
        return this.runtime.runInfo.pinfo.pluginName + ":" + this.runtime.runInfo.pinfo.commandName;
    }
    constructor(script) {
        this.manifests = new Array();
        this.addonsMap = new Map();
        this.addons = new Map();
        this.script = script;
        this.runtime = new sfdmuRunAddonRuntime_1.default(script);
        this.manifests = [
            this._loadCoreAddonManifest(),
            this._loadUserAddonManifest()
        ].filter(manifest => !!manifest && manifest.addons.length > 0);
        this._createAddOnsMap();
    }
    async triggerAddonModuleInitAsync() {
        let addons = [...this.addonsMap.values()].reduce((item, acc) => {
            return acc.concat(item);
        }, []);
        for (let index = 0; index < addons.length; index++) {
            const addon = addons[index];
            if (addon[2]) {
                let result = await addon[2]();
                if (result && result.cancel) {
                    throw new models_1.CommandAbortedByAddOnError(addon[1].moduleDisplayName);
                }
            }
        }
    }
    async triggerAddonModuleMethodAsync(event, objectName = '') {
        if (!this.addonsMap.has(event)) {
            return false;
        }
        let addons = this.addonsMap.get(event).filter(addon => {
            return addon[1].appliedToObject(objectName);
        });
        if (addons.length > 0) {
            let globalText = this.logger.getResourceString(logger_1.RESOURCES.global);
            this.logger.infoNormal(logger_1.RESOURCES.runAddonMethod, objectName || globalText, event.toString());
            for (let index = 0; index < addons.length; index++) {
                let addon = addons[index];
                let result = await addon[0]();
                if (result && result.cancel) {
                    throw new models_1.CommandAbortedByAddOnError(addon[1].moduleDisplayName);
                }
            }
            this.logger.infoNormal(logger_1.RESOURCES.runAddonMethodCompleted, objectName || globalText, event.toString());
            return true;
        }
        return false;
    }
    triggerAddonModuleMethodSync(event, objectName) {
        (async () => await this.triggerAddonModuleMethodAsync(event, objectName))();
    }
    triggerAddonModuleInitSync() {
        (async () => await this.triggerAddonModuleInitAsync())();
    }
    _loadCoreAddonManifest() {
        this.logger.infoNormal(logger_1.RESOURCES.loadingCoreAddonManifestFile);
        let manifestPath = path.resolve(__dirname, statics_1.CONSTANTS.CORE_ADDON_MANIFEST_FILE_NAME);
        if (!fs.existsSync(manifestPath)) {
            return null;
        }
        try {
            let manifestPlain = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            let manifest = (0, class_transformer_1.plainToClass)(models_1.AddonManifest, manifestPlain);
            manifest.addons.forEach(addon => this._setupAddonDefinition(addon));
            manifest.addons = manifest.addons.filter(addon => !addon.excluded);
            return manifest;
        }
        catch (ex) {
            throw new models_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.exportJsonFileLoadError, ex.message));
        }
    }
    _loadUserAddonManifest() {
        let manifest = new models_1.AddonManifest();
        this.script.beforeAddons.forEach(addon => {
            if (!addon.excluded && addon.command == this.fullCommandName) {
                addon.event = enumerations_1.ADDON_EVENTS.onBefore;
                manifest.addons.push(addon);
            }
        });
        this.script.objects.forEach(object => {
            object.beforeAddons.forEach(addon => {
                if (!addon.excluded && addon.command == this.fullCommandName) {
                    addon.event = enumerations_1.ADDON_EVENTS.onBefore;
                    addon.objectName = object.name;
                    manifest.addons.push(addon);
                }
            });
            object.afterAddons.forEach(addon => {
                if (!addon.excluded && addon.command == this.fullCommandName) {
                    addon.event = enumerations_1.ADDON_EVENTS.onAfter;
                    addon.objectName = object.name;
                    manifest.addons.push(addon);
                }
            });
            object.filterRecordsAddons.forEach(addon => {
                if (!addon.excluded && addon.command == this.fullCommandName) {
                    addon.event = enumerations_1.ADDON_EVENTS.filterRecordsAddons;
                    addon.objectName = object.name;
                    manifest.addons.push(addon);
                }
            });
            object.beforeUpdateAddons.forEach(addon => {
                if (!addon.excluded && addon.command == this.fullCommandName) {
                    addon.event = enumerations_1.ADDON_EVENTS.onBeforeUpdate;
                    addon.objectName = object.name;
                    manifest.addons.push(addon);
                }
            });
            object.afterUpdateAddons.forEach(addon => {
                if (!addon.excluded && addon.command == this.fullCommandName) {
                    addon.event = enumerations_1.ADDON_EVENTS.onAfterUpdate;
                    addon.objectName = object.name;
                    manifest.addons.push(addon);
                }
            });
        });
        this.script.dataRetrievedAddons.forEach(addon => {
            if (!addon.excluded && addon.command == this.fullCommandName) {
                addon.event = enumerations_1.ADDON_EVENTS.onDataRetrieved;
                manifest.addons.push(addon);
            }
        });
        this.script.afterAddons.forEach(addon => {
            if (!addon.excluded && addon.command == this.fullCommandName) {
                addon.event = enumerations_1.ADDON_EVENTS.onAfter;
                manifest.addons.push(addon);
            }
        });
        manifest.addons.forEach(addon => {
            this.logger.infoNormal(logger_1.RESOURCES.loadingAddonModule, addon.moduleDisplayName);
            this._setupAddonDefinition(addon);
        });
        return manifest;
    }
    _setupAddonDefinition(addon) {
        addon.basePath = this.runtime.runInfo.basePath;
        addon.args = addon.args || {};
    }
    _createAddOnsMap() {
        let globalText = this.logger.getResourceString(logger_1.RESOURCES.global);
        this.manifests.forEach(manifest => {
            manifest.addons.forEach(addon => {
                try {
                    if (addon.isValid) {
                        let moduleInstance = new (require(addon.moduleRequirePath).default)(this.runtime);
                        if (!this.addonsMap.has(addon.event)) {
                            this.addonsMap.set(addon.event, []);
                        }
                        moduleInstance.context = {
                            eventName: addon.event.toString(),
                            objectName: addon.objectName,
                            description: addon.description,
                            objectDisplayName: addon.objectName || globalText,
                            moduleDisplayName: addon.moduleDisplayName,
                            isCore: addon.isCore
                        };
                        this.addonsMap.get(addon.event).push([
                            moduleInstance.onExecute.bind(moduleInstance, moduleInstance.context, addon.args),
                            addon,
                            moduleInstance.onInit ? moduleInstance.onInit.bind(moduleInstance, moduleInstance.context, addon.args) : () => void 0,
                        ]);
                    }
                }
                catch (ex) {
                    this.logger.warn(logger_1.RESOURCES.cantLoadModule, addon.moduleRequirePath);
                }
            });
        });
    }
}
exports.default = SfdmuRunAddonManager;
//# sourceMappingURL=sfdmuRunAddonManager.js.map