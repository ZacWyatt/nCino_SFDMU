"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AddonRuntime_logger;
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../modules/components/common_components/common");
const logger_1 = require("../../../modules/components/common_components/logger");
const bulitinMessages_1 = require("../../../modules/components/common_components/bulitinMessages");
const enumerations_1 = require("../../../modules/components/common_components/enumerations");
class AddonRuntime {
    constructor(logger, runInfo) {
        _AddonRuntime_logger.set(this, void 0);
        __classPrivateFieldSet(this, _AddonRuntime_logger, logger, "f");
        this.runInfo = runInfo;
    }
    createFormattedMessage(module, message, ...tokens) {
        switch (message) {
            case bulitinMessages_1.BUILTIN_MESSAGES.Break:
                return '';
        }
        let mess = common_1.Common.formatStringLog((message || '').toString(), ...tokens);
        return __classPrivateFieldGet(this, _AddonRuntime_logger, "f").getResourceString(logger_1.RESOURCES.coreAddonMessageTemplate, module.context.moduleDisplayName, module.context.objectDisplayName, mess);
    }
    logFormattedInfo(module, message, ...tokens) {
        this.log(this.createFormattedMessage(module, message, ...tokens), "INFO");
    }
    logFormattedInfoVerbose(module, message, ...tokens) {
        this.log(this.createFormattedMessage(module, message, ...tokens), "INFO_VERBOSE");
    }
    logFormattedWarning(module, message, ...tokens) {
        this.log(this.createFormattedMessage(module, message, ...tokens), "WARNING");
    }
    logFormattedError(module, message, ...tokens) {
        this.log(this.createFormattedMessage(module, message, ...tokens), "ERROR");
    }
    logFormatted(module, message, messageType, ...tokens) {
        switch (messageType) {
            case 'ERROR':
                this.logFormattedError(module, String(message), ...tokens);
                break;
            case 'WARNING':
                this.logFormattedWarning(module, String(message), ...tokens);
                break;
            default:
                this.logFormattedInfo(module, message, ...tokens);
                break;
        }
    }
    log(message, messageType, ...tokens) {
        switch (messageType) {
            case "WARNING":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").warn(message, ...tokens);
                break;
            case "ERROR":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").error(message, ...tokens);
                break;
            case "OBJECT":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").objectNormal(message);
                break;
            case "TABLE":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").log(message, logger_1.LOG_MESSAGE_TYPE.TABLE, logger_1.LOG_MESSAGE_VERBOSITY.NORMAL, ...tokens);
                break;
            case "JSON":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").log(message, logger_1.LOG_MESSAGE_TYPE.JSON, logger_1.LOG_MESSAGE_VERBOSITY.NORMAL, ...tokens);
                break;
            case "INFO_VERBOSE":
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").infoVerbose(message, ...tokens);
                break;
            default:
                __classPrivateFieldGet(this, _AddonRuntime_logger, "f").infoNormal(message, ...tokens);
                break;
        }
    }
    logAddonExecutionStarted(module) {
        this.log(logger_1.RESOURCES.startAddonExecution.toString(), "INFO", module.context.moduleDisplayName, module.context.objectDisplayName);
    }
    validateSupportedEvents(module, supportedEvents) {
        const evt = enumerations_1.ADDON_EVENTS[module.context.eventName];
        return supportedEvents.some((x) => x == evt);
    }
    logAddonExecutionFinished(module) {
        this.log(logger_1.RESOURCES.stopAddonExecution.toString(), "INFO", module.context.moduleDisplayName, module.context.objectDisplayName);
    }
    async parallelExecAsync(fns, thisArg, maxParallelTasks) {
        return await common_1.Common.parallelExecAsync(fns, thisArg, maxParallelTasks);
    }
    async serialExecAsync(fns, thisArg) {
        return await common_1.Common.serialExecAsync(fns, thisArg);
    }
    deleteFolderRecursive(path, throwIOErrors) {
        common_1.Common.deleteFolderRecursive(path, throwIOErrors);
    }
    async readCsvFileAsync(filePath, linesToRead, columnDataTypeMap) {
        return await common_1.Common.readCsvFileAsync(filePath, linesToRead, columnDataTypeMap);
    }
    async writeCsvFileAsync(filePath, records, createEmptyFileOnEmptyArray) {
        return await common_1.Common.writeCsvFileAsync(filePath, records, createEmptyFileOnEmptyArray);
    }
}
_AddonRuntime_logger = new WeakMap();
exports.default = AddonRuntime;
//# sourceMappingURL=addonRuntime.js.map