"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgConnectionData = exports.AddonManifest = exports.ObjectFieldMapping = exports.CsvChunks = exports.CachedCSVContent = exports.ProcessedData = exports.TaskOrgData = exports.TaskData = void 0;
require("reflect-metadata");
require("es6-shim");
const class_transformer_1 = require("class-transformer");
const __1 = require("../");
const common_1 = require("../../components/common_components/common");
const logger_1 = require("../../components/common_components/logger");
const statics_1 = require("../../components/common_components/statics");
const scriptAddonManifestDefinition_1 = require("../script_models/scriptAddonManifestDefinition");
class TaskData {
    constructor(task) {
        this.sourceToTargetRecordMap = new Map();
        this.task = task;
    }
    get fieldsToUpdateMap() {
        return this.task.scriptObject.fieldsToUpdateMap;
    }
    get fieldsInQueryMap() {
        return this.task.scriptObject.fieldsInQueryMap;
    }
    get sFieldsInQuery() {
        return [...this.fieldsInQueryMap.values()];
    }
    get fieldsToUpdate() {
        return this.task.scriptObject.fieldsToUpdate;
    }
    get sFieldsToUpdate() {
        return [...this.fieldsToUpdateMap.values()];
    }
    get fieldsInQuery() {
        return this.task.scriptObject.fieldsInQuery;
    }
    get csvFilename() {
        return this.task.getCSVFilename(this.task.script.rawSourceDirectory);
    }
    get sourceCsvFilename() {
        return this.task.getCSVFilename(this.task.script.sourceDirectory, statics_1.CONSTANTS.CSV_SOURCE_FILE_SUFFIX);
    }
    getTargetCSVFilename(operation, fileNameSuffix) {
        return TaskData.getTargetCSVFilename(this.task.script.targetDirectory, this.task.sObjectName, operation, fileNameSuffix);
    }
    get resourceString_csvFile() {
        return this.task.logger.getResourceString(logger_1.RESOURCES.csvFile);
    }
    get resourceString_org() {
        return this.task.logger.getResourceString(logger_1.RESOURCES.org);
    }
    getResourceString_Step(mode) {
        return mode == "forwards" ? this.task.logger.getResourceString(logger_1.RESOURCES.step1)
            : this.task.logger.getResourceString(logger_1.RESOURCES.step2);
    }
    get prevTasks() {
        return this.task.job.tasks.filter(task => this.task.job.tasks.indexOf(task) < this.task.job.tasks.indexOf(this.task));
    }
    get nextTasks() {
        return this.task.job.tasks.filter(task => this.task.job.tasks.indexOf(task) > this.task.job.tasks.indexOf(this.task));
    }
    get isPersonAccountEnabled() {
        return this.task.script.isPersonAccountEnabled;
    }
    get isPersonAccountOrContact() {
        return this.task.script.isPersonAccountEnabled
            && (this.task.sObjectName == "Account" || this.task.sObjectName == "Contact");
    }
    get fieldsToCompareSourceWithTarget() {
        return statics_1.CONSTANTS.FIELDS_TO_COMPARE_SOURCE_WITH_TARGET_RECORDS.get(this.task.sObjectName) || new Array();
    }
    get fieldsExcludedFromTargetQuery() {
        return statics_1.CONSTANTS.FIELDS_EXCLUDED_FROM_TARGET_QUERY.get(this.task.sObjectName) || new Array();
    }
    static getTargetCSVFilename(rootPath, sObjectName, operation, fileNameSuffix) {
        return common_1.Common.getCSVFilename(rootPath, sObjectName, `_${__1.ScriptObject.getStrOperation(operation).toLowerCase()}${fileNameSuffix || ""}${statics_1.CONSTANTS.CSV_TARGET_FILE_SUFFIX}`);
    }
}
exports.TaskData = TaskData;
class TaskOrgData {
    constructor(task, isSource) {
        this.extIdRecordsMap = new Map();
        this.idRecordsMap = new Map();
        this.task = task;
        this.isSource = isSource;
    }
    get org() {
        return this.isSource ? this.task.script.sourceOrg : this.task.script.targetOrg;
    }
    get useBulkQueryApi() {
        const bulkThreshold = this.task.script.queryBulkApiThreshold || statics_1.CONSTANTS.QUERY_BULK_API_THRESHOLD;
        return this.isSource ? this.task.sourceTotalRecorsCount >= bulkThreshold :
            this.task.targetTotalRecorsCount >= bulkThreshold;
    }
    get fieldsMap() {
        return this.isSource ? this.task.scriptObject.sourceSObjectDescribe.fieldsMap :
            this.task.scriptObject.targetSObjectDescribe.fieldsMap;
    }
    get resourceString_Source_Target() {
        return this.isSource ? this.task.logger.getResourceString(logger_1.RESOURCES.source) :
            this.task.logger.getResourceString(logger_1.RESOURCES.target);
    }
    get allRecords() {
        return this.isSource ? this.task.scriptObject.processAllSource : this.task.scriptObject.processAllTarget;
    }
    get media() {
        return this.org.media;
    }
    get records() {
        return [...this.idRecordsMap.values()];
    }
}
exports.TaskOrgData = TaskOrgData;
class ProcessedData {
    constructor() {
        this.processPersonAccounts = false;
        this.clonedToSourceMap = new Map();
        this.recordsToUpdate = new Array();
        this.recordsToInsert = new Array();
        this.missingParentLookups = new Array();
        this.insertedRecordsSourceToTargetMap = new Map();
    }
    get lookupIdFields() {
        return this.fields.filter(field => field.isSimpleReference);
    }
    get fieldNames() {
        return this.fields.map(field => field.nameId);
    }
    get nonProcessedRecordsAmount() {
        return [...this.clonedToSourceMap.values()].filter(record => record[statics_1.CONSTANTS.__IS_PROCESSED_FIELD_NAME] == false).length;
    }
}
exports.ProcessedData = ProcessedData;
class CachedCSVContent {
    constructor() {
        this.clear();
    }
    get nextId() {
        return "ID" + common_1.Common.addLeadnigZeros(this.idCounter++, 16);
    }
    clear() {
        this.csvDataCacheMap = new Map();
        this.updatedFilenames = new Set();
        this.idCounter = 1;
    }
}
exports.CachedCSVContent = CachedCSVContent;
class CsvChunks {
    constructor(init) {
        this.chunks = [];
        this.header = new Array();
        Object.assign(this, init);
    }
    fromArrayChunks(arrayChunks) {
        if (arrayChunks.length == 0)
            return;
        this.chunks = [].concat(arrayChunks.map(records => ({
            csvString: "",
            records
        })));
        this.header = Object.keys(arrayChunks[0][0]);
        return this;
    }
    fromArray(array) {
        return this.fromArrayChunks([array]);
    }
}
exports.CsvChunks = CsvChunks;
class ObjectFieldMapping {
    constructor(sourceSObjectName, targetSObjectName) {
        this.fieldMapping = new Map();
        this.sourceSObjectName = sourceSObjectName;
        this.targetSObjectName = targetSObjectName;
    }
    get hasChange() {
        return this.sourceSObjectName != this.targetSObjectName || this.fieldMapping.size > 0;
    }
}
exports.ObjectFieldMapping = ObjectFieldMapping;
class AddonManifest {
    constructor(init) {
        this.addons = new Array();
        if (init) {
            Object.assign(this, init);
        }
    }
}
exports.AddonManifest = AddonManifest;
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], AddonManifest.prototype, "addons", void 0);
class OrgConnectionData {
}
exports.OrgConnectionData = OrgConnectionData;
//# sourceMappingURL=helpers_classes.js.map