"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const common_1 = require("../../components/common_components/common");
const statics_1 = require("../../components/common_components/statics");
class SFieldDescribe {
    constructor(init) {
        this.objectName = "";
        this.name = "";
        this.label = "";
        this.updateable = false;
        this.creatable = false;
        this.cascadeDelete = false;
        this.autoNumber = false;
        this.unique = false;
        this.nameField = false;
        this.custom = false;
        this.calculated = false;
        this.lookup = false;
        this.referencedObjectType = "";
        this.polymorphicReferenceObjectType = "";
        this.originalReferencedObjectType = "";
        this.parentLookupObject = new __1.ScriptObject();
        this.child__rSFields = new Array();
        this.isPolymorphicFieldDefinition = false;
        this.isPolymorphicField = false;
        if (init) {
            Object.assign(this, init);
        }
    }
    getPolymorphicQueryField(fieldName) {
        let parts = fieldName.split('.');
        if (this.isPolymorphicField && this.is__r && parts.length > 1) {
            return `TYPEOF ${parts[0]} WHEN ${this.polymorphicReferenceObjectType} THEN ${parts[1]} END`;
        }
        return fieldName;
    }
    get targetName() {
        return this.m_targetName || this.name;
    }
    get isMapped() {
        return this.name != this.targetName;
    }
    get readonly() {
        return !(this.creatable && !this.isFormula && !this.autoNumber);
    }
    get person() {
        return this.nameId.endsWith('__pc')
            || this.nameId.startsWith('Person') && !this.custom;
    }
    get standard() {
        return !this.custom;
    }
    get isFormula() {
        return this.calculated;
    }
    get isMasterDetail() {
        return this.lookup && (!this.updateable || this.cascadeDelete) && this.isSimpleReference;
    }
    get isBoolean() {
        return this.type == "boolean";
    }
    get isTextual() {
        return statics_1.CONSTANTS.TEXTUAL_FIELD_TYPES.indexOf(this.type) >= 0;
    }
    get isComplex() {
        return common_1.Common.isComplexField(this.name);
    }
    get isContainsComplex() {
        return common_1.Common.isContainsComplexField(this.name);
    }
    get is__r() {
        return !!this.idSField;
    }
    get isComplexOr__r() {
        return common_1.Common.isComplexOr__rField(this.name);
    }
    get isSimpleNotLookup() {
        return this.isSimple && !this.lookup;
    }
    get isSimple() {
        return !this.isComplexOr__r;
    }
    get isSimpleReference() {
        const isSimpleReference = (statics_1.CONSTANTS.SIMPLE_REFERENCE_FIELDS.get(this.objectName) || []).includes(this.name);
        return isSimpleReference || this.lookup && !this.is__r;
    }
    get isSimpleSelfReference() {
        return this.isSimpleReference && this.referencedObjectType == this.objectName;
    }
    get isExternalIdField() {
        return this.scriptObject && this.scriptObject.externalId == this.name;
    }
    get isOriginalExternalIdField() {
        return this.scriptObject && this.scriptObject.originalExternalId == this.name;
    }
    get name__r() {
        return common_1.Common.getFieldName__r(this);
    }
    get nameId() {
        return common_1.Common.getFieldNameId(this);
    }
    get fullName__r() {
        if (this.lookup) {
            const name = this.name__r + "." + common_1.Common.getComplexField(this.parentLookupObject.externalId);
            const specialField = (statics_1.CONSTANTS.__R_FIELD_MAPPING.get(this.objectName) || {})[name];
            return specialField || name;
        }
        else {
            return this.name__r;
        }
    }
    get fullOriginalName__r() {
        if (this.lookup) {
            const name = this.name__r + "." + common_1.Common.getComplexField(this.parentLookupObject.originalExternalId);
            const specialField = (statics_1.CONSTANTS.__R_FIELD_MAPPING.get(this.objectName) || {})[name];
            return specialField || name;
        }
        else {
            return this.name__r;
        }
    }
    get fullIdName__r() {
        if (this.lookup) {
            return this.name__r + ".Id";
        }
        else {
            return this.name__r;
        }
    }
    get __rNames() {
        if (this.is__r) {
            let parts = this.name.split('.');
            if (parts.length <= 1) {
                return [this.name];
            }
            return common_1.Common.flattenArrays(parts.slice(1).map(part => {
                let fields = common_1.Common.getFieldFromComplexField(part);
                return fields.split(statics_1.CONSTANTS.COMPLEX_FIELDS_SEPARATOR).map(field => `${parts[0]}.${field}`);
            }));
        }
        return [];
    }
    dynamic(key) {
        Object.assign(this, {
            creatable: false,
            name: key,
            label: key,
            updateable: false,
            type: "dynamic"
        });
        return this;
    }
    complex(key) {
        Object.assign(this, {
            name: key,
            label: key,
            calculated: true,
            isDescribed: true,
        });
        return this;
    }
}
exports.default = SFieldDescribe;
//# sourceMappingURL=sfieldDescribe.js.map