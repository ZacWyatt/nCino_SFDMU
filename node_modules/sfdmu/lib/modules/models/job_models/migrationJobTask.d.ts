import { Query } from 'soql-parser-js';
import { CachedCSVContent, MigrationJob as Job, ProcessedData, Script, ScriptObject, ScriptOrg, TaskData, TaskOrgData } from '../';
import { ADDON_EVENTS, OPERATION } from '../../components/common_components/enumerations';
import { Logger } from '../../components/common_components/logger';
import { ApiInfo } from '../api_models';
import { IApiEngine } from '../api_models/helper_interfaces';
import { ICSVIssueCsvRow } from '../common_models/helper_interfaces';
export default class MigrationJobTask {
    scriptObject: ScriptObject;
    job: Job;
    sourceTotalRecorsCount: number;
    targetTotalRecorsCount: number;
    apiEngine: IApiEngine;
    processedData: ProcessedData;
    updateMode: 'forwards' | 'backwards';
    apiProgressCallback: (apiResult: ApiInfo) => void;
    constructor(init: Partial<MigrationJobTask>);
    get sObjectName(): string;
    get script(): Script;
    get logger(): Logger;
    get operation(): OPERATION;
    get externalId(): string;
    get complexExternalId(): string;
    data: TaskData;
    sourceData: TaskOrgData;
    targetData: TaskOrgData;
    tempRecords: Array<any>;
    tempData: {
        filteredQueryValueCache: Map<string, Set<string>>;
    };
    validateCSV(): Promise<Array<ICSVIssueCsvRow>>;
    repairCSV(cachedCSVContent: CachedCSVContent, fixColumns: boolean): Promise<Array<ICSVIssueCsvRow>>;
    getRecordValue(record: any, propName: string): any;
    getCSVFilename(rootPath: string, pattern?: string): string;
    createQuery(fieldNames?: Array<string>, removeLimits?: boolean, parsedQuery?: Query, useFieldMapping?: boolean, isTargetQuery?: boolean): string;
    createShortQueryString(longString: string): string;
    createDeleteQuery(): string;
    getTotalRecordsCountAsync(): Promise<void>;
    deleteOldTargetRecords(): Promise<boolean>;
    deleteRecords(): Promise<number>;
    retrieveRecords(queryMode: "forwards" | "backwards" | "target", reversed: boolean): Promise<boolean>;
    updateRecords(updateMode: "forwards" | "backwards", warnUserCallbackAsync: (data: ProcessedData) => Promise<void>): Promise<number>;
    createApiEngine(org: ScriptOrg, operation: OPERATION, amountOfRecordsToProcess: number, updateRecordId: boolean, targetFilenameSuffix?: string): IApiEngine;
    getParallelThreadCount(): number;
    runAddonEventAsync(event: ADDON_EVENTS): Promise<boolean>;
    setApiEngine(engine: IApiEngine): void;
    mapRecords(records: Array<any>): void;
    private _apiProgressCallback;
    private _apiOperationError;
    private _createFilteredQueries;
    private _setExternalIdMap;
    private _retrieveFilteredRecords;
    private _transformQuery;
    private _mapSourceQueryToTarget;
    private _mapSourceRecordsToTarget;
    private _mapTargetRecordsToSource;
    private _targetFieldMapping;
    private _sourceFieldMapping;
}
