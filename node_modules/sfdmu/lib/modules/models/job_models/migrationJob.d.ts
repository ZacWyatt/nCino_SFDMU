import { CachedCSVContent, MigrationJobTask as Task, Script, ScriptObject } from '../';
import { ADDON_EVENTS } from '../../components/common_components/enumerations';
import { Logger } from '../../components/common_components/logger';
import { ICSVIssueCsvRow } from '../common_models/helper_interfaces';
import MigrationJobTask from './migrationJobTask';
export default class MigrationJob {
    script: Script;
    tasks: Task[];
    queryTasks: Task[];
    deleteTasks: Task[];
    valueMapping: Map<string, Map<string, string>>;
    csvIssues: Array<ICSVIssueCsvRow>;
    cachedCSVContent: CachedCSVContent;
    constructor(init: Partial<MigrationJob>);
    get logger(): Logger;
    get objects(): ScriptObject[];
    setup(): void;
    prepareJob(): void;
    processCSVFilesAsync(): Promise<void>;
    getTotalRecordsCountAsync(): Promise<void>;
    deleteOldRecordsAsync(): Promise<void>;
    retrieveRecordsAsync(): Promise<void>;
    updateRecordsAsync(): Promise<void>;
    getTaskBySObjectName(sObjectName: string): Task;
    getTaskByFieldPath(fieldPath: string, prevTask?: MigrationJobTask): {
        task: MigrationJobTask;
        field: string;
    };
    saveCSVFileAsync(fileName: string, data: Array<any>, alwaysCreateFile?: boolean): Promise<void>;
    saveCachedCsvDataFiles(): Promise<any>;
    clearCachedCSVData(): void;
    createSourceTargetMappingFields(): void;
    createDummyJobTask(sObjectName: string): Task;
    runAddonEventAsync(event: ADDON_EVENTS): Promise<boolean>;
    private _loadValueMappingFileAsync;
    private _mergeUserGroupCSVfiles;
    private _copyCSVFilesToSourceSubDir;
    private _validateAndRepairSourceCSVFiles;
}
