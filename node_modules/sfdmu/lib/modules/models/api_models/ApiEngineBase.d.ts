import { DATA_CACHE_TYPES, OPERATION } from '../../components/common_components/enumerations';
import { Logger } from '../../components/common_components/logger';
import { IFieldMapping, IFieldMappingResult, IOrgConnectionData } from '../common_models/helper_interfaces';
import { ApiInfo, IApiEngine } from './';
import { IApiEngineInitParameters, IApiJobCreateResult, ICsvChunk } from './helper_interfaces';
export default class ApiEngineBase implements IApiEngine, IFieldMapping, IApiEngineInitParameters {
    isChildJob: boolean;
    concurrencyMode: string;
    pollingIntervalMs: number;
    allOrNone: boolean;
    operation: OPERATION;
    updateRecordId: boolean;
    sObjectName: string;
    oldSObjectName: string;
    targetCSVFullFilename: string;
    createTargetCSVFiles: boolean;
    logger: Logger;
    simulationMode: boolean;
    connectionData: IOrgConnectionData;
    apiJobCreateResult: IApiJobCreateResult;
    numberJobRecordProcessed: number;
    numberJobRecordsFailed: number;
    numberJobTotalRecordsToProcess: number;
    binaryDataCache: DATA_CACHE_TYPES;
    restApiBatchSize: number;
    bulkApiV1BatchSize: number;
    binaryCacheDirectory: string;
    fieldsNotToWriteInTargetCSVFile: Array<string>;
    targetFieldMapping: IFieldMapping;
    get instanceUrl(): string;
    get accessToken(): string;
    get version(): string;
    get proxyUrl(): string;
    get strOperation(): string;
    getBulkApiStrOperation(): string;
    constructor(init: IApiEngineInitParameters);
    sourceQueryToTarget: (query: string, sourceObjectName: string) => IFieldMappingResult;
    sourceRecordsToTarget: (records: any[], sourceObjectName: string) => IFieldMappingResult;
    targetRecordsToSource: (records: any[], sourceObjectName: string) => IFieldMappingResult;
    transformQuery: (query: string, sourceObjectName: string) => IFieldMappingResult;
    getEngineName(): string;
    getIsRestApiEngine(): boolean;
    getEngineClassType(): typeof ApiEngineBase;
    executeCRUD(allRecords: Array<any>, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    executeCRUDMultithreaded(allRecords: any[], progressCallback: (progress: ApiInfo) => void, threadsCount: number): Promise<any[]>;
    createCRUDApiJobAsync(allRecords: Array<any>): Promise<IApiJobCreateResult>;
    createCRUDSimulationJobAsync(allRecords: Array<any>): Promise<IApiJobCreateResult>;
    processCRUDApiJobAsync(progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    processCRUDApiBatchAsync(csvChunk: ICsvChunk, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    processCRUDSimulationBatchAsync(csvChunk: ICsvChunk, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    getStrOperation(): string;
    protected writeToTargetCSVFileAsync(records: Array<any>, columns?: Array<string>): Promise<void>;
    protected getSourceRecordsArray(records: Array<any>): Array<any>;
    protected getResultRecordsArray(records: Array<any>): Array<any>;
    protected loadBinaryDataFromCache(records: Array<any>): Array<any>;
    protected getTargetCsvColumns(records: Array<any>): Array<string>;
}
