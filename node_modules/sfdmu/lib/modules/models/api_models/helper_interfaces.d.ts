import { CsvChunks } from '../';
import { DATA_CACHE_TYPES, OPERATION } from '../../components/common_components/enumerations';
import { Logger } from '../../components/common_components/logger';
import { IFieldMapping, IOrgConnectionData } from '../common_models/helper_interfaces';
import { ApiEngineBase, ApiInfo } from './';
export interface IApiEngine {
    executeCRUD(allRecords: Array<any>, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    executeCRUDMultithreaded(allRecords: Array<any>, progressCallback: (progress: ApiInfo) => void, threadsCount: number): Promise<Array<any>>;
    createCRUDApiJobAsync: (allrecords: Array<any>) => Promise<IApiJobCreateResult>;
    createCRUDSimulationJobAsync(allRecords: Array<any>): Promise<IApiJobCreateResult>;
    processCRUDApiJobAsync: (progressCallback: (progress: ApiInfo) => void) => Promise<Array<any>>;
    processCRUDApiBatchAsync(csvChunk: ICsvChunk, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    processCRUDSimulationBatchAsync(csvChunk: ICsvChunk, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    getEngineName(): string;
    getStrOperation(): string;
    getIsRestApiEngine(): boolean;
    getEngineClassType(): typeof ApiEngineBase;
}
export interface IApiEngineInitParameters {
    logger: Logger;
    connectionData: IOrgConnectionData;
    sObjectName: string;
    operation: OPERATION;
    pollingIntervalMs: number;
    concurrencyMode: string;
    updateRecordId: boolean;
    targetCSVFullFilename: string;
    createTargetCSVFiles: boolean;
    bulkApiV1BatchSize?: number;
    restApiBatchSize?: number;
    allOrNone?: boolean;
    targetFieldMapping?: IFieldMapping;
    simulationMode?: boolean;
    binaryDataCache?: DATA_CACHE_TYPES;
    binaryCacheDirectory?: string;
    isChildJob?: boolean;
}
export interface ICsvChunk {
    records: Array<object>;
    csvString: string;
}
export interface IApiJobCreateResult {
    chunks: CsvChunks;
    apiInfo: ApiInfo;
    connection?: any;
    allRecords?: Array<any>;
}
export interface IBlobField {
    objectName: string;
    fieldName: string;
    dataType: 'base64';
}
export interface ICachedRecords {
    query: string;
    records: any[];
}
