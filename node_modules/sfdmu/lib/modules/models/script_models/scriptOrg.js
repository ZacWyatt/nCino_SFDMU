"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const common_1 = require("../../components/common_components/common");
const enumerations_1 = require("../../components/common_components/enumerations");
const logger_1 = require("../../components/common_components/logger");
const sfdx_1 = require("../../components/common_components/sfdx");
const errors_1 = require("../common_models/errors");
class ScriptOrg {
    constructor() {
        this.name = "";
        this.orgUserName = "";
        this.instanceUrl = "";
        this.accessToken = "";
        this.media = enumerations_1.DATA_MEDIA_TYPE.Org;
        this.isSource = false;
        this.isPersonAccountEnabled = false;
        this.orgDescribe = new Map();
        this.isSandbox = false;
    }
    get connectionData() {
        return {
            instanceUrl: this.instanceUrl,
            accessToken: this.accessToken,
            apiVersion: this.script.apiVersion,
            proxyUrl: this.script.proxyUrl
        };
    }
    get isConnected() {
        return !!this.accessToken;
    }
    get isFileMedia() {
        return this.media == enumerations_1.DATA_MEDIA_TYPE.File;
    }
    get isOrgMedia() {
        return this.media == enumerations_1.DATA_MEDIA_TYPE.Org;
    }
    get isDescribed() {
        return this.orgDescribe.size > 0;
    }
    get objectNamesList() {
        return [...this.orgDescribe.keys()];
    }
    get isProduction() {
        return !this.isSandbox && this.organizationType != "Developer Edition";
    }
    get isDeveloper() {
        return this.organizationType == "Developer Edition";
    }
    get instanceDomain() {
        return common_1.Common.extractDomainFromUrlString(this.instanceUrl) || "";
    }
    async setupAsync(isSource) {
        this.isSource = isSource;
        await this._setupConnection();
        await this._describeOrg();
    }
    async promptUserForProductionModificationAsync() {
        let domain = this.instanceDomain.toLowerCase();
        if (!this.isFileMedia
            && this.isProduction
            && this.script.canModify.toLowerCase() != domain
            && (!this.isSource
                || this.isSource && this.script.hasDeleteFromSourceObjectOperation)) {
            let promptMessage = this.script.logger.getResourceString(logger_1.RESOURCES.canModifyPrompt, domain);
            let response = (await this.script.logger.textPromptAsync(promptMessage)).toLowerCase();
            if (response != domain) {
                throw new errors_1.CommandAbortedByUserError(this.script.logger.getResourceString(logger_1.RESOURCES.actionNotPermitted));
            }
        }
    }
    getConnection() {
        return sfdx_1.Sfdx.createOrgConnection(this.connectionData);
    }
    _parseForceOrgDisplayResult(commandResult) {
        if (!commandResult)
            return null;
        const jsonObj = JSON.parse(commandResult.replace(/\n/g, ' '));
        if (jsonObj.status || !jsonObj.result) {
            return null;
        }
        let output = new __1.OrgInfo();
        Object.assign(output, {
            AccessToken: jsonObj.result.accessToken,
            ClientId: jsonObj.result.clientId,
            ConnectedStatus: jsonObj.result.connectedStatus,
            Status: jsonObj.result.status,
            OrgId: jsonObj.result.id,
            InstanceUrl: jsonObj.result.instanceUrl,
            Username: jsonObj.result.username,
        });
        return output;
    }
    ;
    async _validateOrgAsync() {
        let apiSf = new sfdx_1.Sfdx(this);
        if (!this.isFileMedia) {
            try {
                let ret = await apiSf.queryOrgAsync("SELECT OrganizationType, IsSandbox FROM Organization LIMIT 1", false);
                this.isSandbox = ret[0]["IsSandbox"];
                this.organizationType = ret[0]["OrganizationType"];
            }
            catch (ex) {
                throw new errors_1.CommandInitializationError(this.script.logger.getResourceString(logger_1.RESOURCES.accessTokenExpired, this.name));
            }
            try {
                await apiSf.queryOrgAsync("SELECT IsPersonAccount FROM Account LIMIT 1", false);
                this.isPersonAccountEnabled = true;
            }
            catch (ex) {
                this.isPersonAccountEnabled = false;
            }
        }
    }
    async _setupConnection() {
        if (!this.isFileMedia) {
            this.orgUserName = this.name;
            if (!this.isConnected) {
                let processResult = "";
                if (this.script.useSf) {
                    this.script.logger.infoNormal(logger_1.RESOURCES.connectingToOrgSf, this.name);
                    processResult = common_1.Common.execSf("org display --json", this.name);
                }
                else {
                    this.script.logger.infoNormal(logger_1.RESOURCES.connectingToOrg, this.name);
                    processResult = common_1.Common.execSfdx("force:org:display --json", this.name);
                }
                let orgInfo = this._parseForceOrgDisplayResult(processResult);
                if (!orgInfo || !orgInfo.isConnected) {
                    throw new errors_1.CommandInitializationError(this.script.logger.getResourceString(logger_1.RESOURCES.connectingFailed, this.name));
                }
                else {
                    Object.assign(this, {
                        accessToken: orgInfo.AccessToken,
                        instanceUrl: orgInfo.InstanceUrl,
                        orgUserName: orgInfo.Username
                    });
                }
            }
            await this._validateOrgAsync();
            this.script.logger.infoNormal(logger_1.RESOURCES.successfullyConnected, this.name);
        }
    }
    async _describeOrg() {
        try {
            if (this.media == enumerations_1.DATA_MEDIA_TYPE.Org) {
                let apiSf = new sfdx_1.Sfdx(this);
                this.orgDescribe = (await apiSf.describeOrgAsync()).reduce((acc, describe) => {
                    acc.set(describe.name, describe);
                    return acc;
                }, new Map());
            }
        }
        catch (ex) { }
    }
}
exports.default = ScriptOrg;
//# sourceMappingURL=scriptOrg.js.map