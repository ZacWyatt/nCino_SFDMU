"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("es6-shim");
const class_transformer_1 = require("class-transformer");
const fs = require("fs");
const path = require("path");
const soql_parser_js_1 = require("soql-parser-js");
const __1 = require("../");
const sfdmuRunAddonManager_1 = require("../../../addons/components/sfdmu-run/sfdmuRunAddonManager");
const common_1 = require("../../components/common_components/common");
const enumerations_1 = require("../../components/common_components/enumerations");
const logger_1 = require("../../components/common_components/logger");
const sfdx_1 = require("../../components/common_components/sfdx");
const statics_1 = require("../../components/common_components/statics");
const errors_1 = require("../common_models/errors");
const scriptAddonManifestDefinition_1 = require("./scriptAddonManifestDefinition");
class Script {
    constructor() {
        this.orgs = new Array();
        this.objects = new Array();
        this.excludedObjects = new Array();
        this.objectSets = new Array();
        this.pollingIntervalMs = statics_1.CONSTANTS.DEFAULT_POLLING_INTERVAL_MS;
        this.pollingQueryTimeoutMs = statics_1.CONSTANTS.DEFAULT_POLLING_QUERY_TIMEOUT_MS;
        this.concurrencyMode = "Parallel";
        this.bulkThreshold = statics_1.CONSTANTS.DEFAULT_BULK_API_THRESHOLD_RECORDS;
        this.queryBulkApiThreshold = statics_1.CONSTANTS.QUERY_BULK_API_THRESHOLD;
        this.bulkApiVersion = statics_1.CONSTANTS.DEFAULT_BULK_API_VERSION;
        this.allOrNone = false;
        this.promptOnMissingParentObjects = true;
        this.promptOnIssuesInCSVFiles = true;
        this.validateCSVFilesOnly = false;
        this.apiVersion = statics_1.CONSTANTS.DEFAULT_API_VERSION;
        this.createTargetCSVFiles = true;
        this.importCSVFilesAsIs = false;
        this.alwaysUseRestApiToUpdateRecords = false;
        this.excludeIdsFromCSVFiles = false;
        this.keepObjectOrderWhileExecute = false;
        this.allowFieldTruncation = false;
        this.simulationMode = false;
        this.csvReadFileDelimiter = ",";
        this.csvWriteFileDelimiter = ",";
        this.useSeparatedCSVFiles = false;
        this.binaryDataCache = enumerations_1.DATA_CACHE_TYPES.InMemory;
        this.sourceRecordsCache = enumerations_1.DATA_CACHE_TYPES.InMemory;
        this.parallelBinaryDownloads = statics_1.CONSTANTS.DEFAULT_MAX_PARALLEL_BLOB_DOWNLOADS;
        this.parallelBulkJobs = 1;
        this.parallelRestJobs = 1;
        this.beforeAddons = new Array();
        this.afterAddons = new Array();
        this.dataRetrievedAddons = new Array();
        this.basePath = "";
        this.objectsMap = new Map();
        this.sourceTargetFieldMapping = new Map();
        this.useSf = false;
        this.logfullquery = false;
        this.extraSObjectDescriptions = new Map();
    }
    get sFOrg() {
        return !this.sourceOrg.isFileMedia ? this.sourceOrg : this.targetOrg;
    }
    get addonRuntime() {
        return this.addonManager.runtime;
    }
    get isPersonAccountEnabled() {
        return (this.sourceOrg.isPersonAccountEnabled || this.sourceOrg.isFileMedia)
            && (this.targetOrg.isPersonAccountEnabled || this.targetOrg.isFileMedia);
    }
    get bulkApiVersionNumber() {
        return +(this.bulkApiVersion || '1.0');
    }
    get targetDirectoryPath() {
        return path.join(this.basePath, statics_1.CONSTANTS.CSV_TARGET_SUB_DIRECTORY +
            (!this.objectSetIndex ? '' : `${statics_1.CONSTANTS.OBJECT_SET_SUBDIRECTORY_PREFIX}${this.objectSetIndex + 1}`));
    }
    get targetDirectory() {
        if (!fs.existsSync(this.targetDirectoryPath)) {
            fs.mkdirSync(this.targetDirectoryPath, { recursive: true });
        }
        return this.targetDirectoryPath;
    }
    get sourceDirectoryPath() {
        return path.join(this.basePath, statics_1.CONSTANTS.CSV_SOURCE_SUB_DIRECTORY +
            (!this.objectSetIndex ? '' : `${statics_1.CONSTANTS.OBJECT_SET_SUBDIRECTORY_PREFIX}${this.objectSetIndex + 1}`));
    }
    get sourceDirectory() {
        if (!fs.existsSync(this.sourceDirectoryPath)) {
            fs.mkdirSync(this.sourceDirectoryPath, { recursive: true });
        }
        return this.sourceDirectoryPath;
    }
    get rawSourceDirectory() {
        if (!fs.existsSync(this.rawSourceDirectoryPath)) {
            fs.mkdirSync(this.rawSourceDirectoryPath, { recursive: true });
        }
        return this.rawSourceDirectoryPath;
    }
    get rawSourceDirectoryPath() {
        return path.join(this.basePath, (!this.objectSetIndex || !this.useSeparatedCSVFiles ? '' : `${statics_1.CONSTANTS.RAW_SOURCE_SUB_DIRECTORY}/${statics_1.CONSTANTS.OBJECT_SET_SUBDIRECTORY_PREFIX}${this.objectSetIndex + 1}`));
    }
    get reportsDirectoryPath() {
        return path.join(this.basePath, (!this.objectSetIndex ? '' : `${statics_1.CONSTANTS.REPORTS_SUB_DIRECTORY}/${statics_1.CONSTANTS.OBJECT_SET_SUBDIRECTORY_PREFIX}${this.objectSetIndex + 1}`));
    }
    get reportsDirectory() {
        if (!fs.existsSync(this.reportsDirectoryPath)) {
            fs.mkdirSync(this.reportsDirectoryPath, { recursive: true });
        }
        return this.reportsDirectoryPath;
    }
    get binaryCacheDirectoryPath() {
        return path.join(this.basePath, statics_1.CONSTANTS.BINARY_CACHE_SUB_DIRECTORY, this.sourceOrg.orgUserName);
    }
    get binaryCacheDirectory() {
        if (!fs.existsSync(this.binaryCacheDirectoryPath)) {
            fs.mkdirSync(this.binaryCacheDirectoryPath, { recursive: true });
        }
        return this.binaryCacheDirectoryPath;
    }
    get sourceRecordsCacheDirectoryPath() {
        return path.join(this.basePath, statics_1.CONSTANTS.SOURCE_RECORDS_CACHE_SUB_DIRECTORY, this.sourceOrg.orgUserName);
    }
    get sourceRecordsCacheDirectory() {
        if (!fs.existsSync(this.sourceRecordsCacheDirectoryPath)) {
            fs.mkdirSync(this.sourceRecordsCacheDirectoryPath, { recursive: true });
        }
        return this.sourceRecordsCacheDirectoryPath;
    }
    get hasDeleteFromSourceObjectOperation() {
        return this.objects.some(object => object.isDeletedFromSourceOperation);
    }
    get hasDeleteByHierarchyOperation() {
        return this.objects.some(object => object.isHierarchicalDeleteOperation);
    }
    get hasUseSourceCSVFile() {
        return !this.sourceOrg.isFileMedia && this.objects.some(object => object.useSourceCSVFile);
    }
    async setupAsync(pinfo, logger, sourceUsername, targetUsername, basePath, apiVersion, canModify, simulation, useSf, logfullquery) {
        this.logger = logger;
        this.basePath = basePath;
        this.canModify = canModify || "";
        this.simulationMode = this.simulationMode || simulation;
        this.useSf = useSf;
        this.logfullquery = logfullquery;
        this.logger.objectMinimal({ [this.logger.getResourceString(logger_1.RESOURCES.runningVersion)]: pinfo.version });
        this.logger.objectMinimal({ [this.logger.getResourceString(logger_1.RESOURCES.runningAddOnApiVersion)]: pinfo.runAddOnApiInfo.version });
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this.runInfo = {
            apiVersion,
            sourceUsername,
            targetUsername,
            basePath,
            pinfo
        };
        this.addonManager = new sfdmuRunAddonManager_1.default(this);
        this.sourceOrg = this.orgs.filter(x => x.name == this.runInfo.sourceUsername)[0] || new __1.ScriptOrg();
        this.targetOrg = this.orgs.filter(x => x.name == this.runInfo.targetUsername)[0] || new __1.ScriptOrg();
        this.apiVersion = this.runInfo.apiVersion || this.apiVersion;
        if (this.runInfo.sourceUsername.toLowerCase() == statics_1.CONSTANTS.CSV_FILES_SOURCENAME
            && this.runInfo.targetUsername.toLowerCase() == statics_1.CONSTANTS.CSV_FILES_SOURCENAME) {
            throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.cannotMigrateFile2File));
        }
        if (this.simulationMode) {
            this.logger.infoMinimal(logger_1.RESOURCES.runningInSimulationMode);
        }
        this.objects.forEach(object => {
            object.operation = __1.ScriptObject.getOperation(object.operation);
        });
        await this.addonManager.triggerAddonModuleInitAsync();
        this.objects = this.objects.filter(object => {
            if (statics_1.CONSTANTS.EXCLUDED_OBJECTS.includes(object.name)) {
                return false;
            }
            let supportedObjectsForOpertation = statics_1.CONSTANTS.SUPPORTED_OBJECTS_FOR_OPERATION.get(object.name) || [];
            let isSupportedForOperation = !supportedObjectsForOpertation.length
                || supportedObjectsForOpertation.length && supportedObjectsForOpertation.includes(object.strOperation);
            let rule = object.operation != enumerations_1.OPERATION.Readonly
                && statics_1.CONSTANTS.NOT_SUPPORTED_OBJECTS.indexOf(object.name) < 0
                && isSupportedForOperation;
            let included = !object.excluded && (object.operation == enumerations_1.OPERATION.Readonly || rule) && this.excludedObjects.indexOf(object.name) < 0;
            if (!included) {
                if (this.excludedObjects.indexOf(object.name) < 0) {
                    this.excludedObjects.push(object.name);
                }
                this.logger.infoVerbose(logger_1.RESOURCES.objectIsExcluded, object.name);
            }
            return included;
        });
        if (this.objects.length == 0) {
            throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.noObjectsToProcess));
        }
        this.objects = common_1.Common.distinctArray(this.objects, "name");
        this.objects.forEach(object => {
            if (__1.ScriptObject.getOperation(object.operation) == enumerations_1.OPERATION.Unknown) {
                throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.invalidOperation, (object.operation || '').toString(), object.name));
            }
        });
        Object.assign(this.sourceOrg, {
            script: this,
            name: this.runInfo.sourceUsername,
            isSource: true,
            media: this.runInfo.sourceUsername.toLowerCase() == statics_1.CONSTANTS.CSV_FILES_SOURCENAME ? enumerations_1.DATA_MEDIA_TYPE.File : enumerations_1.DATA_MEDIA_TYPE.Org
        });
        Object.assign(this.targetOrg, {
            script: this,
            name: this.runInfo.targetUsername,
            media: this.runInfo.targetUsername.toLowerCase() == statics_1.CONSTANTS.CSV_FILES_SOURCENAME ? enumerations_1.DATA_MEDIA_TYPE.File : enumerations_1.DATA_MEDIA_TYPE.Org
        });
        await this.sourceOrg.setupAsync(true);
        await this.targetOrg.setupAsync(false);
        this.objects.forEach(object => {
            object.setup(this);
        });
        await this.sourceOrg.promptUserForProductionModificationAsync();
        await this.targetOrg.promptUserForProductionModificationAsync();
        await this.cleanupDirectories();
    }
    async cleanupDirectories() {
        if (this.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.File || this.hasUseSourceCSVFile) {
            try {
                common_1.Common.deleteFolderRecursive(this.sourceDirectoryPath, true);
            }
            catch (ex) {
                throw new errors_1.CommandExecutionError(this.logger.getResourceString(logger_1.RESOURCES.unableToDeleteSourceDirectory, this.sourceDirectoryPath));
            }
        }
        if (this.createTargetCSVFiles) {
            try {
                common_1.Common.deleteFolderRecursive(this.targetDirectoryPath, true);
            }
            catch (ex) {
                throw new errors_1.CommandExecutionError(this.logger.getResourceString(logger_1.RESOURCES.unableToDeleteTargetDirectory, this.targetDirectoryPath));
            }
        }
        if (this.binaryDataCache == enumerations_1.DATA_CACHE_TYPES.CleanFileCache) {
            try {
                common_1.Common.deleteFolderRecursive(this.binaryCacheDirectory, true);
            }
            catch (ex) {
                throw new errors_1.CommandExecutionError(this.logger.getResourceString(logger_1.RESOURCES.unableToDeleteCacheDirectory, this.binaryCacheDirectory));
            }
        }
        if (this.sourceRecordsCache == enumerations_1.DATA_CACHE_TYPES.CleanFileCache) {
            try {
                common_1.Common.deleteFolderRecursive(this.sourceRecordsCacheDirectory, true);
            }
            catch (ex) {
                throw new errors_1.CommandExecutionError(this.logger.getResourceString(logger_1.RESOURCES.unableToDeleteCacheDirectory, this.sourceRecordsCacheDirectory));
            }
        }
    }
    async processObjectsMetadataAsync() {
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this.logger.headerMinimal(logger_1.RESOURCES.retrievingOrgMatadata);
        for (let objectIndex = 0; objectIndex < this.objects.length; objectIndex++) {
            const thisObject = this.objects[objectIndex];
            this.logger.infoVerbose(logger_1.RESOURCES.processingObject, thisObject.name);
            await thisObject.describeAsync();
        }
        for (let objectIndex = 0; objectIndex < statics_1.CONSTANTS.EXTRA_OBJECTS_TO_DESCRIBE.length; objectIndex++) {
            const objectName = statics_1.CONSTANTS.EXTRA_OBJECTS_TO_DESCRIBE[objectIndex];
            await this.describeExtraObjectAsync(objectName);
        }
        for (let objectIndex = this.objects.length - 1; objectIndex >= 0; objectIndex--) {
            const thisObject = this.objects[objectIndex];
            this.logger.infoVerbose(logger_1.RESOURCES.processingObject, thisObject.name);
            const fieldsInQuery = [...thisObject.fieldsInQuery];
            for (let fieldIndex = 0; fieldIndex < fieldsInQuery.length; fieldIndex++) {
                const thisField = thisObject.fieldsInQueryMap.get(fieldsInQuery[fieldIndex]);
                let referencedObjectType = thisField.referencedObjectType == "Group" ? "User" : thisField.referencedObjectType;
                if (thisField.lookup && referencedObjectType) {
                    this.sourceTargetFieldMapping.forEach((mapping, sourceOjectName) => {
                        if (mapping.targetSObjectName == referencedObjectType && mapping.hasChange) {
                            referencedObjectType = sourceOjectName;
                        }
                    });
                    thisField.parentLookupObject = this.objects.filter(x => x.name == referencedObjectType)[0];
                    let isParentLookupObjectAdded = false;
                    if (!thisField.parentLookupObject) {
                        thisField.parentLookupObject = new __1.ScriptObject(referencedObjectType);
                        this.objects.push(thisField.parentLookupObject);
                        let externalId = thisField.parentLookupObject.defaultExternalId;
                        let allRecords = statics_1.CONSTANTS.SPECIAL_OBJECTS.indexOf(referencedObjectType) >= 0;
                        Object.assign(thisField.parentLookupObject, {
                            isExtraObject: true,
                            allRecords,
                            query: `SELECT Id, ${common_1.Common.getComplexField(externalId)} FROM ${referencedObjectType}`,
                            operation: enumerations_1.OPERATION.Readonly,
                            externalId
                        });
                        isParentLookupObjectAdded = true;
                    }
                    thisField.parentLookupObject.setup(this);
                    await thisField.parentLookupObject.describeAsync();
                    if ((thisField.parentLookupObject.isExtraObject || thisField.parentLookupObject.originalExternalIdIsEmpty)
                        && thisField.parentLookupObject.externalId != thisField.parentLookupObject.defaultExternalId
                        && thisField.scriptObject != thisField.parentLookupObject) {
                        if (thisField.parentLookupObject.externalId != "Id") {
                            thisField.parentLookupObject.parsedQuery.fields
                                = thisField.parentLookupObject.parsedQuery.fields
                                    .filter(field => field.field != thisField.parentLookupObject.externalId);
                            thisField.parentLookupObject.query = (0, soql_parser_js_1.composeQuery)(thisField.parentLookupObject.parsedQuery);
                        }
                        thisField.parentLookupObject.externalId = thisField.parentLookupObject.defaultExternalId;
                        thisField.parentLookupObject.script = null;
                        thisField.parentLookupObject.setup(this);
                    }
                    let externalIdFieldName1 = common_1.Common.getComplexField(thisField.parentLookupObject.externalId);
                    let parentExternalIdField1 = thisField.parentLookupObject.fieldsInQueryMap.get(externalIdFieldName1);
                    if (!parentExternalIdField1) {
                        thisField.parentLookupObject.externalId = "Id";
                        thisField.parentLookupObject.script = null;
                        thisField.parentLookupObject.setup(this);
                        this.logger.infoNormal(logger_1.RESOURCES.theExternalIdNotFoundInTheQuery, thisField.objectName, thisField.nameId, externalIdFieldName1, thisField.parentLookupObject.name, thisField.parentLookupObject.name, thisField.parentLookupObject.externalId);
                    }
                    if (thisField.parentLookupObject.isExtraObject && isParentLookupObjectAdded) {
                        this.logger.infoNormal(logger_1.RESOURCES.addedMissingParentLookupObject, thisField.parentLookupObject.name, thisField.objectName, thisField.nameId, thisField.parentLookupObject.externalId);
                    }
                    let __rFieldName = thisField.fullName__r;
                    let __rOriginalFieldName = thisField.fullOriginalName__r;
                    thisObject.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(__rFieldName));
                    thisObject.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(__rOriginalFieldName));
                    thisObject.query = (0, soql_parser_js_1.composeQuery)(thisObject.parsedQuery);
                    let externalIdFieldName = common_1.Common.getComplexField(thisField.parentLookupObject.externalId);
                    let parentExternalIdField = thisField.parentLookupObject.fieldsInQueryMap.get(externalIdFieldName);
                    let __rSField = ___setRSField(__rFieldName);
                    thisField.__rSField = __rSField;
                    if (__rFieldName != __rOriginalFieldName) {
                        ___setRSField(__rOriginalFieldName);
                    }
                    try {
                        parentExternalIdField.child__rSFields.push(__rSField);
                    }
                    catch (ex) {
                        this.logger.warn(logger_1.RESOURCES.failedToResolveExternalId, thisField.parentLookupObject.externalId, thisField.parentLookupObject.name, thisField.objectName, thisField.nameId);
                    }
                    function ___setRSField(fieldName) {
                        let __rSField = thisObject.fieldsInQueryMap.get(fieldName);
                        if (__rSField) {
                            __rSField.objectName = thisObject.name;
                            __rSField.scriptObject = thisObject;
                            __rSField.custom = thisField.custom;
                            __rSField.parentLookupObject = thisField.parentLookupObject;
                            __rSField.isPolymorphicField = thisField.isPolymorphicField;
                            __rSField.polymorphicReferenceObjectType = thisField.polymorphicReferenceObjectType;
                            __rSField.lookup = true;
                            __rSField.idSField = thisField;
                        }
                        return __rSField;
                    }
                }
            }
        }
        this.objects.forEach(object => {
            object.parsedQuery.fields = common_1.Common.distinctArray(object.parsedQuery.fields, "field");
            object.query = (0, soql_parser_js_1.composeQuery)(object.parsedQuery);
            if (object.hasToBeUpdated && object.fieldsToUpdate.length == 0
                && !(object.fieldsInQuery.length == 1 && object.fieldsInQuery[0] == "Id")) {
                this.logger.warn(logger_1.RESOURCES.noFieldsToUpdate, object.name);
            }
        });
    }
    async describeExtraObjectAsync(objectName) {
        const org = this.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org ? this.sourceOrg : this.targetOrg;
        const messageSource = this.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org ? logger_1.RESOURCES.source : logger_1.RESOURCES.target;
        this.logger.infoNormal(logger_1.RESOURCES.retrievingObjectMetadata, objectName, this.logger.getResourceString(messageSource));
        let apisf = new sfdx_1.Sfdx(org);
        const description = await apisf.describeSObjectAsync(objectName);
        this.extraSObjectDescriptions.set(objectName, description);
    }
    verifyOrgs() {
        if (this.objects.some(obj => obj.name == "Account" || obj.name == "Contact")) {
            if (this.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && this.sourceOrg.isPersonAccountEnabled
                && this.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && !this.sourceOrg.isPersonAccountEnabled) {
                throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.personAccountSupportWarning, this.logger.getResourceString(logger_1.RESOURCES.sourceOrg)));
            }
            if (this.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && !this.sourceOrg.isPersonAccountEnabled
                && this.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && this.sourceOrg.isPersonAccountEnabled) {
                throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.personAccountSupportWarning, this.logger.getResourceString(logger_1.RESOURCES.target)));
            }
        }
    }
    loadFieldMappingConfiguration() {
        this.objects.forEach(object => {
            if (object.useFieldMapping && object.fieldMapping.length > 0) {
                if (!this.sourceTargetFieldMapping.has(object.name)) {
                    this.sourceTargetFieldMapping.set(object.name, new __1.ObjectFieldMapping(object.name, object.name));
                }
                object.fieldMapping.forEach(mapping => {
                    if (mapping.targetObject) {
                        this.sourceTargetFieldMapping.get(object.name).targetSObjectName = mapping.targetObject;
                    }
                    if (mapping.sourceField && mapping.targetField) {
                        this.sourceTargetFieldMapping.get(object.name).fieldMapping.set(mapping.sourceField, mapping.targetField);
                        this.sourceTargetFieldMapping.get(object.name).fieldMapping.set(common_1.Common.getFieldName__r(null, mapping.sourceField), common_1.Common.getFieldName__r(null, mapping.targetField));
                    }
                });
            }
        });
    }
    async loadFieldMappingConfigurationFileAsync() {
        let filePath = path.join(this.basePath, statics_1.CONSTANTS.FIELD_MAPPING_FILENAME);
        let csvRows = await common_1.Common.readCsvFileAsync(filePath);
        if (csvRows.length > 0) {
            this.logger.infoVerbose(logger_1.RESOURCES.readingFieldsMappingFile, statics_1.CONSTANTS.FIELD_MAPPING_FILENAME);
            csvRows.forEach(row => {
                if (row["ObjectName"] && row["Target"]) {
                    let objectName = String(row["ObjectName"]).trim();
                    let scriptObject = this.objectsMap.get(objectName);
                    if (scriptObject && scriptObject.useFieldMapping) {
                        let target = String(row["Target"]).trim();
                        if (!row["FieldName"]) {
                            this.sourceTargetFieldMapping.set(objectName, new __1.ObjectFieldMapping(objectName, target));
                        }
                        else {
                            let fieldName = String(row["FieldName"]).trim();
                            if (!this.sourceTargetFieldMapping.has(objectName)) {
                                this.sourceTargetFieldMapping.set(objectName, new __1.ObjectFieldMapping(objectName, objectName));
                            }
                            this.sourceTargetFieldMapping.get(objectName).fieldMapping.set(fieldName, target);
                        }
                    }
                }
            });
        }
    }
    getAllAddOns() {
        return this.beforeAddons.concat(this.afterAddons, this.dataRetrievedAddons, common_1.Common.flattenArrays(this.objects.map(object => object.beforeAddons.concat(object.afterAddons, object.beforeUpdateAddons, object.afterUpdateAddons))));
    }
    addScriptObject(object) {
        let newObject = new __1.ScriptObject(object.objectName);
        newObject.operation = object.operation || enumerations_1.OPERATION.Readonly;
        this.objects.push(newObject);
        return newObject;
    }
}
exports.default = Script;
__decorate([
    (0, class_transformer_1.Type)(() => __1.ScriptOrg),
    __metadata("design:type", Array)
], Script.prototype, "orgs", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => __1.ScriptObject),
    __metadata("design:type", Array)
], Script.prototype, "objects", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => __1.ScriptObjectSet),
    __metadata("design:type", Array)
], Script.prototype, "objectSets", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], Script.prototype, "beforeAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], Script.prototype, "afterAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], Script.prototype, "dataRetrievedAddons", void 0);
//# sourceMappingURL=script.js.map