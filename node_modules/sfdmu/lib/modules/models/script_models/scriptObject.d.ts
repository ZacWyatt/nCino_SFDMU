import 'reflect-metadata';
import 'es6-shim';
import { Query } from 'soql-parser-js';
import { MigrationJobTask, ObjectFieldMapping, Script, ScriptMappingItem, ScriptMockField, SObjectDescribe } from '../';
import ISfdmuRunScriptObject from '../../../addons/components/sfdmu-run/ISfdmuRunScriptObject';
import { OPERATION } from '../../components/common_components/enumerations';
import SFieldDescribe from '../sf_models/sfieldDescribe';
import ScriptAddonManifestDefinition from './scriptAddonManifestDefinition';
export default class ScriptObject implements ISfdmuRunScriptObject {
    constructor(name?: string);
    mockFields: ScriptMockField[];
    fieldMapping: ScriptMappingItem[];
    query: string;
    deleteQuery: string;
    operation: OPERATION;
    externalId: string;
    deleteOldData: boolean;
    deleteFromSource: boolean;
    deleteByHierarchy: boolean;
    hardDelete: boolean;
    updateWithMockData: boolean;
    sourceRecordsFilter: string;
    targetRecordsFilter: string;
    excluded: boolean;
    useCSVValuesMapping: boolean;
    useFieldMapping: boolean;
    useValuesMapping: boolean;
    allRecords: boolean;
    master: boolean;
    excludedFields: Array<string>;
    excludedFromUpdateFields: Array<string>;
    bulkApiV1BatchSize: number;
    restApiBatchSize: number;
    useQueryAll: boolean;
    queryAllTarget: boolean;
    skipExistingRecords: boolean;
    parallelBulkJobs: number;
    parallelRestJobs: number;
    useSourceCSVFile: boolean;
    skipRecordsComparison: boolean;
    beforeAddons: ScriptAddonManifestDefinition[];
    afterAddons: ScriptAddonManifestDefinition[];
    beforeUpdateAddons: ScriptAddonManifestDefinition[];
    afterUpdateAddons: ScriptAddonManifestDefinition[];
    filterRecordsAddons: ScriptAddonManifestDefinition[];
    script: Script;
    get name(): string;
    sourceSObjectDescribe: SObjectDescribe;
    targetSObjectDescribe: SObjectDescribe;
    originalExternalId: string;
    parsedQuery: Query;
    parsedDeleteQuery: Query;
    isExtraObject: boolean;
    processAllSource: boolean;
    processAllTarget: boolean;
    multiselectPattern: any;
    referenceFieldToObjectMap: Map<string, string>;
    excludedFieldsFromUpdate: Array<string>;
    originalExternalIdIsEmpty: boolean;
    extraFieldsToUpdate: Array<string>;
    get batchSizes(): {
        restBatchSize: number;
        bulkV1BatchSize: number;
    };
    get sourceTargetFieldMapping(): ObjectFieldMapping;
    get task(): MigrationJobTask;
    get externalIdSFieldDescribe(): SFieldDescribe;
    get fieldsInQuery(): string[];
    get fieldsInQueryMap(): Map<string, SFieldDescribe>;
    get fieldsToUpdate(): string[];
    get fieldsToUpdateMap(): Map<string, SFieldDescribe>;
    get hasRecordTypeIdField(): boolean;
    get strOperation(): string;
    get strOperationInsertOrUpdate(): string;
    get isLimitedQuery(): boolean;
    get isSpecialObject(): boolean;
    get isReadonlyObject(): boolean;
    get hasComplexExternalId(): boolean;
    get hasAutonumberExternalId(): boolean;
    get hasComplexOriginalExternalId(): boolean;
    get isDescribed(): boolean;
    get isInitialized(): boolean;
    get parentLookupObjects(): ScriptObject[];
    get parentMasterDetailObjects(): ScriptObject[];
    get complexExternalId(): string;
    get complexOriginalExternalId(): string;
    get hasParentLookupObjects(): boolean;
    get hasChildLookupObjects(): boolean;
    get isObjectWithoutRelationships(): boolean;
    get hasToBeUpdated(): boolean;
    get hasUseValueMapping(): boolean;
    get targetQuery(): string;
    get targetObjectName(): string;
    get isMapped(): boolean;
    get sourceToTargetFieldNameMap(): Map<string, string>;
    get defaultExternalId(): string;
    get idFieldIsMapped(): boolean;
    get isDeletedFromSourceOperation(): boolean;
    get isHierarchicalDeleteOperation(): boolean;
    setup(script: Script): void;
    describeAsync(): Promise<void>;
    getMandatoryQueryFields(): Array<string>;
    static getStrOperation(operation: OPERATION | string): string;
    static getOperation(operation: OPERATION | string): OPERATION;
    getExtraFieldsToUpdate(): string[];
    private _addOrRemoveFields;
    private _fixObjectName;
    private _fixFieldNames;
    private _updateSObjectDescribe;
    private _fixPolymorphicFields;
    private _validateFields;
    private _parseQuery;
}
