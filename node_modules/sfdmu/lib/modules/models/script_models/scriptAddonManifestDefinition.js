"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const enumerations_1 = require("../../components/common_components/enumerations");
const statics_1 = require("../../components/common_components/statics");
class ScriptAddonManifestDefinition {
    constructor(init) {
        this.command = "sfdmu:run";
        this.event = enumerations_1.ADDON_EVENTS.none;
        this.objectName = '';
        if (init) {
            Object.assign(this, init);
        }
    }
    get isCore() {
        return this.moduleName && this.moduleName.startsWith(statics_1.CONSTANTS.CORE_ADDON_MODULES_NAME_PREFIX);
    }
    get moduleName() {
        let name = this.module || this.path;
        if (name) {
            return path.basename(name);
        }
    }
    get moduleDisplayName() {
        if (this.moduleName.indexOf(':') >= 0)
            return this.moduleName;
        return this.isCore ? statics_1.CONSTANTS.CORE_ADDON_MODULES_NAME_PREFIX + this.moduleName
            : statics_1.CONSTANTS.CUSTOM_ADDON_MODULES_NAME_PREFIX + this.moduleName;
    }
    get isValid() {
        return !!this.moduleName && this.event != enumerations_1.ADDON_EVENTS.none;
    }
    get moduleRequirePath() {
        if (!this.isValid) {
            return null;
        }
        let requiredPath = "";
        if (this.module) {
            if (this.module.indexOf(statics_1.CONSTANTS.CORE_ADDON_MODULES_NAME_PREFIX) >= 0) {
                let modulePath = statics_1.CONSTANTS.CORE_ADDON_MODULES_BASE_PATH
                    + this.command.replace(statics_1.CONSTANTS.CORE_ADDON_MODULES_FOLDER_SEPARATOR, statics_1.CONSTANTS.CORE_ADDON_MODULES_FOLDER_NAME_SEPARATOR) + '/'
                    + this.module.replace(statics_1.CONSTANTS.CORE_ADDON_MODULES_NAME_PREFIX, '/');
                requiredPath = path.normalize(path.resolve(__dirname, modulePath));
            }
            else {
                requiredPath = this.module;
            }
        }
        else {
            if (!path.isAbsolute(this.path)) {
                requiredPath = path.resolve(this.isCore ? __dirname : this.basePath, this.path);
            }
            else {
                requiredPath = this.path;
            }
        }
        return requiredPath;
    }
    appliedToObject(objectName) {
        return this.objectName == objectName
            || Array.isArray(this.objects) && (this.objects.length == 0 || this.objects.indexOf(objectName) >= 0);
    }
}
exports.default = ScriptAddonManifestDefinition;
//# sourceMappingURL=scriptAddonManifestDefinition.js.map