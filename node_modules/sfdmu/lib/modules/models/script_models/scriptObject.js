"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("es6-shim");
const class_transformer_1 = require("class-transformer");
const deepClone = require("deep.clone");
const soql_parser_js_1 = require("soql-parser-js");
const __1 = require("../");
const common_1 = require("../../components/common_components/common");
const enumerations_1 = require("../../components/common_components/enumerations");
const logger_1 = require("../../components/common_components/logger");
const sfdx_1 = require("../../components/common_components/sfdx");
const statics_1 = require("../../components/common_components/statics");
const errors_1 = require("../common_models/errors");
const sfieldDescribe_1 = require("../sf_models/sfieldDescribe");
const scriptAddonManifestDefinition_1 = require("./scriptAddonManifestDefinition");
class ScriptObject {
    constructor(name) {
        this.mockFields = new Array();
        this.fieldMapping = new Array();
        this.query = "";
        this.deleteQuery = "";
        this.operation = enumerations_1.OPERATION.Readonly;
        this.deleteOldData = false;
        this.deleteFromSource = false;
        this.deleteByHierarchy = false;
        this.hardDelete = false;
        this.updateWithMockData = false;
        this.sourceRecordsFilter = "";
        this.targetRecordsFilter = "";
        this.excluded = false;
        this.useCSVValuesMapping = false;
        this.useFieldMapping = false;
        this.useValuesMapping = false;
        this.master = true;
        this.excludedFields = new Array();
        this.excludedFromUpdateFields = new Array();
        this.parallelBulkJobs = 1;
        this.parallelRestJobs = 1;
        this.skipRecordsComparison = false;
        this.beforeAddons = new Array();
        this.afterAddons = new Array();
        this.beforeUpdateAddons = new Array();
        this.afterUpdateAddons = new Array();
        this.filterRecordsAddons = new Array();
        this.originalExternalId = "";
        this.isExtraObject = false;
        this.processAllSource = false;
        this.processAllTarget = false;
        this.referenceFieldToObjectMap = new Map();
        this.excludedFieldsFromUpdate = new Array();
        this.originalExternalIdIsEmpty = false;
        this.extraFieldsToUpdate = new Array();
        if (name) {
            this.query = `SELECT Id FROM ${name}`;
        }
    }
    get name() {
        if (this.parsedQuery) {
            return this.parsedQuery.sObject;
        }
        else {
            try {
                return (0, soql_parser_js_1.parseQuery)(this.query).sObject;
            }
            catch (ex) {
                return "";
            }
        }
    }
    ;
    get batchSizes() {
        return {
            restBatchSize: this.restApiBatchSize ? this.restApiBatchSize
                : this.script.restApiBatchSize ? this.script.restApiBatchSize
                    : statics_1.CONSTANTS.DEFAULT_REST_API_BATCH_SIZE,
            bulkV1BatchSize: this.bulkApiV1BatchSize ? this.bulkApiV1BatchSize
                : this.script.bulkApiV1BatchSize ? this.script.bulkApiV1BatchSize
                    : statics_1.CONSTANTS.DEFAULT_BULK_API_V1_BATCH_SIZE
        };
    }
    get sourceTargetFieldMapping() {
        return this.script.sourceTargetFieldMapping.get(this.name) || new __1.ObjectFieldMapping(this.name, this.name);
    }
    get task() {
        return this.script.job.getTaskBySObjectName(this.name);
    }
    get externalIdSFieldDescribe() {
        return this.isDescribed
            && this.sourceSObjectDescribe.fieldsMap.get(this.externalId)
            || new sfieldDescribe_1.default();
    }
    get fieldsInQuery() {
        if (!this.parsedQuery) {
            return new Array();
        }
        return this.parsedQuery.fields.map(x => x.field);
    }
    get fieldsInQueryMap() {
        if (!this.isDescribed) {
            return new Map();
        }
        return common_1.Common.filterMapByArray(this.fieldsInQuery, this.sourceSObjectDescribe.fieldsMap, key => new sfieldDescribe_1.default().dynamic(key), true);
    }
    get fieldsToUpdate() {
        if (!this.parsedQuery
            || !this.isDescribed
            || this.sourceSObjectDescribe.fieldsMap.size == 0
            || this.operation == enumerations_1.OPERATION.Readonly) {
            return new Array();
        }
        let fields = this.parsedQuery.fields.map(x => {
            let name = x.field;
            let targetName = name;
            let isFieldMapped = this.useFieldMapping
                && this.sourceTargetFieldMapping.hasChange
                && this.sourceTargetFieldMapping.fieldMapping.has(name);
            if (isFieldMapped) {
                targetName = this.sourceTargetFieldMapping.fieldMapping.get(name);
            }
            let describe = this.targetSObjectDescribe
                && this.targetSObjectDescribe.fieldsMap
                && this.targetSObjectDescribe.fieldsMap.get(targetName);
            if (!describe
                || describe.readonly && !isFieldMapped
                || this.excludedFieldsFromUpdate.indexOf(targetName) >= 0
                || this.excludedFromUpdateFields.indexOf(name) >= 0) {
                return null;
            }
            return x.field;
        }).filter(x => !!x);
        fields = fields.concat(this.getExtraFieldsToUpdate());
        return common_1.Common.distinctStringArray(fields);
    }
    get fieldsToUpdateMap() {
        if (!this.sourceSObjectDescribe) {
            return new Map();
        }
        return common_1.Common.filterMapByArray(this.fieldsToUpdate, this.sourceSObjectDescribe.fieldsMap);
    }
    get hasRecordTypeIdField() {
        return this.fieldsInQuery.some(x => x == "RecordTypeId");
    }
    get strOperation() {
        return ScriptObject.getStrOperation(this.operation);
    }
    get strOperationInsertOrUpdate() {
        if (this.operation == enumerations_1.OPERATION.Insert || this.operation == enumerations_1.OPERATION.Upsert) {
            return ScriptObject.getStrOperation(enumerations_1.OPERATION.Insert);
        }
        else {
            return ScriptObject.getStrOperation(enumerations_1.OPERATION.Update);
        }
    }
    get isLimitedQuery() {
        return this.parsedQuery
            && (this.parsedQuery.limit > 0 || !!this.parsedQuery.where);
    }
    get isSpecialObject() {
        return statics_1.CONSTANTS.SPECIAL_OBJECTS.indexOf(this.name) >= 0;
    }
    get isReadonlyObject() {
        return this.operation == enumerations_1.OPERATION.Readonly || this.operation == enumerations_1.OPERATION.Delete;
    }
    get hasComplexExternalId() {
        return common_1.Common.isComplexOr__rField(this.externalId);
    }
    get hasAutonumberExternalId() {
        let extIdField = this.externalIdSFieldDescribe;
        return extIdField.autoNumber || extIdField.name == "Id";
    }
    get hasComplexOriginalExternalId() {
        return common_1.Common.isComplexOr__rField(this.originalExternalId);
    }
    get isDescribed() {
        return !!this.sourceSObjectDescribe;
    }
    get isInitialized() {
        return !!this.script;
    }
    get parentLookupObjects() {
        return common_1.Common.distinctArray([...this.fieldsInQueryMap.values()].map(x => {
            if (x.lookup) {
                return x.parentLookupObject;
            }
            return null;
        }).filter(x => !!x), 'name');
    }
    get parentMasterDetailObjects() {
        return common_1.Common.distinctArray([...this.fieldsInQueryMap.values()].map(x => {
            if (x.isMasterDetail) {
                return x.parentLookupObject;
            }
            if (x.lookup
                && statics_1.CONSTANTS.SPECIAL_OBJECT_LOOKUP_MASTER_DETAIL_ORDER.get(x.parentLookupObject.name)
                && statics_1.CONSTANTS.SPECIAL_OBJECT_LOOKUP_MASTER_DETAIL_ORDER.get(x.parentLookupObject.name).indexOf(this.name) >= 0) {
                return x.parentLookupObject;
            }
            return null;
        }).filter(x => !!x), 'name');
    }
    get complexExternalId() {
        return common_1.Common.getComplexField(this.externalId);
    }
    get complexOriginalExternalId() {
        return common_1.Common.getComplexField(this.originalExternalId);
    }
    get hasParentLookupObjects() {
        return [...this.fieldsInQueryMap.values()].some(field => {
            return field.isSimpleReference;
        });
    }
    get hasChildLookupObjects() {
        return [...this.fieldsInQueryMap.values()].some(field => {
            return field.child__rSFields.length > 0;
        });
    }
    get isObjectWithoutRelationships() {
        return !this.hasParentLookupObjects && !this.hasChildLookupObjects;
    }
    get hasToBeUpdated() {
        return this.operation != enumerations_1.OPERATION.Readonly && this.operation != enumerations_1.OPERATION.Delete;
    }
    get hasUseValueMapping() {
        return this.useCSVValuesMapping || this.useValuesMapping;
    }
    get targetQuery() {
        if (!this.parsedQuery || !this.useFieldMapping) {
            return this.query;
        }
        let targetParsedQuery = deepClone.deepCloneSync(this.parsedQuery, {
            absolute: true,
        });
        targetParsedQuery.sObject = this.targetObjectName;
        targetParsedQuery.fields = [];
        [...this.fieldsInQueryMap.values()].forEach(field => {
            targetParsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(field.targetName));
        });
        return (0, soql_parser_js_1.composeQuery)(targetParsedQuery);
    }
    get targetObjectName() {
        if (!this.useFieldMapping) {
            return this.name;
        }
        let mapping = this.script.sourceTargetFieldMapping.get(this.name);
        if (mapping) {
            return mapping.targetSObjectName;
        }
        return this.name;
    }
    get isMapped() {
        return this.script.sourceTargetFieldMapping.size > 0;
    }
    get sourceToTargetFieldNameMap() {
        let m = new Map();
        this.fieldsInQueryMap.forEach(field => {
            m.set(field.name, field.targetName);
        });
        return m;
    }
    get defaultExternalId() {
        if (!this.isDescribed) {
            return "Id";
        }
        if (statics_1.CONSTANTS.DEFAULT_EXTERNAL_IDS[this.name]) {
            return statics_1.CONSTANTS.DEFAULT_EXTERNAL_IDS[this.name];
        }
        return ([].concat([...this.sourceSObjectDescribe.fieldsMap.values()].filter(field => field.nameField), [...this.sourceSObjectDescribe.fieldsMap.values()].filter(field => field.autoNumber), [...this.sourceSObjectDescribe.fieldsMap.values()].filter(field => field.unique))[0]
            || { name: "Id" })["name"];
    }
    get idFieldIsMapped() {
        return this.isMapped && this.sourceToTargetFieldNameMap.get("Id") != "Id";
    }
    get isDeletedFromSourceOperation() {
        return this.operation == enumerations_1.OPERATION.Delete
            && this.deleteFromSource
            && this.script.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org;
    }
    get isHierarchicalDeleteOperation() {
        return this.deleteByHierarchy
            && this.script.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org;
    }
    setup(script) {
        if (this.isInitialized)
            return;
        this.script = script;
        this.originalExternalIdIsEmpty = !this.externalId;
        this.externalId = this.externalId || statics_1.CONSTANTS.DEFAULT_EXTERNAL_ID_FIELD_NAME;
        this.originalExternalId = this.externalId;
        this.allRecords = typeof this.allRecords == "undefined" ? this.master : this.allRecords;
        if (this.operation == enumerations_1.OPERATION.DeleteSource) {
            this.deleteFromSource = true;
            this.operation = enumerations_1.OPERATION.Delete;
        }
        if (this.operation == enumerations_1.OPERATION.DeleteHierarchy) {
            this.deleteByHierarchy = true;
            this.operation = enumerations_1.OPERATION.Delete;
        }
        if (this.operation == enumerations_1.OPERATION.HardDelete) {
            this.hardDelete = true;
            this.operation = enumerations_1.OPERATION.Delete;
        }
        if (this.script.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.File) {
            this.operation = enumerations_1.OPERATION.Upsert;
        }
        if (this.operation == enumerations_1.OPERATION.Insert || this.isDeletedFromSourceOperation) {
            this.externalId = "Id";
        }
        try {
            this.parsedQuery = this._parseQuery(this.query);
        }
        catch (ex) {
            throw new errors_1.CommandInitializationError(this.script.logger.getResourceString(logger_1.RESOURCES.malformedQuery, this.name, this.query, ex));
        }
        if (this.operation == enumerations_1.OPERATION.Delete && !this.isDeletedFromSourceOperation && !this.deleteByHierarchy) {
            this.deleteOldData = true;
            this.parsedQuery.fields = [(0, soql_parser_js_1.getComposedField)("Id")];
        }
        else if (this.deleteByHierarchy) {
            if (this.operation == enumerations_1.OPERATION.Delete) {
                this.operation = enumerations_1.OPERATION.Readonly;
                this.deleteOldData = false;
            }
            else {
                this.deleteByHierarchy = false;
            }
        }
        if (!this.fieldsInQuery.some(x => x == "Id")) {
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)("Id"));
        }
        if (this.hasComplexExternalId) {
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(this.complexExternalId));
        }
        else {
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(this.externalId));
        }
        this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(this.complexOriginalExternalId));
        if (this.script.isPersonAccountEnabled && (this.name == "Account" || this.name == "Contact")) {
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)("IsPersonAccount"));
            if (this.name == "Contact") {
                if (!this.fieldsInQuery.some(fieldName => fieldName == "AccountId")) {
                    this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)("AccountId"));
                    this.excludedFieldsFromUpdate.push("AccountId");
                }
            }
        }
        this.parsedQuery.fields = common_1.Common.distinctArray(this.parsedQuery.fields, "field").filter(field => !!field.field);
        this.query = (0, soql_parser_js_1.composeQuery)(this.parsedQuery);
        this.script.objectsMap.set(this.name, this);
        if (this.deleteOldData) {
            try {
                if (this.deleteQuery) {
                    this.parsedDeleteQuery = (0, soql_parser_js_1.parseQuery)(this.deleteQuery);
                }
                else {
                    this.parsedDeleteQuery = (0, soql_parser_js_1.parseQuery)(this.query);
                }
                this.parsedDeleteQuery.fields = [(0, soql_parser_js_1.getComposedField)("Id")];
                if (this.script.isPersonAccountEnabled && this.name == "Contact") {
                    this.parsedDeleteQuery.where = common_1.Common.composeWhereClause(this.parsedDeleteQuery.where, "IsPersonAccount", "false", "=", "BOOLEAN", "AND");
                }
                this.deleteQuery = (0, soql_parser_js_1.composeQuery)(this.parsedDeleteQuery);
            }
            catch (ex) {
                throw new errors_1.CommandInitializationError(this.script.logger.getResourceString(logger_1.RESOURCES.malformedDeleteQuery, this.name, this.deleteQuery, ex));
            }
        }
    }
    async describeAsync() {
        if (this.isDescribed)
            return;
        if (!this.isDescribed) {
            this._fixObjectName();
            if (this.script.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org) {
                try {
                    let apisf = new sfdx_1.Sfdx(this.script.sourceOrg);
                    this.script.logger.infoNormal(logger_1.RESOURCES.retrievingObjectMetadata, this.name, this.script.logger.getResourceString(logger_1.RESOURCES.source));
                    this.sourceSObjectDescribe = await apisf.describeSObjectAsync(this.name);
                    this._updateSObjectDescribe(this.sourceSObjectDescribe);
                    if (this.script.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.File) {
                        this.targetSObjectDescribe = this.sourceSObjectDescribe;
                    }
                    this._addOrRemoveFields(this.sourceSObjectDescribe);
                    this._fixFieldNames(this.sourceSObjectDescribe);
                    this._validateFields(this.sourceSObjectDescribe, true);
                }
                catch (ex) {
                    if (ex instanceof errors_1.CommandInitializationError) {
                        throw ex;
                    }
                    throw new errors_1.OrgMetadataError(this.script.logger.getResourceString(logger_1.RESOURCES.missingObjectInSource, this.name));
                }
            }
            if (this.script.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org) {
                try {
                    let apisf = new sfdx_1.Sfdx(this.script.targetOrg);
                    this.script.logger.infoNormal(logger_1.RESOURCES.retrievingObjectMetadata, this.name, this.script.logger.getResourceString(logger_1.RESOURCES.target));
                    this.targetSObjectDescribe = await apisf.describeSObjectAsync(this.name, this.sourceTargetFieldMapping);
                    this._updateSObjectDescribe(this.targetSObjectDescribe);
                    if (this.script.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.File) {
                        this.sourceSObjectDescribe = this.targetSObjectDescribe;
                        this._addOrRemoveFields(this.targetSObjectDescribe);
                        this._fixFieldNames(this.targetSObjectDescribe);
                    }
                    this._validateFields(this.targetSObjectDescribe, false);
                }
                catch (ex) {
                    if (ex instanceof errors_1.CommandInitializationError) {
                        throw ex;
                    }
                    throw new errors_1.OrgMetadataError(this.script.logger.getResourceString(logger_1.RESOURCES.missingObjectInTarget, this.name));
                }
            }
            await this._fixPolymorphicFields();
        }
    }
    getMandatoryQueryFields() {
        let prop = `MANDATORY_QUERY_FIELDS_FOR_${this.strOperationInsertOrUpdate.toUpperCase()}`;
        return statics_1.CONSTANTS[prop] && statics_1.CONSTANTS[prop].get(this.name) || new Array();
    }
    static getStrOperation(operation) {
        operation = typeof operation == 'undefined' || operation == null ? '' : operation;
        if ((typeof operation != "string") == true) {
            if (typeof enumerations_1.OPERATION[operation] == 'undefined') {
                return enumerations_1.OPERATION.Unknown.toString();
            }
            return enumerations_1.OPERATION[operation].toString();
        }
        return operation.toString();
    }
    static getOperation(operation) {
        operation = typeof operation == 'undefined' || operation == null ? '' : operation;
        if ((typeof operation == "string") == true) {
            if (typeof enumerations_1.OPERATION[operation.toString()] == 'undefined') {
                return enumerations_1.OPERATION.Unknown;
            }
            return enumerations_1.OPERATION[operation.toString()];
        }
        return operation;
    }
    getExtraFieldsToUpdate() {
        return [].concat(statics_1.CONSTANTS.FIELDS_TO_UPDATE_ALWAYS.get(this.name) || [], this.extraFieldsToUpdate);
    }
    _addOrRemoveFields(describe) {
        let fieldDescribes = [...describe.fieldsMap.values()];
        if (this.multiselectPattern) {
            let pattern = this.multiselectPattern;
            fieldDescribes.forEach(fieldDescribe => {
                if ((common_1.Common.isDescriptionPropertyMatching(pattern.all != "undefined", pattern.all == true)
                    || !Object.keys(pattern).some(prop => common_1.Common.isDescriptionPropertyMatching(fieldDescribe[prop], pattern[prop], true)))) {
                    if (!(fieldDescribe.lookup &&
                        (statics_1.CONSTANTS.OBJECTS_NOT_TO_USE_IN_QUERY_MULTISELECT.indexOf(fieldDescribe.referencedObjectType) >= 0
                            || statics_1.CONSTANTS.FIELDS_NOT_TO_USE_IN_QUERY_MULTISELECT['*'].indexOf(fieldDescribe.name) >= 0
                            || statics_1.CONSTANTS.FIELDS_NOT_TO_USE_IN_QUERY_MULTISELECT[this.name]
                                && statics_1.CONSTANTS.FIELDS_NOT_TO_USE_IN_QUERY_MULTISELECT[this.name].indexOf(fieldDescribe.name) >= 0)
                        || !fieldDescribe.isSimple)) {
                        this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldDescribe.name));
                        this.excludedFieldsFromUpdate = this.excludedFieldsFromUpdate.filter(fieldName => fieldName != fieldDescribe.name);
                    }
                }
            });
        }
        let fieldsInOriginalQuery = [].concat(this.fieldsInQuery);
        this.parsedQuery.fields = [];
        fieldsInOriginalQuery.forEach(fieldName => {
            let fields = statics_1.CONSTANTS.COMPOUND_FIELDS.get(fieldName);
            if (fields) {
                fields.forEach(f => {
                    this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(f));
                });
            }
            else {
                this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
            }
        });
        this.parsedQuery.fields = this.parsedQuery.fields.filter((fieldType) => {
            let field = fieldType;
            return this.excludedFields.indexOf(field.field) < 0;
        });
        this.getMandatoryQueryFields().forEach((fieldName) => {
            if (this.fieldsInQuery.indexOf(fieldName) < 0) {
                this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
            }
        });
        if (this.originalExternalIdIsEmpty
            && !describe.fieldsMap.get(this.externalId)) {
            this.parsedQuery.fields = this.parsedQuery.fields.filter((fieldType) => {
                let field = fieldType;
                return field.field != this.externalId;
            });
            this.externalId = this.defaultExternalId;
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(this.externalId));
        }
        let describedFields = [...describe.fieldsMap.keys()].map(field => field.toLowerCase());
        this.parsedQuery.fields = this.parsedQuery.fields.filter((f) => {
            let field = f;
            let isComplexField = common_1.Common.isComplexField(field.field) || field.field.indexOf('.') >= 0;
            return isComplexField || !isComplexField && describedFields.indexOf(field.field.toLowerCase()) >= 0;
        });
        this.parsedQuery.fields = this.parsedQuery.fields.filter((fieldType) => {
            let field = fieldType;
            let fieldDescribe = fieldDescribes.find(describe => describe.name.toLowerCase() == field.field.toLowerCase() && describe.lookup);
            return !fieldDescribe || !this.script.excludedObjects.some(object => object == fieldDescribe.referencedObjectType);
        });
        this.parsedQuery.fields = common_1.Common.distinctArray(this.parsedQuery.fields, "field");
        this.query = (0, soql_parser_js_1.composeQuery)(this.parsedQuery);
    }
    _fixObjectName() {
        if (this.script.sourceOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && this.script.sourceOrg.isDescribed) {
            this.parsedQuery.sObject = common_1.Common.searchClosest(this.parsedQuery.sObject, this.script.sourceOrg.objectNamesList, true) || this.parsedQuery.sObject;
        }
        else if (this.script.targetOrg.media == enumerations_1.DATA_MEDIA_TYPE.Org && this.script.targetOrg.isDescribed) {
            this.parsedQuery.sObject = common_1.Common.searchClosest(this.parsedQuery.sObject, this.script.targetOrg.objectNamesList, true) || this.parsedQuery.sObject;
        }
    }
    _fixFieldNames(describe) {
        let fieldsInOriginalQuery = [].concat(this.fieldsInQuery);
        let availableFields = [...describe.fieldsMap.keys()];
        this.parsedQuery.fields = new Array();
        fieldsInOriginalQuery.forEach(fieldName => {
            if (!common_1.Common.isComplexOr__rField(fieldName)) {
                fieldName = common_1.Common.searchClosest(fieldName, availableFields, true) || fieldName;
            }
            this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
        });
        this.query = (0, soql_parser_js_1.composeQuery)(this.parsedQuery);
    }
    _updateSObjectDescribe(describe) {
        [...describe.fieldsMap.values()].forEach(field => {
            field.scriptObject = this;
            if (field.lookup && this.referenceFieldToObjectMap.has(field.name)) {
                field.referencedObjectType = this.referenceFieldToObjectMap.get(field.name);
                field.isPolymorphicField = true;
                field.polymorphicReferenceObjectType = field.referencedObjectType;
            }
        });
        if (this.hasComplexExternalId) {
            if (!describe.fieldsMap.has(this.complexExternalId)) {
                let complexExtIdDescribe = new sfieldDescribe_1.default().complex(this.externalId);
                describe.fieldsMap.set(this.complexExternalId, complexExtIdDescribe);
                describe.fieldsMap.set(this.externalId, complexExtIdDescribe);
            }
        }
    }
    async _fixPolymorphicFields() {
        let self = this;
        let apiSf = new sfdx_1.Sfdx(this.script.sFOrg);
        let polymorphicFields = await apiSf.getPolymorphicObjectFields(this.name);
        let nonPolymorphicFieldsButDeclared = new Array();
        let missingDeclarations = ___getIncorrectPolymorphicFields(this.targetSObjectDescribe, nonPolymorphicFieldsButDeclared);
        missingDeclarations = ___getIncorrectPolymorphicFields(this.sourceSObjectDescribe, nonPolymorphicFieldsButDeclared);
        nonPolymorphicFieldsButDeclared.forEach(fieldName => {
            this.script.logger.infoNormal(logger_1.RESOURCES.fieldIsNotOfPolymorphicType, this.name, fieldName);
        });
        if (missingDeclarations.length > 0) {
            let fieldsInOriginalQuery = [].concat(this.fieldsInQuery);
            this.parsedQuery.fields = new Array();
            fieldsInOriginalQuery.forEach(fieldName => {
                if (common_1.Common.isComplexOr__rField(fieldName)) {
                    this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
                }
                else {
                    fieldName = fieldName.split(statics_1.CONSTANTS.REFERENCE_FIELD_OBJECT_SEPARATOR)[0];
                    if (missingDeclarations.indexOf(fieldName) < 0) {
                        this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
                    }
                    else {
                        this.parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
                        this.script.logger.infoNormal(logger_1.RESOURCES.fieldMissingPolymorphicDeclaration, this.name, fieldName, fieldName);
                    }
                }
            });
            this.query = (0, soql_parser_js_1.composeQuery)(this.parsedQuery);
        }
        function ___getIncorrectPolymorphicFields(describe, incorrectDeclarations) {
            let incorrectFields = new Array();
            [...describe.fieldsMap.values()].forEach(field => {
                if (statics_1.CONSTANTS.FIELDS_NOT_CHECK_FOR_POLYMORPHIC_ISSUES.indexOf(field.name) < 0) {
                    field.isPolymorphicFieldDefinition = polymorphicFields.indexOf(field.name) >= 0;
                    if (field.isPolymorphicField && !field.isPolymorphicFieldDefinition) {
                        field.isPolymorphicField = false;
                        field.polymorphicReferenceObjectType = '';
                        field.referencedObjectType = field.originalReferencedObjectType;
                        self.referenceFieldToObjectMap.delete(field.name);
                        if (incorrectDeclarations.indexOf(field.name) < 0) {
                            incorrectDeclarations.push(field.name);
                        }
                    }
                    else if (!field.isPolymorphicField && field.isPolymorphicFieldDefinition) {
                        incorrectFields.push(field.name);
                    }
                }
            });
            return common_1.Common.distinctStringArray(incorrectFields);
        }
    }
    _validateFields(describe, isSource) {
        if (this.fieldsInQuery.length == 0) {
            throw new errors_1.CommandInitializationError(this.script.logger.getResourceString(logger_1.RESOURCES.missingFieldsToProcess, this.name));
        }
        if (!this.isExtraObject && !this.isSpecialObject) {
            let fieldsInQuery = [].concat(this.fieldsInQuery);
            fieldsInQuery.forEach(sourceFieldName => {
                let targetFieldName = !isSource && this.sourceTargetFieldMapping.fieldMapping.get(sourceFieldName) || sourceFieldName;
                if (!common_1.Common.isComplexOr__rField(sourceFieldName) && !describe.fieldsMap.has(targetFieldName)) {
                    if (sourceFieldName == this.externalId) {
                        throw new errors_1.OrgMetadataError(this.script.logger.getResourceString(logger_1.RESOURCES.noExternalKey, this.name, this.strOperation));
                    }
                    if (isSource)
                        this.script.logger.warn(logger_1.RESOURCES.missingFieldInSource, this.name, sourceFieldName);
                    else
                        this.script.logger.warn(logger_1.RESOURCES.missingFieldInTarget, this.name, sourceFieldName);
                    common_1.Common.removeBy(this.parsedQuery.fields, "field", sourceFieldName);
                }
            });
            this.query = (0, soql_parser_js_1.composeQuery)(this.parsedQuery);
        }
    }
    _parseQuery(query) {
        let self = this;
        let parsedQuery = (0, soql_parser_js_1.parseQuery)(query);
        let fields = [].concat(parsedQuery.fields);
        parsedQuery.fields = [(0, soql_parser_js_1.getComposedField)("Id")];
        fields.forEach(field => {
            let fieldName = (field.field).toLowerCase();
            let parts = fieldName.split('_');
            let multiselectAllPatternFieldName = parts.length == 2 ? (parts[0] + '_*') : null;
            if (fieldName == "all") {
                ___set("all_true");
            }
            else if (statics_1.CONSTANTS.MULTISELECT_SOQL_KEYWORDS.indexOf(fieldName) >= 0) {
                ___set(fieldName);
            }
            else if (statics_1.CONSTANTS.MULTISELECT_SOQL_KEYWORDS.indexOf(multiselectAllPatternFieldName) >= 0) {
                ___set(fieldName);
            }
            else if (fieldName != "id") {
                fieldName = field["rawValue"] || field.field;
                let parts = fieldName.split(statics_1.CONSTANTS.REFERENCE_FIELD_OBJECT_SEPARATOR);
                if (parts.length > 1 && !fieldName.includes(".")) {
                    self.referenceFieldToObjectMap.set(parts[0], parts[1]);
                    fieldName = parts[0];
                }
                parsedQuery.fields.push((0, soql_parser_js_1.getComposedField)(fieldName));
            }
        });
        this.query = (0, soql_parser_js_1.composeQuery)(parsedQuery);
        return parsedQuery;
        function ___set(fieldName) {
            self.multiselectPattern = self.multiselectPattern || {};
            let parts = fieldName.split('_');
            if (parts[1] == "true"
                || parts[1] == "false") {
                self.multiselectPattern[parts[0]] = parts[1] == "true";
            }
            else {
                self.multiselectPattern[parts[0]] = parts[1];
            }
        }
    }
}
exports.default = ScriptObject;
__decorate([
    (0, class_transformer_1.Type)(() => __1.ScriptMockField),
    __metadata("design:type", Array)
], ScriptObject.prototype, "mockFields", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => __1.ScriptMappingItem),
    __metadata("design:type", Array)
], ScriptObject.prototype, "fieldMapping", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], ScriptObject.prototype, "beforeAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], ScriptObject.prototype, "afterAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], ScriptObject.prototype, "beforeUpdateAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], ScriptObject.prototype, "afterUpdateAddons", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => scriptAddonManifestDefinition_1.default),
    __metadata("design:type", Array)
], ScriptObject.prototype, "filterRecordsAddons", void 0);
//# sourceMappingURL=scriptObject.js.map