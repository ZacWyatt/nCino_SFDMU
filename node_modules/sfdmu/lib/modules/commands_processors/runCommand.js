"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunCommand = void 0;
const fs = require("fs");
const models = require("../models");
const path = require("path");
const errors_1 = require("../models/common_models/errors");
const common_1 = require("../components/common_components/common");
const statics_1 = require("../components/common_components/statics");
const class_transformer_1 = require("class-transformer");
require("reflect-metadata");
require("es6-shim");
const logger_1 = require("../components/common_components/logger");
const models_1 = require("../models");
class RunCommand {
    constructor(pinfo, logger, basePath, sourceUsername, targetUsername, apiVersion, canModify, simulation, exportJson, useSf, logfullquery) {
        this.logfullquery = logfullquery;
        this.useSf = useSf;
        this.pinfo = pinfo;
        this.logger = logger;
        this.basePath = (path.isAbsolute(basePath) ? basePath : path.join(process.cwd(), basePath.toString())).replace(/([^"]+)(.*)/, "$1");
        this.targetUsername = targetUsername;
        this.sourceUsername = sourceUsername;
        this.apiVersion = apiVersion;
        this.canModify = canModify;
        this.exportJson = exportJson;
        this.simulation = simulation;
    }
    async loadAsync() {
        let json = this.exportJson;
        this.filePath = "[JSON TEXT]";
        if (!fs.existsSync(this.basePath)) {
            throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.workingPathDoesNotExist));
        }
        if (!json) {
            this.filePath = path.join(this.basePath, statics_1.CONSTANTS.SCRIPT_FILE_NAME);
            if (!fs.existsSync(this.filePath)) {
                throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.packageFileDoesNotExist));
            }
            this.logger.infoVerbose(logger_1.RESOURCES.newLine);
            this.logger.headerMinimal(logger_1.RESOURCES.loadingExportJson);
            try {
                json = fs.readFileSync(this.filePath, 'utf8');
            }
            catch (ex) {
                throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.exportJsonFileLoadError, ex.message));
            }
        }
        try {
            let jsonObject = JSON.parse(json);
            jsonObject.objects = jsonObject.objects || [];
            jsonObject.objectSets = jsonObject.objectSets || [];
            if (jsonObject.objects.length) {
                jsonObject.objectSets.unshift(new models_1.ScriptObjectSet(jsonObject.objects));
            }
            this.workingJson = JSON.stringify(jsonObject);
            jsonObject.objects = [];
            this.script = (0, class_transformer_1.plainToClass)(models.Script, jsonObject);
            this._setupGlobalScriptParameters();
        }
        catch (ex) {
            throw new errors_1.CommandInitializationError(this.logger.getResourceString(logger_1.RESOURCES.incorrectExportJsonFormat, ex.message));
        }
        return this.script.objectSets.length;
    }
    async setupObjectSetAsync(objectSetIndex) {
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this.logger.headerMinimal(logger_1.RESOURCES.objectSetStarted, (objectSetIndex + 1).toString());
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this._initScript(objectSetIndex);
        await this.script.setupAsync(this.pinfo, this.logger, this.sourceUsername, this.targetUsername, this.basePath, this.apiVersion, this.canModify, this.simulation, this.useSf, this.logfullquery);
        if (objectSetIndex == 0) {
            this.logger.objectMinimal({
                [this.logger.getResourceString(logger_1.RESOURCES.source)]: this.logger.getResourceString(logger_1.RESOURCES.sourceOrg, this.script.sourceOrg.name),
                [this.logger.getResourceString(logger_1.RESOURCES.target)]: this.logger.getResourceString(logger_1.RESOURCES.targetOrg, this.script.targetOrg.name),
                [this.logger.getResourceString(logger_1.RESOURCES.packageScript)]: this.logger.getResourceString(logger_1.RESOURCES.scriptFile, this.filePath)
            });
        }
        this.script.loadFieldMappingConfiguration();
        await this.script.loadFieldMappingConfigurationFileAsync();
        await this.script.processObjectsMetadataAsync();
        this.script.verifyOrgs();
    }
    async createJobAsync() {
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this.logger.headerMinimal(logger_1.RESOURCES.dataMigrationProcessStarted);
        this.logger.infoNormal(logger_1.RESOURCES.buildingMigrationStaregy);
        this.job = new models_1.MigrationJob({
            script: this.script
        });
        this.job.setup();
    }
    async processCSVFilesAsync() {
        await this.job.processCSVFilesAsync();
    }
    async prepareJobAsync() {
        this.logger.infoNormal(logger_1.RESOURCES.preparingJob);
        this.job.prepareJob();
        await this.job.getTotalRecordsCountAsync();
    }
    async executeJobAsync() {
        this.logger.infoNormal(logger_1.RESOURCES.executingJob);
        await this.job.deleteOldRecordsAsync();
        await this.job.retrieveRecordsAsync();
        await this.job.updateRecordsAsync();
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
    }
    async runAddonEventAsync(event) {
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
        this.logger.headerNormal(logger_1.RESOURCES.processingAddon);
        let processed = await this.script.addonManager.triggerAddonModuleMethodAsync(event);
        if (!processed) {
            this.logger.infoNormal(logger_1.RESOURCES.nothingToProcess);
        }
        this.logger.infoVerbose(logger_1.RESOURCES.newLine);
    }
    _initScript(objectSetIndex) {
        this.script = (0, class_transformer_1.plainToClass)(models.Script, JSON.parse(this.workingJson));
        this.job = undefined;
        this.script.objects = this.script.objectSets[objectSetIndex].objects || this.script.objects;
        this.script.objectSetIndex = objectSetIndex;
    }
    _setupGlobalScriptParameters() {
        common_1.Common.csvReadFileDelimiter = this.script.csvReadFileDelimiter;
        common_1.Common.csvWriteFileDelimiter = this.script.csvWriteFileDelimiter;
    }
}
exports.RunCommand = RunCommand;
//# sourceMappingURL=runCommand.js.map