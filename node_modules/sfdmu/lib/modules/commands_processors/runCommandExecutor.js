"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../components/common_components/common");
const enumerations_1 = require("../components/common_components/enumerations");
const logger_1 = require("../components/common_components/logger");
const models_1 = require("../models");
const runCommand_1 = require("./runCommand");
class RunCommandExecutor {
    static async execute(runProcess) {
        runProcess.m_flags.verbose = runProcess.m_flags.verbose && !runProcess.m_flags.json;
        runProcess.m_flags.quiet = runProcess.m_flags.quiet || runProcess.m_flags.silent || runProcess.m_flags.version;
        runProcess.m_flags.filelog = !!runProcess.m_flags.filelog && !runProcess.m_flags.version;
        runProcess.m_flags.commandoutput = runProcess.m_flags.version;
        runProcess.cmd = {
            statics: runProcess["statics"],
            argv: runProcess.argv
        };
        common_1.Common.logger = new logger_1.Logger(runProcess.resources, runProcess.commandMessages, runProcess.m_ux, runProcess.cmd, runProcess.m_flags.loglevel, runProcess.m_flags.path, runProcess.m_flags.verbose, runProcess.m_flags.concise, runProcess.m_flags.quiet, runProcess.m_flags.json, runProcess.m_flags.noprompt, runProcess.m_flags.nowarnings, runProcess.m_flags.filelog, runProcess.m_flags.commandoutput);
        try {
            let pinfo = common_1.Common.getPluginInfo(runProcess.cmd);
            if (runProcess.m_flags.version) {
                common_1.Common.logger.log(logger_1.RESOURCES.pluginVersion, logger_1.LOG_MESSAGE_TYPE.STDOUT_ONLY, logger_1.LOG_MESSAGE_VERBOSITY.ALWAYS, pinfo.pluginName, pinfo.version);
                common_1.Common.logger.commandFinishMessage("", logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
                runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
            }
            if (!runProcess.m_flags.sourceusername && !runProcess.m_flags.targetusername) {
                throw new models_1.CommandInitializationError(runProcess.commandMessages.getMessage('errorMissingRequiredFlag', ['--sourceusername, --targetusername']));
            }
            if (!runProcess.m_flags.sourceusername) {
                runProcess.m_flags.sourceusername = runProcess.m_flags.targetusername;
            }
            if (!runProcess.m_flags.targetusername) {
                runProcess.m_flags.targetusername = runProcess.m_flags.sourceusername;
            }
            let commandResult;
            runProcess.command = new runCommand_1.RunCommand(pinfo, common_1.Common.logger, runProcess.m_flags.path, runProcess.m_flags.sourceusername, runProcess.m_flags.targetusername, runProcess.m_flags.apiversion, runProcess.m_flags.canmodify, runProcess.m_flags.simulation, runProcess.exportJson, runProcess.m_flags.usesf == "true", runProcess.m_flags.logfullquery);
            const objectSetsAmount = await runProcess.command.loadAsync();
            for (let objectSetIndex = 0; objectSetIndex < objectSetsAmount; objectSetIndex++) {
                await runProcess.command.setupObjectSetAsync(objectSetIndex);
                await runProcess.command.createJobAsync();
                await runProcess.command.processCSVFilesAsync();
                await runProcess.command.prepareJobAsync();
                await runProcess.command.runAddonEventAsync(enumerations_1.ADDON_EVENTS.onBefore);
                await runProcess.command.executeJobAsync();
                await runProcess.command.runAddonEventAsync(enumerations_1.ADDON_EVENTS.onAfter);
            }
            common_1.Common.logger.commandFinishMessage(commandResult || logger_1.RESOURCES.commandSucceededResult, logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
            runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
        }
        catch (e) {
            switch (e.constructor) {
                case models_1.SuccessExit:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandSucceededResult, logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.SUCCESS);
                case models_1.CommandInitializationError:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandInitializationErrorResult, logger_1.COMMAND_EXIT_STATUSES.COMMAND_INITIALIZATION_ERROR, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.COMMAND_INITIALIZATION_ERROR);
                case models_1.OrgMetadataError:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandOrgMetadataErrorResult, logger_1.COMMAND_EXIT_STATUSES.ORG_METADATA_ERROR, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.ORG_METADATA_ERROR);
                case models_1.CommandExecutionError:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandExecutionErrorResult, logger_1.COMMAND_EXIT_STATUSES.COMMAND_EXECUTION_ERROR, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.COMMAND_EXECUTION_ERROR);
                case models_1.UnresolvableWarning:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandAbortedDueWarningErrorResult, logger_1.COMMAND_EXIT_STATUSES.UNRESOLWABLE_WARNING, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.UNRESOLWABLE_WARNING);
                case models_1.CommandAbortedByUserError:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandAbortedByUserErrorResult, logger_1.COMMAND_EXIT_STATUSES.COMMAND_ABORTED_BY_USER, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.COMMAND_ABORTED_BY_USER);
                case models_1.CommandAbortedByAddOnError:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandAbortedByAddOnErrorResult, logger_1.COMMAND_EXIT_STATUSES.COMMAND_ABORTED_BY_ADDON, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.COMMAND_ABORTED_BY_ADDON);
                default:
                    common_1.Common.logger.commandFinishMessage(logger_1.RESOURCES.commandAbortedDueUnexpectedErrorResult, logger_1.COMMAND_EXIT_STATUSES.COMMAND_UNEXPECTED_ERROR, e.stack, e.message);
                    runProcess.exitProcess && process.exit(logger_1.COMMAND_EXIT_STATUSES.COMMAND_UNEXPECTED_ERROR);
            }
        }
        return {};
    }
}
exports.default = RunCommandExecutor;
//# sourceMappingURL=runCommandExecutor.js.map