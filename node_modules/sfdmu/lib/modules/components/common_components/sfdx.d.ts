import { IAppLogger, IAppScriptOrg, IAppSfdxService } from '../../app/appModels';
import { ObjectFieldMapping, SFieldDescribe, SObjectDescribe } from '../../models';
import { IBlobField } from '../../models/api_models';
import { IFieldMapping, IFieldMappingResult, IIdentityInfo, IOrgConnectionData } from '../../models/common_models/helper_interfaces';
export declare class Sfdx implements IAppSfdxService, IFieldMapping {
    org: IAppScriptOrg;
    get logger(): IAppLogger;
    constructor(org: IAppScriptOrg, targetFieldMapping?: IFieldMapping);
    sourceQueryToTarget: (query: string, sourceObjectName: string) => IFieldMappingResult;
    sourceRecordsToTarget: (records: any[], sourceObjectName: string) => IFieldMappingResult;
    targetRecordsToSource: (records: any[], sourceObjectName: string) => IFieldMappingResult;
    transformQuery: (query: string, sourceObjectName: string) => IFieldMappingResult;
    queryOrgAsync(soql: string, useBulkQueryApi: boolean, useQueryAll?: boolean, bulkQueryPollTimeout?: number): Promise<Array<any>>;
    queryOrgOrCsvAsync(soql: string, useBulkQueryApi?: boolean, csvFullFilename?: string, sFieldsDescribeMap?: Map<string, SFieldDescribe>, useQueryAll?: boolean, bulkQueryPollTimeout?: number): Promise<Array<any>>;
    describeOrgAsync(): Promise<Array<SObjectDescribe>>;
    getPolymorphicObjectFields(sObjectName: string): Promise<string[]>;
    identityAsync(): Promise<IIdentityInfo>;
    describeSObjectAsync(objectName: string, objectFieldMapping?: ObjectFieldMapping): Promise<SObjectDescribe>;
    static createOrgConnection(connectionData: IOrgConnectionData): any;
    downloadBlobFieldDataAsync(recordIds: Array<string>, blobField: IBlobField): Promise<Map<string, string>>;
}
