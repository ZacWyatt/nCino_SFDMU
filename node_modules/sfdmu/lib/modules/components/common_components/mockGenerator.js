"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockGenerator = void 0;
const statics_1 = require("./statics");
class MockGenerator {
    static resetCounter() {
        this.counter = {
            counter: {}
        };
    }
    static createCustomGenerators(casual) {
        let self = this;
        casual.define('c_seq_number', function (field, prefix, from, step) {
            if (!self.counter.counter[field]) {
                self.counter.counter[field] = +from || 1;
            }
            else {
                self.counter.counter[field] = (+self.counter.counter[field]) + step;
            }
            return prefix + self.counter.counter[field];
        });
        casual.define('c_set_value', function (field, value = null, originalValue = null) {
            if (typeof value == 'string') {
                return value.replace(statics_1.CONSTANTS.MOCK_EXPRESSION_ORIGINAL_VALUE, originalValue);
            }
            return value;
        });
        casual.define('c_seq_date', function (field, from, step) {
            step = step || "d";
            if (!self.counter.counter[field]) {
                if (!(from instanceof Date)) {
                    from = new Date(Date.parse(from));
                }
                self.counter.counter[field] = (from instanceof Date ? from : new Date());
            }
            else {
                switch (step) {
                    case "d":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setDate(self.counter.counter[field].getDate() + 1));
                        break;
                    case "-d":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setDate(self.counter.counter[field].getDate() - 1));
                        break;
                    case "m":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setMonth(self.counter.counter[field].getMonth() + 1));
                        break;
                    case "-m":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setMonth(self.counter.counter[field].getMonth() - 1));
                        break;
                    case "y":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setFullYear(self.counter.counter[field].getFullYear() + 1));
                        break;
                    case "-y":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setFullYear(self.counter.counter[field].getFullYear() - 1));
                        break;
                    case "s":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setSeconds(self.counter.counter[field].getSeconds() + 1));
                        break;
                    case "-s":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setSeconds(self.counter.counter[field].getSeconds() - 1));
                        break;
                    case "ms":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setMilliseconds(self.counter.counter[field].getMilliseconds() + 1));
                        break;
                    case "-ms":
                        self.counter.counter[field] = new Date(self.counter.counter[field].setMilliseconds(self.counter.counter[field].getMilliseconds() - 1));
                        break;
                    default:
                        break;
                }
            }
            return new Date(self.counter.counter[field].getTime());
        });
    }
}
exports.MockGenerator = MockGenerator;
//# sourceMappingURL=mockGenerator.js.map