import { IAppLogger } from '../../app/appModels';
import { ITableMessage } from '../../models/common_models/helper_interfaces';
import ISfdmuCommand from '../../models/common_models/ISfdxCommand';
export declare enum RESOURCES {
    newLine = "",
    separator = "===========",
    source = "Source",
    target = "Target",
    step1 = "step1",
    step2 = "step2",
    pass1 = "pass1",
    pass2 = "pass2",
    pass3 = "pass3",
    pass4 = "pass4",
    objectSetStarted = "objectSetStarted",
    csvFile = "csvFile",
    org = "org",
    sourceOrg = "sourceOrg",
    targetOrg = "targetOrg",
    scriptFile = "scriptFile",
    noRecords = "noRecords",
    insert = "insert",
    update = "update",
    personContact = "personContact",
    customAddon = "customAddon",
    cantLoad = "cantLoad",
    global = "global",
    cantLoadModule = "cantLoadModule",
    actionNotPermitted = "actionNotPermitted",
    defaultPromptOptions = "defaultPromptOptions",
    defaultNopromptOption = "defaultNopromptOption",
    defaultPromptNoOption = "defaultPromptNoOption",
    userConfirmTemplate = "userConfirmTemplate",
    userTextInputTemplate = "userTextInputTemplate",
    formattedDateLogTemplate = "formattedDateLogTemplate",
    infoLogTemplate = "infoLogTemplate",
    warnLogTemplate = "warnLogTemplate",
    errorLogTemplate = "errorLogTemplate",
    traceLogTemplate = "traceLogTemplate",
    timeElapsedLogTemplate = "timeElapsedLogTemplate",
    commandStartTemplate = "commandStartTemplate",
    commandFinishTemplate = "commandFinishTemplate",
    infoFileLogTemplate = "infoFileLogTemplate",
    warnFileLogTemplate = "warnFileLogTemplate",
    errorFileLogTemplate = "errorFileLogTemplate",
    commandSucceededResult = "commandSucceededResult",
    commandInitializationErrorResult = "commandInitializationErrorResult",
    commandOrgMetadataErrorResult = "commandOrgMetadataErrorResult",
    commandExecutionErrorResult = "commandExecutionErrorResult",
    commandAbortedDueWarningErrorResult = "commandAbortedDueWarningErrorResult",
    commandAbortedByUserErrorResult = "commandAbortedByUserErrorResult",
    commandAbortedByAddOnErrorResult = "commandAbortedByAddOnErrorResult",
    commandAbortedDueUnexpectedErrorResult = "commandAbortedDueUnexpectedErrorResult",
    commandInProgress = "commandInProgress",
    packageScript = "packageScript",
    pluginVersion = "pluginVersion",
    runningVersion = "runningVersion",
    runningAddOnApiVersion = "runningAddOnApiVersion",
    workingPathDoesNotExist = "workingPathDoesNotExist",
    packageFileDoesNotExist = "packageFileDoesNotExist",
    loadingExportJson = "loadingExportJson",
    objectIsExcluded = "objectIsExcluded",
    noObjectsToProcess = "noObjectsToProcess",
    invalidOperation = "invalidOperation",
    noFieldsToUpdate = "noFieldsToUpdate",
    incorrectExportJsonFormat = "incorrectExportJsonFormat",
    exportJsonFileLoadError = "exportJsonFileLoadError",
    runningInSimulationMode = "runningInSimulationMode",
    connectingToOrg = "connectingToOrg",
    connectingToOrgSf = "connectingToOrgSf",
    successfullyConnected = "successfullyConnected",
    connectingFailed = "connectingFailed",
    cannotMigrateFile2File = "cannotMigrateFile2File",
    accessTokenExpired = "accessTokenExpired",
    malformedQuery = "malformedQuery",
    malformedDeleteQuery = "malformedDeleteQuery",
    personAccountSupportWarning = "personAccountSupportWarning",
    retrievingOrgMatadata = "retrievingOrgMatadata",
    retrievingObjectMetadata = "retrievingObjectMetadata",
    noExternalKey = "noExternalKey",
    missingObjectInSource = "missingObjectInSource",
    missingObjectInTarget = "missingObjectInTarget",
    processingObject = "processingObject",
    missingFieldInSource = "missingFieldInSource",
    missingFieldInTarget = "missingFieldInTarget",
    missingFieldsToProcess = "missingFieldsToProcess",
    addedMissingParentLookupObject = "addedMissingParentLookupObject",
    failedToResolveExternalId = "failedToResolveExternalId",
    fieldIsNotOfPolymorphicType = "fieldIsNotOfPolymorphicType",
    fieldMissingPolymorphicDeclaration = "fieldMissingPolymorphicDeclaration",
    theExternalIdNotFoundInTheQuery = "theExternalIdNotFoundInTheQuery",
    loadingCoreAddonManifestFile = "loadingCoreAddonManifestFile",
    loadingAddonModule = "loadingAddonModule",
    dataMigrationProcessStarted = "dataMigrationProcessStarted",
    buildingMigrationStaregy = "buildingMigrationStaregy",
    readingCsvFileError = "readingCsvFileError",
    writingCsvFileError = "writingCsvFileError",
    readingValuesMappingFile = "readingValuesMappingFile",
    readingFieldsMappingFile = "readingFieldsMappingFile",
    mappingCsvValues = "mappingCsvValues",
    mappingValues = "mappingValues",
    processingCsvFiles = "processingCsvFiles",
    processingCsvFilesSkipped = "processingCsvFilesSkipped",
    writingCsvFile = "writingCsvFile",
    correctCsvFiles = "correctCsvFiles",
    incorrectCsvFiles = "incorrectCsvFiles",
    continueTheJob = "continueTheJob",
    missingCsvFile = "missingCsvFile",
    missingColumnsInCsvFile = "missingColumnsInCsvFile",
    missingParentLookupRecords = "missingParentLookupRecords",
    cantUpdateChildLookupCSVColumn = "cantUpdateChildLookupCSVColumn",
    csvFilesWereUpdated = "csvFilesWereUpdated",
    validationCsvFileCompleted = "validationCsvFileCompleted",
    unableToDeleteTargetDirectory = "unableToDeleteTargetDirectory",
    unableToDeleteCacheDirectory = "unableToDeleteCacheDirectory",
    unableToDeleteSourceDirectory = "unableToDeleteSourceDirectory",
    canModifyPrompt = "canModifyPrompt",
    preparingJob = "preparingJob",
    executingJob = "executingJob",
    executionOrder = "executionOrder",
    queryingOrder = "queryingOrder",
    deletingOrder = "deletingOrder",
    unprocessedRecord = "unprocessedRecord",
    invalidRecordHashcode = "invalidRecordHashcode",
    apiOperationFailed = "apiOperationFailed",
    apiOperationFailedWithMessage = "apiOperationFailedWithMessage",
    apiOperationJobCreated = "apiOperationJobCreated",
    apiOperationBatchCreated = "apiOperationBatchCreated",
    apiOperationDataUploaded = "apiOperationDataUploaded",
    apiOperationInProgress = "apiOperationInProgress",
    apiOperationCompleted = "apiOperationCompleted",
    apiOperationWarnCompleted = "apiOperationWarnCompleted",
    apiOperationStarted = "apiOperationStarted",
    apiOperationFinished = "apiOperationFinished",
    invalidApiOperation = "invalidApiOperation",
    unexpectedApiError = "unexpectedApiError",
    simulationMode = "simulationMode",
    analysingData = "analysingData",
    totalRecordsAmountByQueryString = "totalRecordsAmountByQueryString",
    deletingTargetData = "deletingTargetData",
    deletingSourceData = "deletingSourceData",
    deletingTargetSObjectRecords = "deletingTargetSObjectRecords",
    deletingSourceSObjectRecords = "deletingSourceSObjectRecords",
    amountOfRecordsToDelete = "amountOfRecordsToDelete",
    deletingRecordsCompleted = "deletingRecordsCompleted",
    nothingToDelete = "nothingToDelete",
    nothingToDelete2 = "nothingToDelete2",
    deletingDataCompleted = "deletingDataCompleted",
    deletingDataSkipped = "deletingDataSkipped",
    mappingQuery = "mappingQuery",
    mappingSourceRecords = "mappingSourceRecords",
    mappingTargetRecords = "mappingTargetRecords",
    retrievingData = "retrievingData",
    retrievingDataCompleted = "retrievingDataCompleted",
    usingRestApi = "usingRestApi",
    usingBulkAPIQuery = "usingBulkAPIQuery",
    queryingAll = "queryingAll",
    queryingIn = "queryingIn",
    queryingIn2 = "queryingIn2",
    retrievingBinaryData = "retrievingBinaryData",
    queryingSelfReferenceRecords = "queryingSelfReferenceRecords",
    queryingFinished = "queryingFinished",
    amuntOfRetrievedRecords = "amuntOfRetrievedRecords",
    queryString = "queryString",
    fetchingSummary = "fetchingSummary",
    apiCallProgress = "apiCallProgress",
    updatingTarget = "updatingTarget",
    deletingTarget = "deletingTarget",
    updatePersonAccountsAndContacts = "updatePersonAccountsAndContacts",
    amountOfRecordsTo = "amountOfRecordsTo",
    updatingTargetObjectCompleted = "updatingTargetObjectCompleted",
    updatingTargetCompleted = "updatingTargetCompleted",
    writingToFile = "writingToFile",
    nothingUpdated = "nothingUpdated",
    skippedUpdatesWarning = "skippedUpdatesWarning",
    skippedSourceRecordsFilterWarning = "skippedSourceRecordsFilterWarning",
    skippedTargetRecordsFilterWarning = "skippedTargetRecordsFilterWarning",
    missingParentLookupsPrompt = "missingParentLookupsPrompt",
    updatingSummary = "updatingSummary",
    updatingTotallyUpdated = "updatingTotallyUpdated",
    processingAddon = "processingAddon",
    runAddonMethod = "runAddonMethod",
    nothingToProcess = "nothingToProcess",
    startAddonExecution = "startAddonExecution",
    stopAddonExecution = "stopAddonExecution",
    coreAddonMessageTemplate = "coreAddonMessageTemplate",
    runAddonMethodCompleted = "runAddonMethodCompleted",
    comandAbortedByAddonResult = "comandAbortedByAddonResult",
    writingToCacheFile = "writingToCacheFile",
    readingFromCacheFile = "readingFromCacheFile"
}
export declare enum LOG_MESSAGE_TYPE {
    STRING = 30,
    SUCCESS = 31,
    FAILURE = 32,
    STDOUT_ONLY = 33,
    TABLE = 34,
    JSON = 35,
    OBJECT = 36,
    HEADER = 37,
    WARN = 40,
    ERROR = 50
}
export declare enum LOG_MESSAGE_VERBOSITY {
    ALWAYS = -1,
    NONE = 0,
    MINIMAL = 1,
    NORMAL = 2,
    VERBOSE = 3
}
export declare enum LOG_LEVEL {
    TRACE = 10,
    DEBUG = 20,
    INFO = 30,
    WARN = 40,
    ERROR = 50,
    FATAL = 60
}
export interface IUxLogger {
    log: Function;
    styledJSON: Function;
    warn: Function;
    error: Function;
    styledObject: Function;
    table: Function;
    prompt: Function;
    styledHeader: Function;
    startSpinner: Function;
    stopSpinner: Function;
    setSpinnerStatus: Function;
}
export declare type Tokens = Array<string | boolean | number | null | undefined>;
export interface IMessages {
    getMessage(key: string, tokens?: Tokens): string;
}
export interface IResourceBundle {
    getMessage(key: string, tokens?: any): string;
}
export interface IFinishMessage {
    command: string;
    cliCommandString: string;
    message: string;
    fullLog: string[];
    stack: string[];
    status: number;
    statusString: string;
    startTime: Date;
    startTimeUTC: Date;
    endTime: Date;
    endTimeUTC: Date;
    timeElapsedString: string;
}
export declare enum COMMAND_EXIT_STATUSES {
    SUCCESS = 0,
    COMMAND_UNEXPECTED_ERROR = 1,
    COMMAND_INITIALIZATION_ERROR = 2,
    ORG_METADATA_ERROR = 3,
    COMMAND_EXECUTION_ERROR = 4,
    COMMAND_ABORTED_BY_USER = 5,
    UNRESOLWABLE_WARNING = 6,
    COMMAND_ABORTED_BY_ADDON = 7
}
export declare class Logger implements IAppLogger {
    private _commandFullName;
    private _jsonFlag;
    private _silentFlag;
    private _filelogFlag;
    private _startTime;
    private _fileLogger;
    private _noWarningsFlag;
    private _commandOutputMode;
    private _printStackTrace;
    private _resources;
    private _commandMessages;
    private _uxLogger;
    private _uxLogLevel;
    private _uxLogVerbosity;
    private _noPromptFlag;
    private _spinnerIsStarted;
    private _messageCache;
    constructor(resources: IResourceBundle, commandMessages: IResourceBundle, uxLogger: IUxLogger, command: ISfdmuCommand, logLevelFlag: string, rootPath: string, verboseFlag: boolean, conciseFlag: boolean, quietFlag: boolean, jsonFlag: boolean, noPromptFlag: boolean, noWarningsFlag: boolean, fileLogFlag: boolean, commandOutputMode: boolean);
    log(message: string | object | ITableMessage, logMessageType?: LOG_MESSAGE_TYPE, verbosity?: LOG_MESSAGE_VERBOSITY, ...tokens: string[]): void;
    infoNormal(message: string, ...tokens: string[]): void;
    infoMinimal(message: string, ...tokens: string[]): void;
    infoVerbose(message: string, ...tokens: string[]): void;
    headerMinimal(message: string, ...tokens: string[]): void;
    headerNormal(message: string, ...tokens: string[]): void;
    headerVerbose(message: string, ...tokens: string[]): void;
    objectNormal(message: object): void;
    objectMinimal(message: object): void;
    warn(message: string, ...tokens: string[]): void;
    error(message: string, ...tokens: string[]): void;
    promptAsync(params: {
        message: string;
        options?: string;
        default?: string;
        nopromptDefault?: string;
        timeout?: number;
    }, ...tokens: string[]): Promise<string>;
    yesNoPromptAsync(message: string, ...tokens: string[]): Promise<boolean>;
    textPromptAsync(message: string, ...tokens: string[]): Promise<string>;
    commandStartMessage(): void;
    commandFinishMessage(message: string | object, status: COMMAND_EXIT_STATUSES, stack?: string, ...tokens: string[]): void;
    spinner(message?: string, ...tokens: string[]): void;
    startSpinner(): void;
    stopSpinner(): void;
    getResourceString(message: any, ...tokens: string[]): any;
    getStartTime(): Date;
}
