import { ApiEngineBase, ApiInfo, IApiEngineInitParameters } from '../../models/api_models';
import { IApiEngine, IApiJobCreateResult, ICsvChunk } from '../../models/api_models/helper_interfaces';
type OperationType = string | "insert" | "update" | "delete" | "hardDelete";
export declare class BulkApiV2_0Engine extends ApiEngineBase implements IApiEngine {
    operationType: OperationType;
    sourceRecords: Array<object>;
    sourceRecordsHashmap: Map<string, object>;
    constructor(init: IApiEngineInitParameters);
    getEngineName(): string;
    getEngineClassType(): typeof ApiEngineBase;
    createCRUDApiJobAsync(allRecords: Array<any>): Promise<IApiJobCreateResult>;
    processCRUDApiBatchAsync(csvChunk: ICsvChunk, progressCallback: (progress: ApiInfo) => void): Promise<Array<any>>;
    createBulkJobAsync(objectAPIName: string, operationType: OperationType): Promise<ApiInfo>;
    createBulkBatchAsync(contentUrl: string, csvContent: string, records: Array<object>): Promise<ApiInfo>;
    closeBulkJobAsync(contentUrl: string): Promise<ApiInfo>;
    pollBulkJobAsync(contentUrl: string): Promise<ApiInfo>;
    waitForBulkJobCompleteAsync(contentUrl: string, pollInterval: number, pollCallback: (result: ApiInfo) => any): Promise<ApiInfo>;
    getBulkJobResultAsync(contentUrl: string): Promise<ApiInfo>;
    private _getBulkJobUnsuccessfullResultAsync;
    private _csvCast;
    private _apiRequestErrorHandler;
    private _getCreateJobEndpointUrl;
}
export {};
