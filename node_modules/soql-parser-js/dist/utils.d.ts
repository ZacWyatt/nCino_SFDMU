import { FieldFunctionExpression, LiteralType, Query, Subquery } from './models/SoqlQuery.model';
import { ComposeField, ComposeFieldFunction, ComposeFieldRelationship, ComposeFieldSubquery, ComposeFieldTypeof } from './publicUtils';
export declare function isString(val: any): val is string;
export declare function isStringArray(val: any[]): val is string[];
export declare function isNumber(val: any): val is number;
export declare function isBoolean(val: any): val is boolean;
export declare function isObject(val: any): val is any;
export declare function isNil(val: any): val is null | undefined;
export declare function get(val: string | null | undefined, suffix?: string, prefix?: string): string;
export declare function getIfTrue(val: boolean | null | undefined, returnStr: string): string;
export declare function getLastItem<T>(arr: T[]): T;
export declare function getAsArrayStr(val: string | string[], alwaysParens?: boolean): string;
export declare function pad(val: string, len: number, left?: number): string;
export declare function isSubquery(query: Query | Subquery): query is Subquery;
/**
 * Gets params from a FieldFunctionExpression. If there are multiple nested functions as multiple parameters
 * within another function, only the first argument will be considered.
 * @param functionFieldExp
 * @returns params
 */
export declare function getParams(functionFieldExp: FieldFunctionExpression): string[];
export declare function isComposeField(input: any): input is ComposeField;
export declare function isComposeFieldFunction(input: any): input is ComposeFieldFunction;
export declare function isComposeFieldRelationship(input: any): input is ComposeFieldRelationship;
export declare function isComposeFieldSubquery(input: any): input is ComposeFieldSubquery;
export declare function isComposeFieldTypeof(input: any): input is ComposeFieldTypeof;
export declare function getWhereValue(value: any | any[], literalType?: LiteralType): any;
