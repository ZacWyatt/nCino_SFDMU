'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ATNDeserializer = require('antlr4ts/atn/ATNDeserializer');
var Lexer = require('antlr4ts/Lexer');
var LexerATNSimulator = require('antlr4ts/atn/LexerATNSimulator');
var Decorators = require('antlr4ts/Decorators');
var VocabularyImpl = require('antlr4ts/VocabularyImpl');
var Utils = require('antlr4ts/misc/Utils');
var ATN = require('antlr4ts/atn/ATN');
var NoViableAltException = require('antlr4ts/NoViableAltException');
var Parser = require('antlr4ts/Parser');
var ParserRuleContext = require('antlr4ts/ParserRuleContext');
var ParserATNSimulator = require('antlr4ts/atn/ParserATNSimulator');
var RecognitionException = require('antlr4ts/RecognitionException');
var RuleVersion = require('antlr4ts/RuleVersion');
var Token = require('antlr4ts/Token');
var tree = require('antlr4ts/tree');
var antlr4ts = require('antlr4ts');

function isString(val) {
    return typeof val === 'string';
}
function isStringArray(val) {
    if (!val) {
        return false;
    }
    return val.length > 0 && isString(val[0]);
}
function isNumber(val) {
    return Number.isFinite(val);
}
function isBoolean(val) {
    return typeof val === typeof true;
}
function isObject(val) {
    return val instanceof Object;
}
function isNil(val) {
    return val === null || val === undefined;
}
function get(val, suffix, prefix) {
    return isNil(val) ? '' : `${prefix || ''}${val}${suffix || ''}`;
}
function getLastItem(arr) {
    return arr[arr.length - 1];
}
function getAsArrayStr(val, alwaysParens = false) {
    if (Array.isArray(val)) {
        if (val.length > 0) {
            return `(${val.join(', ')})`;
        }
        else {
            return alwaysParens ? '()' : '';
        }
    }
    else {
        return alwaysParens ? `(${val || ''})` : val || '';
    }
}
function isSubquery(query) {
    return isString(query.relationshipName);
}
/**
 * Gets params from a FieldFunctionExpression. If there are multiple nested functions as multiple parameters
 * within another function, only the first argument will be considered.
 * @param functionFieldExp
 * @returns params
 */
function getParams(functionFieldExp) {
    if (!functionFieldExp.parameters || functionFieldExp.parameters.length === 0) {
        return [];
    }
    if (isStringArray(functionFieldExp.parameters)) {
        return functionFieldExp.parameters;
    }
    return getParams(functionFieldExp.parameters[0]);
}
function isComposeField(input) {
    return isString(input.field) && !Array.isArray(input.relationships) && !Array.isArray(input.conditions);
}
function isComposeFieldFunction(input) {
    return !isNil(input.fn);
}
function isComposeFieldRelationship(input) {
    return isString(input.field) && Array.isArray(input.relationships);
}
function isComposeFieldSubquery(input) {
    return !isNil(input.subquery);
}
function isComposeFieldTypeof(input) {
    return isString(input.field) && Array.isArray(input.conditions);
}
function getWhereValue(value, literalType) {
    if (isNil(literalType)) {
        return value;
    }
    switch (literalType) {
        case 'STRING': {
            if (Array.isArray(value)) {
                return value.map(val => (val.startsWith("'") ? val : `'${val}'`));
            }
            else {
                return value.startsWith("'") ? value : `'${value}'`;
            }
        }
        default: {
            return value;
        }
    }
}

/**
 * Pass any a basic string or populate required properties on the ComposeField object
 * and a constructed field will be returned
 * @param input string | ComposeFieldInput
 * @returns FieldType
 */
function getComposedField(input) {
    if (typeof input === 'string') {
        return {
            type: 'Field',
            field: input,
        };
    }
    else if (isComposeFieldFunction(input)) {
        let parameters;
        if (input.parameters) {
            parameters = (Array.isArray(input.parameters) ? input.parameters : [input.parameters]);
        }
        return {
            type: 'FieldFunctionExpression',
            fn: input.fn,
            parameters,
            alias: input.alias,
        };
    }
    else if (isComposeFieldRelationship(input)) {
        return {
            type: 'FieldRelationship',
            field: input.field,
            relationships: input.relationships,
            objectPrefix: input.objectPrefix,
        };
    }
    else if (isComposeFieldSubquery(input)) {
        return {
            type: 'FieldSubquery',
            subquery: input.subquery,
        };
    }
    else if (isComposeFieldTypeof(input)) {
        return {
            type: 'FieldTypeof',
            field: input.field,
            conditions: input.conditions,
        };
    }
    else if (isComposeField(input)) {
        return {
            type: 'Field',
            field: input.field,
            objectPrefix: input.objectPrefix,
        };
    }
    else {
        throw new TypeError('The input object provided did not match any valid field types');
    }
}
/**
 * Gets flattened fields - this will turn a Query into a list of fields that can be used to parse results from a returned dataset from SFDC
 * Subqueries only include the child SObject relationship name
 * @param query
 * @param [isAggregateResult] pass in true to force expr0...1 for all non-aliased functions even if field is not explicitly an aggregate expression
 * @returns flattened fields
 */
function getFlattenedFields(query, isAggregateResult) {
    const fields = query.fields;
    let currUnAliasedAggExp = -1;
    let sObject = (query.sObject || '').toLowerCase();
    let sObjectAlias = (query.sObjectAlias || '').toLowerCase();
    const parsedFields = fields
        .map(field => {
        switch (field.type) {
            case 'Field': {
                return field.field;
            }
            case 'FieldFunctionExpression': {
                let params = getParams(field);
                // If the parameter has dot notation and the first entry is the object name/alias, remove it
                params = params.map(param => {
                    if (param.includes('.')) {
                        let tempParams = param.split('.');
                        const firstParam = tempParams[0].toLowerCase();
                        if (firstParam === sObjectAlias || firstParam === sObject) {
                            tempParams = tempParams.slice(1);
                        }
                        return tempParams.join('.');
                    }
                    return param;
                });
                if (field.alias) {
                    const firstParam = params[0];
                    // Include the full path and replace the field with the alias
                    if (firstParam.includes('.')) {
                        params = firstParam.split('.').slice(0, -1);
                        params.push(field.alias);
                        return params.join('.');
                    }
                    return field.alias;
                }
                // Non-aliased aggregate fields use computed name expr0, expr1, etc..
                if (field.isAggregateFn || isAggregateResult) {
                    currUnAliasedAggExp++;
                    return `expr${currUnAliasedAggExp}`;
                }
                if (params.length > 0) {
                    return params.join('.');
                }
                return field.fn;
            }
            case 'FieldRelationship': {
                const firstRelationship = field.relationships[0].toLowerCase();
                if (firstRelationship === sObjectAlias || firstRelationship === sObject) {
                    return field.relationships
                        .concat([field.field])
                        .slice(1)
                        .join('.');
                }
                return field.relationships.concat([field.field]).join('.');
            }
            case 'FieldSubquery': {
                return field.from || field.subquery.relationshipName;
            }
            // TODO: see if support can be added for this, otherwise ignore
            // case 'FieldTypeof': {
            //   return this.parseTypeOfField(field);
            // }
            default:
                break;
        }
    })
        .filter(field => isString(field));
    return parsedFields;
}

/**
 * Formatter
 * This class aids in building a SOQL query from a parse query
 * and optionally formats parts of the query based on the configuration options passed in
 */
class Formatter {
    constructor(enabled, options) {
        this.currIndent = 1;
        this.enabled = enabled;
        this.options = Object.assign({ numIndent: 1, fieldMaxLineLen: 60, fieldSubqueryParensOnOwnLine: true, whereClauseOperatorsIndented: false, logging: false }, options);
    }
    log(data) {
        if (this.options.logging) {
            console.log(data);
        }
    }
    getIndent() {
        return this.repeatChar(this.currIndent * this.options.numIndent, '\t');
    }
    repeatChar(numTimes, char) {
        return new Array(numTimes).fill(char).join('');
    }
    setSubquery(isSubquery$$1) {
        this.currIndent = isSubquery$$1 ? (this.currIndent += 1) : (this.currIndent -= 1);
    }
    stepCurrIndex(num) {
        this.currIndent += num;
    }
    /**
     * Format fields
     * @param fieldData
     */
    formatFields(fieldData) {
        function trimPrevSuffix(currIdx) {
            if (fieldData.fields[currIdx - 1]) {
                fieldData.fields[currIdx - 1].suffix = fieldData.fields[currIdx - 1].suffix.trim();
            }
        }
        fieldData.fields.forEach((field, i) => {
            field.suffix = fieldData.fields.length - 1 === i ? '' : ', ';
        });
        if (this.enabled) {
            let lineLen = 0;
            let newLineAndIndentNext = false;
            fieldData.fields.forEach((field, i) => {
                if (field.isSubquery) {
                    // Subquery should always be on a stand-alone line
                    trimPrevSuffix(i);
                    field.prefix = `\n${this.getIndent()}`;
                    field.suffix = fieldData.fields.length - 1 === i ? '' : ', ';
                    lineLen = 0;
                    newLineAndIndentNext = true;
                }
                else if (isNumber(this.options.fieldMaxLineLen)) {
                    // If max line length is specified, create a new line when needed
                    // Add two to account for ", "
                    lineLen += field.text.length + field.suffix.length;
                    if (lineLen > this.options.fieldMaxLineLen || newLineAndIndentNext) {
                        trimPrevSuffix(i);
                        field.prefix += `\n${this.getIndent()}`;
                        lineLen = 0;
                        newLineAndIndentNext = false;
                    }
                }
                this.log(field);
            });
        }
    }
    /**
     * Formats subquery with additional indents
     */
    formatSubquery(queryStr, numTabs = 2, incrementTabsWhereClauseOpIndent = false) {
        if (incrementTabsWhereClauseOpIndent && this.options.whereClauseOperatorsIndented) {
            numTabs++;
        }
        let leftParen = '(';
        let rightParen = ')';
        if (this.enabled) {
            if (this.options.fieldSubqueryParensOnOwnLine) {
                queryStr = queryStr.replace(/\n/g, `\n${this.repeatChar(numTabs, '\t')}`);
                leftParen = `(\n${this.repeatChar(numTabs, '\t')}`;
                rightParen = `\n${this.repeatChar(numTabs - 1, '\t')})`;
            }
            else {
                queryStr = queryStr.replace(/\n/g, '\n\t');
            }
        }
        return `${leftParen}${queryStr}${rightParen}`;
    }
    /**
     * Formats all clauses that do not have a more specialized format function
     * If formatting is enabled, then this will put a new line before the clause
     * @param clause
     * @returns clause
     */
    formatClause(clause) {
        return this.enabled ? `\n${clause}` : ` ${clause}`;
    }
    formatOrderByArray(groupBy) {
        if (this.enabled) {
            let currLen = 0;
            let output = '';
            groupBy.forEach((token, i) => {
                const nextToken = groupBy[i + 1];
                currLen += token.length;
                if (nextToken && currLen + nextToken.length > this.options.fieldMaxLineLen) {
                    output += `${token},\n\t`;
                    currLen = 0;
                }
                else {
                    output += `${token}${nextToken ? ', ' : ''}`;
                }
            });
            return output;
        }
        else {
            return groupBy.join(', ');
        }
    }
    formatWhereClauseOperators(operator, whereClause) {
        if (this.enabled && this.options.whereClauseOperatorsIndented) {
            return `\n\t${operator} ${whereClause}`;
        }
        else {
            return `${this.formatAddNewLine(' ')}${operator} ${whereClause}`;
        }
    }
    formatAddNewLine(alt = ' ') {
        return this.enabled ? `\n` : alt;
    }
}

class SyntaxErrorListener {
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        throw new Error(`line ${line}:${charPositionInLine} ${msg}`);
    }
}
SyntaxErrorListener.INSTANCE = new SyntaxErrorListener();

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

// Generated from SOQL.g4 by ANTLR 4.6-SNAPSHOT
class SOQLLexer extends Lexer.Lexer {
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator.LexerATNSimulator(SOQLLexer._ATN, this);
    }
    get vocabulary() {
        return SOQLLexer.VOCABULARY;
    }
    get grammarFileName() { return "SOQL.g4"; }
    get ruleNames() { return SOQLLexer.ruleNames; }
    get serializedATN() { return SOQLLexer._serializedATN; }
    get modeNames() { return SOQLLexer.modeNames; }
    static get _ATN() {
        if (!SOQLLexer.__ATN) {
            SOQLLexer.__ATN = new ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(SOQLLexer._serializedATN));
        }
        return SOQLLexer.__ATN;
    }
}
SOQLLexer.WHITE_SPACE = 1;
SOQLLexer.STRING_VALUE = 2;
SOQLLexer.LIKE_STRING_VALUE = 3;
SOQLLexer.AND = 4;
SOQLLexer.AS = 5;
SOQLLexer.ASC = 6;
SOQLLexer.BY = 7;
SOQLLexer.CUBE = 8;
SOQLLexer.DESC = 9;
SOQLLexer.ELSE = 10;
SOQLLexer.EXCLUDES = 11;
SOQLLexer.FALSE = 12;
SOQLLexer.FIRST = 13;
SOQLLexer.FROM = 14;
SOQLLexer.GROUP = 15;
SOQLLexer.HAVING = 16;
SOQLLexer.IN = 17;
SOQLLexer.INCLUDES = 18;
SOQLLexer.LAST = 19;
SOQLLexer.LIKE = 20;
SOQLLexer.LIMIT = 21;
SOQLLexer.NOT = 22;
SOQLLexer.NULL = 23;
SOQLLexer.NULLS = 24;
SOQLLexer.OR = 25;
SOQLLexer.ROLLUP = 26;
SOQLLexer.SELECT = 27;
SOQLLexer.TRUE = 28;
SOQLLexer.USING = 29;
SOQLLexer.WHERE = 30;
SOQLLexer.WITH = 31;
SOQLLexer.FOR = 32;
SOQLLexer.UPDATE = 33;
SOQLLexer.ABOVE = 34;
SOQLLexer.ABOVE_OR_BELOW = 35;
SOQLLexer.AT = 36;
SOQLLexer.BELOW = 37;
SOQLLexer.CATEGORY = 38;
SOQLLexer.DATA = 39;
SOQLLexer.END = 40;
SOQLLexer.OFFSET = 41;
SOQLLexer.ORDER = 42;
SOQLLexer.REFERENCE = 43;
SOQLLexer.SCOPE = 44;
SOQLLexer.TRACKING = 45;
SOQLLexer.THEN = 46;
SOQLLexer.TYPEOF = 47;
SOQLLexer.VIEW = 48;
SOQLLexer.VIEWSTAT = 49;
SOQLLexer.WHEN = 50;
SOQLLexer.SECURITY_ENFORCED = 51;
SOQLLexer.CALENDAR_MONTH = 52;
SOQLLexer.CALENDAR_QUARTER = 53;
SOQLLexer.CALENDAR_YEAR = 54;
SOQLLexer.DAY_IN_MONTH = 55;
SOQLLexer.DAY_IN_WEEK = 56;
SOQLLexer.DAY_IN_YEAR = 57;
SOQLLexer.DAY_ONLY = 58;
SOQLLexer.FISCAL_MONTH = 59;
SOQLLexer.FISCAL_QUARTER = 60;
SOQLLexer.FISCAL_YEAR = 61;
SOQLLexer.HOUR_IN_DAY = 62;
SOQLLexer.WEEK_IN_MONTH = 63;
SOQLLexer.WEEK_IN_YEAR = 64;
SOQLLexer.AVG = 65;
SOQLLexer.COUNT = 66;
SOQLLexer.COUNT_DISTINCT = 67;
SOQLLexer.MIN = 68;
SOQLLexer.MAX = 69;
SOQLLexer.SUM = 70;
SOQLLexer.DISTANCE = 71;
SOQLLexer.GEOLOCATION = 72;
SOQLLexer.FORMAT = 73;
SOQLLexer.TOLABEL = 74;
SOQLLexer.CONVERT_TIME_ZONE = 75;
SOQLLexer.CONVERT_CURRENCY = 76;
SOQLLexer.GROUPING = 77;
SOQLLexer.YESTERDAY = 78;
SOQLLexer.TODAY = 79;
SOQLLexer.TOMORROW = 80;
SOQLLexer.LAST_WEEK = 81;
SOQLLexer.THIS_WEEK = 82;
SOQLLexer.NEXT_WEEK = 83;
SOQLLexer.LAST_MONTH = 84;
SOQLLexer.THIS_MONTH = 85;
SOQLLexer.NEXT_MONTH = 86;
SOQLLexer.LAST_90_DAYS = 87;
SOQLLexer.NEXT_90_DAYS = 88;
SOQLLexer.THIS_QUARTER = 89;
SOQLLexer.LAST_QUARTER = 90;
SOQLLexer.NEXT_QUARTER = 91;
SOQLLexer.THIS_YEAR = 92;
SOQLLexer.LAST_YEAR = 93;
SOQLLexer.NEXT_YEAR = 94;
SOQLLexer.THIS_FISCAL_QUARTER = 95;
SOQLLexer.LAST_FISCAL_QUARTER = 96;
SOQLLexer.NEXT_FISCAL_QUARTER = 97;
SOQLLexer.THIS_FISCAL_YEAR = 98;
SOQLLexer.LAST_FISCAL_YEAR = 99;
SOQLLexer.NEXT_FISCAL_YEAR = 100;
SOQLLexer.NEXT_N_DAYS = 101;
SOQLLexer.LAST_N_DAYS = 102;
SOQLLexer.N_DAYS_AGO = 103;
SOQLLexer.NEXT_N_WEEKS = 104;
SOQLLexer.LAST_N_WEEKS = 105;
SOQLLexer.N_WEEKS_AGO = 106;
SOQLLexer.NEXT_N_MONTHS = 107;
SOQLLexer.LAST_N_MONTHS = 108;
SOQLLexer.N_MONTHS_AGO = 109;
SOQLLexer.NEXT_N_QUARTERS = 110;
SOQLLexer.LAST_N_QUARTERS = 111;
SOQLLexer.N_QUARTERS_AGO = 112;
SOQLLexer.NEXT_N_YEARS = 113;
SOQLLexer.LAST_N_YEARS = 114;
SOQLLexer.N_YEARS_AGO = 115;
SOQLLexer.NEXT_N_FISCAL_QUARTERS = 116;
SOQLLexer.LAST_N_FISCAL_QUARTERS = 117;
SOQLLexer.N_FISCAL_QUARTERS_AGO = 118;
SOQLLexer.NEXT_N_FISCAL_YEARS = 119;
SOQLLexer.LAST_N_FISCAL_YEARS = 120;
SOQLLexer.N_FISCAL_YEARS_AGO = 121;
SOQLLexer.EQ = 122;
SOQLLexer.NOT_EQ = 123;
SOQLLexer.LET = 124;
SOQLLexer.GET = 125;
SOQLLexer.GTH = 126;
SOQLLexer.LTH = 127;
SOQLLexer.DOT = 128;
SOQLLexer.COLON = 129;
SOQLLexer.SEMICOLON = 130;
SOQLLexer.COMMA = 131;
SOQLLexer.ASTERISK = 132;
SOQLLexer.RPAREN = 133;
SOQLLexer.LPAREN = 134;
SOQLLexer.PLUS = 135;
SOQLLexer.MINUS = 136;
SOQLLexer.ID = 137;
SOQLLexer.DATE = 138;
SOQLLexer.DATETIME = 139;
SOQLLexer.UNSIGNED_INTEGER = 140;
SOQLLexer.REAL_NUMBER = 141;
SOQLLexer.SIGNED_INTEGER = 142;
SOQLLexer.modeNames = [
    "DEFAULT_MODE"
];
SOQLLexer.ruleNames = [
    "A_", "B_", "C_", "D_", "E_", "F_", "G_", "H_", "I_", "J_", "K_", "L_",
    "M_", "N_", "O_", "P_", "Q_", "R_", "S_", "T_", "U_", "V_", "W_", "X_",
    "Y_", "Z_", "WHITE_SPACE", "STRING_VALUE", "LIKE_STRING_VALUE", "AND",
    "AS", "ASC", "BY", "CUBE", "DESC", "ELSE", "EXCLUDES", "FALSE", "FIRST",
    "FROM", "GROUP", "HAVING", "IN", "INCLUDES", "LAST", "LIKE", "LIMIT",
    "NOT", "NULL", "NULLS", "OR", "ROLLUP", "SELECT", "TRUE", "USING", "WHERE",
    "WITH", "FOR", "UPDATE", "ABOVE", "ABOVE_OR_BELOW", "AT", "BELOW", "CATEGORY",
    "DATA", "END", "OFFSET", "ORDER", "REFERENCE", "SCOPE", "TRACKING", "THEN",
    "TYPEOF", "VIEW", "VIEWSTAT", "WHEN", "SECURITY_ENFORCED", "CALENDAR_MONTH",
    "CALENDAR_QUARTER", "CALENDAR_YEAR", "DAY_IN_MONTH", "DAY_IN_WEEK", "DAY_IN_YEAR",
    "DAY_ONLY", "FISCAL_MONTH", "FISCAL_QUARTER", "FISCAL_YEAR", "HOUR_IN_DAY",
    "WEEK_IN_MONTH", "WEEK_IN_YEAR", "AVG", "COUNT", "COUNT_DISTINCT", "MIN",
    "MAX", "SUM", "DISTANCE", "GEOLOCATION", "FORMAT", "TOLABEL", "CONVERT_TIME_ZONE",
    "CONVERT_CURRENCY", "GROUPING", "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK",
    "THIS_WEEK", "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", "NEXT_MONTH", "LAST_90_DAYS",
    "NEXT_90_DAYS", "THIS_QUARTER", "LAST_QUARTER", "NEXT_QUARTER", "THIS_YEAR",
    "LAST_YEAR", "NEXT_YEAR", "THIS_FISCAL_QUARTER", "LAST_FISCAL_QUARTER",
    "NEXT_FISCAL_QUARTER", "THIS_FISCAL_YEAR", "LAST_FISCAL_YEAR", "NEXT_FISCAL_YEAR",
    "NEXT_N_DAYS", "LAST_N_DAYS", "N_DAYS_AGO", "NEXT_N_WEEKS", "LAST_N_WEEKS",
    "N_WEEKS_AGO", "NEXT_N_MONTHS", "LAST_N_MONTHS", "N_MONTHS_AGO", "NEXT_N_QUARTERS",
    "LAST_N_QUARTERS", "N_QUARTERS_AGO", "NEXT_N_YEARS", "LAST_N_YEARS", "N_YEARS_AGO",
    "NEXT_N_FISCAL_QUARTERS", "LAST_N_FISCAL_QUARTERS", "N_FISCAL_QUARTERS_AGO",
    "NEXT_N_FISCAL_YEARS", "LAST_N_FISCAL_YEARS", "N_FISCAL_YEARS_AGO", "EQ",
    "NOT_EQ", "LET", "GET", "GTH", "LTH", "DOT", "COLON", "SEMICOLON", "COMMA",
    "ASTERISK", "RPAREN", "LPAREN", "PLUS", "MINUS", "ID", "DATE", "DATETIME",
    "UNSIGNED_INTEGER", "REAL_NUMBER", "SIGNED_INTEGER"
];
SOQLLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'='", undefined, "'<='", "'>='", "'>'",
    "'<'", "'.'", "':'", "';'", "','", "'*'", "')'", "'('", "'+'", "'-'"
];
SOQLLexer._SYMBOLIC_NAMES = [
    undefined, "WHITE_SPACE", "STRING_VALUE", "LIKE_STRING_VALUE", "AND",
    "AS", "ASC", "BY", "CUBE", "DESC", "ELSE", "EXCLUDES", "FALSE", "FIRST",
    "FROM", "GROUP", "HAVING", "IN", "INCLUDES", "LAST", "LIKE", "LIMIT",
    "NOT", "NULL", "NULLS", "OR", "ROLLUP", "SELECT", "TRUE", "USING", "WHERE",
    "WITH", "FOR", "UPDATE", "ABOVE", "ABOVE_OR_BELOW", "AT", "BELOW", "CATEGORY",
    "DATA", "END", "OFFSET", "ORDER", "REFERENCE", "SCOPE", "TRACKING", "THEN",
    "TYPEOF", "VIEW", "VIEWSTAT", "WHEN", "SECURITY_ENFORCED", "CALENDAR_MONTH",
    "CALENDAR_QUARTER", "CALENDAR_YEAR", "DAY_IN_MONTH", "DAY_IN_WEEK", "DAY_IN_YEAR",
    "DAY_ONLY", "FISCAL_MONTH", "FISCAL_QUARTER", "FISCAL_YEAR", "HOUR_IN_DAY",
    "WEEK_IN_MONTH", "WEEK_IN_YEAR", "AVG", "COUNT", "COUNT_DISTINCT", "MIN",
    "MAX", "SUM", "DISTANCE", "GEOLOCATION", "FORMAT", "TOLABEL", "CONVERT_TIME_ZONE",
    "CONVERT_CURRENCY", "GROUPING", "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK",
    "THIS_WEEK", "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", "NEXT_MONTH", "LAST_90_DAYS",
    "NEXT_90_DAYS", "THIS_QUARTER", "LAST_QUARTER", "NEXT_QUARTER", "THIS_YEAR",
    "LAST_YEAR", "NEXT_YEAR", "THIS_FISCAL_QUARTER", "LAST_FISCAL_QUARTER",
    "NEXT_FISCAL_QUARTER", "THIS_FISCAL_YEAR", "LAST_FISCAL_YEAR", "NEXT_FISCAL_YEAR",
    "NEXT_N_DAYS", "LAST_N_DAYS", "N_DAYS_AGO", "NEXT_N_WEEKS", "LAST_N_WEEKS",
    "N_WEEKS_AGO", "NEXT_N_MONTHS", "LAST_N_MONTHS", "N_MONTHS_AGO", "NEXT_N_QUARTERS",
    "LAST_N_QUARTERS", "N_QUARTERS_AGO", "NEXT_N_YEARS", "LAST_N_YEARS", "N_YEARS_AGO",
    "NEXT_N_FISCAL_QUARTERS", "LAST_N_FISCAL_QUARTERS", "N_FISCAL_QUARTERS_AGO",
    "NEXT_N_FISCAL_YEARS", "LAST_N_FISCAL_YEARS", "N_FISCAL_YEARS_AGO", "EQ",
    "NOT_EQ", "LET", "GET", "GTH", "LTH", "DOT", "COLON", "SEMICOLON", "COMMA",
    "ASTERISK", "RPAREN", "LPAREN", "PLUS", "MINUS", "ID", "DATE", "DATETIME",
    "UNSIGNED_INTEGER", "REAL_NUMBER", "SIGNED_INTEGER"
];
SOQLLexer.VOCABULARY = new VocabularyImpl.VocabularyImpl(SOQLLexer._LITERAL_NAMES, SOQLLexer._SYMBOLIC_NAMES, []);
SOQLLexer._serializedATNSegments = 3;
SOQLLexer._serializedATNSegment0 = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x90\u06E4\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
    "\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
    "+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
    "\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03" +
    "\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
    "\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
    "\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03" +
    "\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03" +
    "\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
    "\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07" +
    "\x1D\u019E\n\x1D\f\x1D\x0E\x1D\u01A1\v\x1D\x03\x1D\x03\x1D\x03\x1E\x03" +
    "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
    "\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
    "\x1E\x03\x1E\x03\x1E\x07\x1E\u01BB\n\x1E\f\x1E\x0E\x1E\u01BE\v\x1E\x03" +
    "\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!" +
    "\x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03" +
    "$\x03$\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
    "&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03" +
    "(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03*\x03+\x03+\x03" +
    "+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x03" +
    "-\x03-\x03-\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x030\x03" +
    "0\x030\x030\x030\x030\x031\x031\x031\x031\x032\x032\x032\x032\x032\x03" +
    "3\x033\x033\x033\x033\x033\x034\x034\x034\x035\x035\x035\x035\x035\x03" +
    "5\x035\x036\x036\x036\x036\x036\x036\x036\x037\x037\x037\x037\x037\x03" +
    "8\x038\x038\x038\x038\x038\x039\x039\x039\x039\x039\x039\x03:\x03:\x03" +
    ":\x03:\x03:\x03;\x03;\x03;\x03;\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03" +
    "=\x03=\x03=\x03=\x03=\x03=\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03" +
    ">\x03>\x03>\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03" +
    "@\x03@\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03" +
    "B\x03B\x03C\x03C\x03C\x03C\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03E\x03" +
    "E\x03E\x03E\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03" +
    "F\x03G\x03G\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03" +
    "H\x03H\x03I\x03I\x03I\x03I\x03I\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03" +
    "K\x03K\x03K\x03K\x03K\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03" +
    "M\x03M\x03M\x03M\x03M\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03O\x03O\x03O\x03O\x03O\x03" +
    "O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03P\x03P\x03P\x03P\x03" +
    "P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03Q\x03" +
    "Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03R\x03" +
    "R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03S\x03S\x03" +
    "S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03T\x03T\x03T\x03T\x03" +
    "T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
    "U\x03U\x03U\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03" +
    "V\x03V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03" +
    "W\x03W\x03W\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03" +
    "X\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Z\x03" +
    "Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03[\x03" +
    "[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03\\\x03\\\x03" +
    "\\\x03\\\x03]\x03]\x03]\x03]\x03]\x03]\x03^\x03^\x03^\x03^\x03^\x03^\x03" +
    "^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03_\x03_\x03_\x03_\x03`\x03" +
    "`\x03`\x03`\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03" +
    "b\x03b\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03" +
    "d\x03d\x03d\x03d\x03d\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03" +
    "e\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
    "f\x03f\x03f\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03" +
    "g\x03g\x03g\x03g\x03g\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03" +
    "i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03" +
    "l\x03l\x03l\x03l\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03" +
    "m\x03m\x03m\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03o\x03" +
    "o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03p\x03p\x03p\x03p\x03" +
    "p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03" +
    "q\x03q\x03q\x03q\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03" +
    "r\x03r\x03r\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03" +
    "s\x03s\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03" +
    "t\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03" +
    "v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03w\x03" +
    "w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x03x\x03x\x03x\x03x\x03x\x03" +
    "x\x03x\x03x\x03x\x03x\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03" +
    "y\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03" +
    "z\x03z\x03z\x03z\x03z\x03z\x03z\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03" +
    "{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03{\x03|\x03" +
    "|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03" +
    "|\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03" +
    "}\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03~\x03~\x03~\x03~\x03~\x03~\x03" +
    "~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03\x7F\x03\x7F\x03" +
    "\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03" +
    "\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x80\x03" +
    "\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03" +
    "\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
    "\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03" +
    "\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
    "\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
    "\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03" +
    "\x84\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x86\x03\x86\x03" +
    "\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03" +
    "\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03" +
    "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03" +
    "\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03" +
    "\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03" +
    "\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8B\x03" +
    "\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03" +
    "\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03" +
    "\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03" +
    "\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
    "\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03" +
    "\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x03\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03" +
    "\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03" +
    "\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x91\x03" +
    "\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
    "\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
    "\x91\x03\x91\x03\x91\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03" +
    "\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03" +
    "\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x93\x03\x93\x03\x93\x03\x93\x03" +
    "\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03" +
    "\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x94\x03\x94\x03" +
    "\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03" +
    "\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x95\x03" +
    "\x95\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0679\n\x96\x03\x97\x03\x97" +
    "\x03\x97\x03\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A\x03\x9A\x03\x9B" +
    "\x03\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9F\x03\x9F" +
    "\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA4" +
    "\x03\xA4\x07\xA4\u0699\n\xA4\f\xA4\x0E\xA4\u069C\v\xA4\x03\xA5\x03\xA5" +
    "\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5" +
    "\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
    "\x03\xA6\x03\xA6\x03\xA6\x06\xA6\u06B5\n\xA6\r\xA6\x0E\xA6\u06B6\x05\xA6" +
    "\u06B9\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u06BE\n\xA6\x03\xA6\x03\xA6" +
    "\x03\xA6\x05\xA6\u06C3\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u06C8\n\xA6" +
    "\x03\xA7\x06\xA7\u06CB\n\xA7\r\xA7\x0E\xA7\u06CC\x03\xA8\x03\xA8\x05\xA8" +
    "\u06D1\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
    "\xA8\x03\xA8\x03\xA8\x05\xA8\u06DD\n\xA8\x03\xA9\x03\xA9\x05\xA9\u06E1" +
    "\n\xA9\x03\xA9\x03\xA9\x02\x02\x02\xAA\x03\x02\x02\x05\x02\x02\x07\x02" +
    "\x02\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13\x02\x02" +
    "\x15\x02\x02\x17\x02\x02\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02" +
    "!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02\x02+\x02\x02-\x02\x02/\x02" +
    "\x021\x02\x023\x02\x025\x02\x027\x02\x039\x02\x04;\x02\x05=\x02\x06?\x02" +
    "\x07A\x02\bC\x02\tE\x02\nG\x02\vI\x02\fK\x02\rM\x02\x0EO\x02\x0FQ\x02" +
    "\x10S\x02\x11U\x02\x12W\x02\x13Y\x02\x14[\x02\x15]\x02\x16_\x02\x17a\x02" +
    "\x18c\x02\x19e\x02\x1Ag\x02\x1Bi\x02\x1Ck\x02\x1Dm\x02\x1Eo\x02\x1Fq\x02" +
    " s\x02!u\x02\"w\x02#y\x02${\x02%}\x02&\x7F\x02\'\x81\x02(\x83\x02)\x85" +
    "\x02*\x87\x02+\x89\x02,\x8B\x02-\x8D\x02.\x8F\x02/\x91\x020\x93\x021\x95" +
    "\x022\x97\x023\x99\x024\x9B\x025\x9D\x026\x9F\x027\xA1\x028\xA3\x029\xA5" +
    "\x02:\xA7\x02;\xA9\x02<\xAB\x02=\xAD\x02>\xAF\x02?\xB1\x02@\xB3\x02A\xB5" +
    "\x02B\xB7\x02C\xB9\x02D\xBB\x02E\xBD\x02F\xBF\x02G\xC1\x02H\xC3\x02I\xC5" +
    "\x02J\xC7\x02K\xC9\x02L\xCB\x02M\xCD\x02N\xCF\x02O\xD1\x02P\xD3\x02Q\xD5" +
    "\x02R\xD7\x02S\xD9\x02T\xDB\x02U\xDD\x02V\xDF\x02W\xE1\x02X\xE3\x02Y\xE5" +
    "\x02Z\xE7\x02[\xE9\x02\\\xEB\x02]\xED\x02^\xEF\x02_\xF1\x02`\xF3\x02a" +
    "\xF5\x02b\xF7\x02c\xF9\x02d\xFB\x02e\xFD\x02f\xFF\x02g\u0101\x02h\u0103" +
    "\x02i\u0105\x02j\u0107\x02k\u0109\x02l\u010B\x02m\u010D\x02n\u010F\x02" +
    "o\u0111\x02p\u0113\x02q\u0115\x02r\u0117\x02s\u0119\x02t\u011B\x02u\u011D" +
    "\x02v\u011F\x02w\u0121\x02x\u0123\x02y\u0125\x02z\u0127\x02{\u0129\x02" +
    "|\u012B\x02}\u012D\x02~\u012F\x02\x7F\u0131\x02\x80\u0133\x02\x81\u0135" +
    "\x02\x82\u0137\x02\x83\u0139\x02\x84\u013B\x02\x85\u013D\x02\x86\u013F" +
    "\x02\x87\u0141\x02\x88\u0143\x02\x89\u0145\x02\x8A\u0147\x02\x8B\u0149" +
    "\x02\x8C\u014B\x02\x8D\u014D\x02\x8E\u014F\x02\x8F\u0151\x02\x90\x03\x02" +
    " \x04\x02CCcc\x04\x02DDdd\x04\x02EEee\x04\x02FFff\x04\x02GGgg\x04\x02" +
    "HHhh\x04\x02IIii\x04\x02JJjj\x04\x02KKkk\x04\x02LLll\x04\x02MMmm\x04\x02" +
    "NNnn\x04\x02OOoo\x04\x02PPpp\x04\x02QQqq\x04\x02RRrr\x04\x02SSss\x04\x02" +
    "TTtt\x04\x02UUuu\x04\x02VVvv\x04\x02WWww\x04\x02XXxx\x04\x02YYyy\x04\x02" +
    "ZZzz\x04\x02[[{{\x04\x02\\\\||\x05\x02\v\f\x0F\x0F\"\"\x04\x02))^^\x06" +
    "\x02&&C\\aac|\x07\x02&&2;C\\aac|\u06EA\x027\x03\x02\x02\x02\x029\x03\x02" +
    "\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02" +
    "\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03" +
    "\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02" +
    "\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02" +
    "U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02" +
    "\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02" +
    "\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03" +
    "\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02" +
    "\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02" +
    "w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02" +
    "\x02\x02\x02\x7F\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02" +
    "\x02\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02" +
    "\x02\x02\x02\x8B\x03\x02\x02\x02\x02\x8D\x03\x02\x02\x02\x02\x8F\x03\x02" +
    "\x02\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02\x95\x03\x02" +
    "\x02\x02\x02\x97\x03\x02\x02\x02\x02\x99\x03\x02\x02\x02\x02\x9B\x03\x02" +
    "\x02\x02\x02\x9D\x03\x02\x02\x02\x02\x9F\x03\x02\x02\x02\x02\xA1\x03\x02" +
    "\x02\x02\x02\xA3\x03\x02\x02\x02\x02\xA5\x03\x02\x02\x02\x02\xA7\x03\x02" +
    "\x02\x02\x02\xA9\x03\x02\x02\x02\x02\xAB\x03\x02\x02\x02\x02\xAD\x03\x02" +
    "\x02\x02\x02\xAF\x03\x02\x02\x02\x02\xB1\x03\x02\x02\x02\x02\xB3\x03\x02" +
    "\x02\x02\x02\xB5\x03\x02\x02\x02\x02\xB7\x03\x02\x02\x02\x02\xB9\x03\x02" +
    "\x02\x02\x02\xBB\x03\x02\x02\x02\x02\xBD\x03\x02\x02\x02\x02\xBF\x03\x02" +
    "\x02\x02\x02\xC1\x03\x02\x02\x02\x02\xC3\x03\x02\x02\x02\x02\xC5\x03\x02" +
    "\x02\x02\x02\xC7\x03\x02\x02\x02\x02\xC9\x03\x02\x02\x02\x02\xCB\x03\x02" +
    "\x02\x02\x02\xCD\x03\x02\x02\x02\x02\xCF\x03\x02\x02\x02\x02\xD1\x03\x02" +
    "\x02\x02\x02\xD3\x03\x02\x02\x02\x02\xD5\x03\x02\x02\x02\x02\xD7\x03\x02" +
    "\x02\x02\x02\xD9\x03\x02\x02\x02\x02\xDB\x03\x02\x02\x02\x02\xDD\x03\x02" +
    "\x02\x02\x02\xDF\x03\x02\x02\x02\x02\xE1\x03\x02\x02\x02\x02\xE3\x03\x02" +
    "\x02\x02\x02\xE5\x03\x02\x02\x02\x02\xE7\x03\x02\x02\x02\x02\xE9\x03\x02" +
    "\x02\x02\x02\xEB\x03\x02\x02\x02\x02\xED\x03\x02\x02\x02\x02\xEF\x03\x02" +
    "\x02\x02\x02\xF1\x03\x02\x02\x02\x02\xF3\x03\x02\x02\x02\x02\xF5\x03\x02" +
    "\x02\x02\x02\xF7\x03\x02\x02\x02\x02\xF9\x03\x02\x02\x02\x02\xFB\x03\x02" +
    "\x02\x02\x02\xFD\x03\x02\x02\x02\x02\xFF\x03\x02\x02\x02\x02\u0101\x03" +
    "\x02\x02\x02\x02\u0103\x03\x02\x02\x02\x02\u0105\x03\x02\x02\x02\x02\u0107" +
    "\x03\x02\x02\x02\x02\u0109\x03\x02\x02\x02\x02\u010B\x03\x02\x02\x02\x02" +
    "\u010D\x03\x02\x02\x02\x02\u010F\x03\x02\x02\x02\x02\u0111\x03\x02\x02" +
    "\x02\x02\u0113\x03\x02\x02\x02\x02\u0115\x03\x02\x02\x02\x02\u0117\x03" +
    "\x02\x02\x02\x02\u0119\x03\x02\x02\x02\x02\u011B\x03\x02\x02\x02\x02\u011D" +
    "\x03\x02\x02\x02\x02\u011F\x03\x02\x02\x02\x02\u0121\x03\x02\x02\x02\x02" +
    "\u0123\x03\x02\x02\x02\x02\u0125\x03\x02\x02\x02\x02\u0127\x03\x02\x02" +
    "\x02\x02\u0129\x03\x02\x02\x02\x02\u012B\x03\x02\x02\x02\x02\u012D\x03" +
    "\x02";
SOQLLexer._serializedATNSegment1 = "\x02\x02\x02\u012F\x03\x02\x02\x02\x02\u0131\x03\x02\x02\x02\x02\u0133" +
    "\x03\x02\x02\x02\x02\u0135\x03\x02\x02\x02\x02\u0137\x03\x02\x02\x02\x02" +
    "\u0139\x03\x02\x02\x02\x02\u013B\x03\x02\x02\x02\x02\u013D\x03\x02\x02" +
    "\x02\x02\u013F\x03\x02\x02\x02\x02\u0141\x03\x02\x02\x02\x02\u0143\x03" +
    "\x02\x02\x02\x02\u0145\x03\x02\x02\x02\x02\u0147\x03\x02\x02\x02\x02\u0149" +
    "\x03\x02\x02\x02\x02\u014B\x03\x02\x02\x02\x02\u014D\x03\x02\x02\x02\x02" +
    "\u014F\x03\x02\x02\x02\x02\u0151\x03\x02\x02\x02\x03\u0153\x03\x02\x02" +
    "\x02\x05\u0155\x03\x02\x02\x02\x07\u0157\x03\x02\x02\x02\t\u0159\x03\x02" +
    "\x02\x02\v\u015B\x03\x02\x02\x02\r\u015D\x03\x02\x02\x02\x0F\u015F\x03" +
    "\x02\x02\x02\x11\u0161\x03\x02\x02\x02\x13\u0163\x03\x02\x02\x02\x15\u0165" +
    "\x03\x02\x02\x02\x17\u0167\x03\x02\x02\x02\x19\u0169\x03\x02\x02\x02\x1B" +
    "\u016B\x03\x02\x02\x02\x1D\u016D\x03\x02\x02\x02\x1F\u016F\x03\x02\x02" +
    "\x02!\u0171\x03\x02\x02\x02#\u0173\x03\x02\x02\x02%\u0175\x03\x02\x02" +
    "\x02\'\u0177\x03\x02\x02\x02)\u0179\x03\x02\x02\x02+\u017B\x03\x02\x02" +
    "\x02-\u017D\x03\x02\x02\x02/\u017F\x03\x02\x02\x021\u0181\x03\x02\x02" +
    "\x023\u0183\x03\x02\x02\x025\u0185\x03\x02\x02\x027\u0187\x03\x02\x02" +
    "\x029\u018B\x03\x02\x02\x02;\u01A4\x03\x02\x02\x02=\u01C1\x03\x02\x02" +
    "\x02?\u01C5\x03\x02\x02\x02A\u01C8\x03\x02\x02\x02C\u01CC\x03\x02\x02" +
    "\x02E\u01CF\x03\x02\x02\x02G\u01D4\x03\x02\x02\x02I\u01D9\x03\x02\x02" +
    "\x02K\u01DE\x03\x02\x02\x02M\u01E7\x03\x02\x02\x02O\u01ED\x03\x02\x02" +
    "\x02Q\u01F3\x03\x02\x02\x02S\u01F8\x03\x02\x02\x02U\u01FE\x03\x02\x02" +
    "\x02W\u0205\x03\x02\x02\x02Y\u0208\x03\x02\x02\x02[\u0211\x03\x02\x02" +
    "\x02]\u0216\x03\x02\x02\x02_\u021B\x03\x02\x02\x02a\u0221\x03\x02\x02" +
    "\x02c\u0225\x03\x02\x02\x02e\u022A\x03\x02\x02\x02g\u0230\x03\x02\x02" +
    "\x02i\u0233\x03\x02\x02\x02k\u023A\x03\x02\x02\x02m\u0241\x03\x02\x02" +
    "\x02o\u0246\x03\x02\x02\x02q\u024C\x03\x02\x02\x02s\u0252\x03\x02\x02" +
    "\x02u\u0257\x03\x02\x02\x02w\u025B\x03\x02\x02\x02y\u0262\x03\x02\x02" +
    "\x02{\u0268\x03\x02\x02\x02}\u0277\x03\x02\x02\x02\x7F\u027A\x03\x02\x02" +
    "\x02\x81\u0280\x03\x02\x02\x02\x83\u0289\x03\x02\x02\x02\x85\u028E\x03" +
    "\x02\x02\x02\x87\u0292\x03\x02\x02\x02\x89\u0299\x03\x02\x02\x02\x8B\u029F" +
    "\x03\x02\x02\x02\x8D\u02A9\x03\x02\x02\x02\x8F\u02AF\x03\x02\x02\x02\x91" +
    "\u02B8\x03\x02\x02\x02\x93\u02BD\x03\x02\x02\x02\x95\u02C4\x03\x02\x02" +
    "\x02\x97\u02C9\x03\x02\x02\x02\x99\u02D2\x03\x02\x02\x02\x9B\u02D7\x03" +
    "\x02\x02\x02\x9D\u02E9\x03\x02\x02\x02\x9F\u02F8\x03\x02\x02\x02\xA1\u0309" +
    "\x03\x02\x02\x02\xA3\u0317\x03\x02\x02\x02\xA5\u0324\x03\x02\x02\x02\xA7" +
    "\u0330\x03\x02\x02\x02\xA9\u033C\x03\x02\x02\x02\xAB\u0345\x03\x02\x02" +
    "\x02\xAD\u0352\x03\x02\x02\x02\xAF\u0361\x03\x02\x02\x02\xB1\u036D\x03" +
    "\x02\x02\x02\xB3\u0379\x03\x02\x02\x02\xB5\u0387\x03\x02\x02\x02\xB7\u0394" +
    "\x03\x02\x02\x02\xB9\u0398\x03\x02\x02\x02\xBB\u039E\x03\x02\x02\x02\xBD" +
    "\u03AD\x03\x02\x02\x02\xBF\u03B1\x03\x02\x02\x02\xC1\u03B5\x03\x02\x02" +
    "\x02\xC3\u03B9\x03\x02\x02\x02\xC5\u03C2\x03\x02\x02\x02\xC7\u03CE\x03" +
    "\x02\x02\x02\xC9\u03D5\x03\x02\x02\x02\xCB\u03DD\x03\x02\x02\x02\xCD\u03ED" +
    "\x03\x02\x02\x02\xCF\u03FD\x03\x02\x02\x02\xD1\u0406\x03\x02\x02\x02\xD3" +
    "\u0410\x03\x02\x02\x02\xD5\u0416\x03\x02\x02\x02\xD7\u041F\x03\x02\x02" +
    "\x02\xD9\u0429\x03\x02\x02\x02\xDB\u0433\x03\x02\x02\x02\xDD\u043D\x03" +
    "\x02\x02\x02\xDF\u0448\x03\x02\x02\x02\xE1\u0453\x03\x02\x02\x02\xE3\u045E" +
    "\x03\x02\x02\x02\xE5\u046B\x03\x02\x02\x02\xE7\u0478\x03\x02\x02\x02\xE9" +
    "\u0485\x03\x02\x02\x02\xEB\u0492\x03\x02\x02\x02\xED\u049F\x03\x02\x02" +
    "\x02\xEF\u04A9\x03\x02\x02\x02\xF1\u04B3\x03\x02\x02\x02\xF3\u04BD\x03" +
    "\x02\x02\x02\xF5\u04D1\x03\x02\x02\x02\xF7\u04E5\x03\x02\x02\x02\xF9\u04F9" +
    "\x03\x02\x02\x02\xFB\u050A\x03\x02\x02\x02\xFD\u051B\x03\x02\x02\x02\xFF" +
    "\u052C\x03\x02\x02\x02\u0101\u0538\x03\x02\x02\x02\u0103\u0544\x03\x02" +
    "\x02\x02\u0105\u054F\x03\x02\x02\x02\u0107\u055C\x03\x02\x02\x02\u0109" +
    "\u0569\x03\x02\x02\x02\u010B\u0575\x03\x02\x02\x02\u010D\u0583\x03\x02" +
    "\x02\x02\u010F\u0591\x03\x02\x02\x02\u0111\u059E\x03\x02\x02\x02\u0113" +
    "\u05AE\x03\x02\x02\x02\u0115\u05BE\x03\x02\x02\x02\u0117\u05CD\x03\x02" +
    "\x02\x02\u0119\u05DA\x03\x02\x02\x02\u011B\u05E7\x03\x02\x02\x02\u011D" +
    "\u05F3\x03\x02\x02\x02\u011F\u060A\x03\x02\x02\x02\u0121\u0621\x03\x02" +
    "\x02\x02\u0123\u0637\x03\x02\x02\x02\u0125\u064B\x03\x02\x02\x02\u0127" +
    "\u065F\x03\x02\x02\x02\u0129\u0672\x03\x02\x02\x02\u012B\u0678\x03\x02" +
    "\x02\x02\u012D\u067A\x03\x02\x02\x02\u012F\u067D\x03\x02\x02\x02\u0131" +
    "\u0680\x03\x02\x02\x02\u0133\u0682\x03\x02\x02\x02\u0135\u0684\x03\x02" +
    "\x02\x02\u0137\u0686\x03\x02\x02\x02\u0139\u0688\x03\x02\x02\x02\u013B" +
    "\u068A\x03\x02\x02\x02\u013D\u068C\x03\x02\x02\x02\u013F\u068E\x03\x02" +
    "\x02\x02\u0141\u0690\x03\x02\x02\x02\u0143\u0692\x03\x02\x02\x02\u0145" +
    "\u0694\x03\x02\x02\x02\u0147\u0696\x03\x02\x02\x02\u0149\u069D\x03\x02" +
    "\x02\x02\u014B\u06A8\x03\x02\x02\x02\u014D\u06CA\x03\x02\x02\x02\u014F" +
    "\u06D0\x03\x02\x02\x02\u0151\u06E0\x03\x02\x02\x02\u0153\u0154\t\x02\x02" +
    "\x02\u0154\x04\x03\x02\x02\x02\u0155\u0156\t\x03\x02\x02\u0156\x06\x03" +
    "\x02\x02\x02\u0157\u0158\t\x04\x02\x02\u0158\b\x03\x02\x02\x02\u0159\u015A" +
    "\t\x05\x02\x02\u015A\n\x03\x02\x02\x02\u015B\u015C\t\x06\x02\x02\u015C" +
    "\f\x03\x02\x02\x02\u015D\u015E\t\x07\x02\x02\u015E\x0E\x03\x02\x02\x02" +
    "\u015F\u0160\t\b\x02\x02\u0160\x10\x03\x02\x02\x02\u0161\u0162\t\t\x02" +
    "\x02\u0162\x12\x03\x02\x02\x02\u0163\u0164\t\n\x02\x02\u0164\x14\x03\x02" +
    "\x02\x02\u0165\u0166\t\v\x02\x02\u0166\x16\x03\x02\x02\x02\u0167\u0168" +
    "\t\f\x02\x02\u0168\x18\x03\x02\x02\x02\u0169\u016A\t\r\x02\x02\u016A\x1A" +
    "\x03\x02\x02\x02\u016B\u016C\t\x0E\x02\x02\u016C\x1C\x03\x02\x02\x02\u016D" +
    "\u016E\t\x0F\x02\x02\u016E\x1E\x03\x02\x02\x02\u016F\u0170\t\x10\x02\x02" +
    "\u0170 \x03\x02\x02\x02\u0171\u0172\t\x11\x02\x02\u0172\"\x03\x02\x02" +
    "\x02\u0173\u0174\t\x12\x02\x02\u0174$\x03\x02\x02\x02\u0175\u0176\t\x13" +
    "\x02\x02\u0176&\x03\x02\x02\x02\u0177\u0178\t\x14\x02\x02\u0178(\x03\x02" +
    "\x02\x02\u0179\u017A\t\x15\x02\x02\u017A*\x03\x02\x02\x02\u017B\u017C" +
    "\t\x16\x02\x02\u017C,\x03\x02\x02\x02\u017D\u017E\t\x17\x02\x02\u017E" +
    ".\x03\x02\x02\x02\u017F\u0180\t\x18\x02\x02\u01800\x03\x02\x02\x02\u0181" +
    "\u0182\t\x19\x02\x02\u01822\x03\x02\x02\x02\u0183\u0184\t\x1A\x02\x02" +
    "\u01844\x03\x02\x02\x02\u0185\u0186\t\x1B\x02\x02\u01866\x03\x02\x02\x02" +
    "\u0187\u0188\t\x1C\x02\x02\u0188\u0189\x03\x02\x02\x02\u0189\u018A\b\x1C" +
    "\x02\x02\u018A8\x03\x02\x02\x02\u018B\u019F\x07)\x02\x02\u018C\u018D\x07" +
    "^\x02\x02\u018D\u019E\x07^\x02\x02\u018E\u018F\x07^\x02\x02\u018F\u019E" +
    "\x05\x1D\x0F\x02\u0190\u0191\x07^\x02\x02\u0191\u019E\x05%\x13\x02\u0192" +
    "\u0193\x07^\x02\x02\u0193\u019E\x05)\x15\x02\u0194\u0195\x07^\x02\x02" +
    "\u0195\u019E\x05\x05\x03\x02\u0196\u0197\x07^\x02\x02\u0197\u019E\x05" +
    "\r\x07\x02\u0198\u0199\x07^\x02\x02\u0199\u019E\x07$\x02\x02\u019A\u019B" +
    "\x07^\x02\x02\u019B\u019E\x07)\x02\x02\u019C\u019E\n\x1D\x02\x02\u019D" +
    "\u018C\x03\x02\x02\x02\u019D\u018E\x03\x02\x02\x02\u019D\u0190\x03\x02" +
    "\x02\x02\u019D\u0192\x03\x02\x02\x02\u019D\u0194\x03\x02\x02\x02\u019D" +
    "\u0196\x03\x02\x02\x02\u019D\u0198\x03\x02\x02\x02\u019D\u019A\x03\x02" +
    "\x02\x02\u019D\u019C\x03\x02\x02\x02\u019E\u01A1\x03\x02\x02\x02\u019F" +
    "\u019D\x03\x02\x02\x02\u019F\u01A0\x03\x02\x02\x02\u01A0\u01A2\x03\x02" +
    "\x02\x02\u01A1\u019F\x03\x02\x02\x02\u01A2\u01A3\x07)\x02\x02\u01A3:\x03" +
    "\x02\x02\x02\u01A4\u01BC\x07)\x02\x02\u01A5\u01A6\x07^\x02\x02\u01A6\u01BB" +
    "\x07^\x02\x02\u01A7\u01A8\x07^\x02\x02\u01A8\u01BB\x07\'\x02\x02\u01A9" +
    "\u01AA\x07^\x02\x02\u01AA\u01BB\x07a\x02\x02\u01AB\u01AC\x07^\x02\x02" +
    "\u01AC\u01BB\x05\x1D\x0F\x02\u01AD\u01AE\x07^\x02\x02\u01AE\u01BB\x05" +
    "%\x13\x02\u01AF\u01B0\x07^\x02\x02\u01B0\u01BB\x05)\x15\x02\u01B1\u01B2" +
    "\x07^\x02\x02\u01B2\u01BB\x05\x05\x03\x02\u01B3\u01B4\x07^\x02\x02\u01B4" +
    "\u01BB\x05\r\x07\x02\u01B5\u01B6\x07^\x02\x02\u01B6\u01BB\x07$\x02\x02" +
    "\u01B7\u01B8\x07^\x02\x02\u01B8\u01BB\x07)\x02\x02\u01B9\u01BB\n\x1D\x02" +
    "\x02\u01BA\u01A5\x03\x02\x02\x02\u01BA\u01A7\x03\x02\x02\x02\u01BA\u01A9" +
    "\x03\x02\x02\x02\u01BA\u01AB\x03\x02\x02\x02\u01BA\u01AD\x03\x02\x02\x02" +
    "\u01BA\u01AF\x03\x02\x02\x02\u01BA\u01B1\x03\x02\x02\x02\u01BA\u01B3\x03" +
    "\x02\x02\x02\u01BA\u01B5\x03\x02\x02\x02\u01BA\u01B7\x03\x02\x02\x02\u01BA" +
    "\u01B9\x03\x02\x02\x02\u01BB\u01BE\x03\x02\x02\x02\u01BC\u01BA\x03\x02" +
    "\x02\x02\u01BC\u01BD\x03\x02\x02\x02\u01BD\u01BF\x03\x02\x02\x02\u01BE" +
    "\u01BC\x03\x02\x02\x02\u01BF\u01C0\x07)\x02\x02\u01C0<\x03\x02\x02\x02" +
    "\u01C1\u01C2\x05\x03\x02\x02\u01C2\u01C3\x05\x1D\x0F\x02\u01C3\u01C4\x05" +
    "\t\x05\x02\u01C4>\x03\x02\x02\x02\u01C5\u01C6\x05\x03\x02\x02\u01C6\u01C7" +
    "\x05\'\x14\x02\u01C7@\x03\x02\x02\x02\u01C8\u01C9\x05\x03\x02\x02\u01C9" +
    "\u01CA\x05\'\x14\x02\u01CA\u01CB\x05\x07\x04\x02\u01CBB\x03\x02\x02\x02" +
    "\u01CC\u01CD\x05\x05\x03\x02\u01CD\u01CE\x053\x1A\x02\u01CED\x03\x02\x02" +
    "\x02\u01CF\u01D0\x05\x07\x04\x02\u01D0\u01D1\x05+\x16\x02\u01D1\u01D2" +
    "\x05\x05\x03\x02\u01D2\u01D3\x05\v\x06\x02\u01D3F\x03\x02\x02\x02\u01D4" +
    "\u01D5\x05\t\x05\x02\u01D5\u01D6\x05\v\x06\x02\u01D6\u01D7\x05\'\x14\x02" +
    "\u01D7\u01D8\x05\x07\x04\x02\u01D8H\x03\x02\x02\x02\u01D9\u01DA\x05\v" +
    "\x06\x02\u01DA\u01DB\x05\x19\r\x02\u01DB\u01DC\x05\'\x14\x02\u01DC\u01DD" +
    "\x05\v\x06\x02\u01DDJ\x03\x02\x02\x02\u01DE\u01DF\x05\v\x06\x02\u01DF" +
    "\u01E0\x051\x19\x02\u01E0\u01E1\x05\x07\x04\x02\u01E1\u01E2\x05\x19\r" +
    "\x02\u01E2\u01E3\x05+\x16\x02\u01E3\u01E4\x05\t\x05\x02\u01E4\u01E5\x05" +
    "\v\x06\x02\u01E5\u01E6\x05\'\x14\x02\u01E6L\x03\x02\x02\x02\u01E7\u01E8" +
    "\x05\r\x07\x02\u01E8\u01E9\x05\x03\x02\x02\u01E9\u01EA\x05\x19\r\x02\u01EA" +
    "\u01EB\x05\'\x14\x02\u01EB\u01EC\x05\v\x06\x02\u01ECN\x03\x02\x02\x02" +
    "\u01ED\u01EE\x05\r\x07\x02\u01EE\u01EF\x05\x13\n\x02\u01EF\u01F0\x05%" +
    "\x13\x02\u01F0\u01F1\x05\'\x14\x02\u01F1\u01F2\x05)\x15\x02\u01F2P\x03" +
    "\x02\x02\x02\u01F3\u01F4\x05\r\x07\x02\u01F4\u01F5\x05%\x13\x02\u01F5" +
    "\u01F6\x05\x1F\x10\x02\u01F6\u01F7\x05\x1B\x0E\x02\u01F7R\x03\x02\x02" +
    "\x02\u01F8\u01F9\x05\x0F\b\x02\u01F9\u01FA\x05%\x13\x02\u01FA\u01FB\x05" +
    "\x1F\x10\x02\u01FB\u01FC\x05+\x16\x02\u01FC\u01FD\x05!\x11\x02\u01FDT" +
    "\x03\x02\x02\x02\u01FE\u01FF\x05\x11\t\x02\u01FF\u0200\x05\x03\x02\x02" +
    "\u0200\u0201\x05-\x17\x02\u0201\u0202\x05\x13\n\x02\u0202\u0203\x05\x1D" +
    "\x0F\x02\u0203\u0204\x05\x0F\b\x02\u0204V\x03\x02\x02\x02\u0205\u0206" +
    "\x05\x13\n\x02\u0206\u0207\x05\x1D\x0F\x02\u0207X\x03\x02\x02\x02\u0208" +
    "\u0209\x05\x13\n\x02\u0209\u020A\x05\x1D\x0F\x02\u020A\u020B\x05\x07\x04" +
    "\x02\u020B\u020C\x05\x19\r\x02\u020C\u020D\x05+\x16\x02\u020D\u020E\x05" +
    "\t\x05\x02\u020E\u020F\x05\v\x06\x02\u020F\u0210\x05\'\x14\x02\u0210Z" +
    "\x03\x02\x02\x02\u0211\u0212\x05\x19\r\x02\u0212\u0213\x05\x03\x02\x02" +
    "\u0213\u0214\x05\'\x14\x02\u0214\u0215\x05)\x15\x02\u0215\\\x03\x02\x02" +
    "\x02\u0216\u0217\x05\x19\r\x02\u0217\u0218\x05\x13\n\x02\u0218\u0219\x05" +
    "\x17\f\x02\u0219\u021A\x05\v\x06\x02\u021A^\x03\x02\x02\x02\u021B\u021C" +
    "\x05\x19\r\x02\u021C\u021D\x05\x13\n\x02\u021D\u021E\x05\x1B\x0E\x02\u021E" +
    "\u021F\x05\x13\n\x02\u021F\u0220\x05)\x15\x02\u0220`\x03\x02\x02\x02\u0221" +
    "\u0222\x05\x1D\x0F\x02\u0222\u0223\x05\x1F\x10\x02\u0223\u0224\x05)\x15" +
    "\x02\u0224b\x03\x02\x02\x02\u0225\u0226\x05\x1D\x0F\x02\u0226\u0227\x05" +
    "+\x16\x02\u0227\u0228\x05\x19\r\x02\u0228\u0229\x05\x19\r\x02\u0229d\x03" +
    "\x02\x02\x02\u022A\u022B\x05\x1D\x0F\x02\u022B\u022C\x05+\x16\x02\u022C" +
    "\u022D\x05\x19\r\x02\u022D\u022E\x05\x19\r\x02\u022E\u022F\x05\'\x14\x02" +
    "\u022Ff\x03\x02\x02\x02\u0230\u0231\x05\x1F\x10\x02\u0231\u0232\x05%\x13" +
    "\x02\u0232h\x03\x02\x02\x02\u0233\u0234\x05%\x13\x02\u0234\u0235\x05\x1F" +
    "\x10\x02\u0235\u0236\x05\x19\r\x02\u0236\u0237\x05\x19\r\x02\u0237\u0238" +
    "\x05+\x16\x02\u0238\u0239\x05!\x11\x02\u0239j\x03\x02\x02\x02\u023A\u023B" +
    "\x05\'\x14\x02\u023B\u023C\x05\v\x06\x02\u023C\u023D\x05\x19\r\x02\u023D" +
    "\u023E\x05\v\x06\x02\u023E\u023F\x05\x07\x04\x02\u023F\u0240\x05)\x15" +
    "\x02\u0240l\x03\x02\x02\x02\u0241\u0242\x05)\x15\x02\u0242\u0243\x05%" +
    "\x13\x02\u0243\u0244\x05+\x16\x02\u0244\u0245\x05\v\x06\x02\u0245n\x03" +
    "\x02\x02\x02\u0246\u0247\x05+\x16\x02\u0247\u0248\x05\'\x14\x02\u0248" +
    "\u0249\x05\x13\n\x02\u0249\u024A\x05\x1D\x0F\x02\u024A\u024B\x05\x0F\b" +
    "\x02\u024Bp\x03\x02\x02\x02\u024C\u024D\x05/\x18\x02\u024D\u024E\x05\x11" +
    "\t\x02\u024E\u024F\x05\v\x06\x02\u024F\u0250\x05%\x13\x02\u0250\u0251" +
    "\x05\v\x06\x02\u0251r\x03\x02\x02\x02\u0252\u0253\x05/\x18\x02\u0253\u0254" +
    "\x05\x13\n\x02\u0254\u0255\x05)\x15\x02\u0255\u0256\x05\x11\t\x02\u0256" +
    "t\x03\x02\x02\x02\u0257\u0258\x05\r\x07\x02\u0258\u0259\x05\x1F\x10\x02" +
    "\u0259\u025A\x05%\x13\x02\u025Av\x03\x02\x02\x02\u025B\u025C\x05+\x16" +
    "\x02\u025C\u025D\x05!\x11\x02\u025D\u025E\x05\t\x05\x02\u025E\u025F\x05" +
    "\x03\x02\x02\u025F\u0260\x05)\x15\x02\u0260\u0261\x05\v\x06\x02\u0261" +
    "x\x03\x02\x02\x02\u0262\u0263\x05\x03\x02\x02\u0263\u0264\x05\x05\x03" +
    "\x02\u0264\u0265\x05\x1F\x10\x02\u0265\u0266\x05-\x17\x02\u0266\u0267" +
    "\x05\v\x06\x02\u0267z\x03\x02\x02\x02\u0268\u0269\x05\x03\x02\x02\u0269" +
    "\u026A\x05\x05\x03\x02\u026A\u026B\x05\x1F\x10\x02\u026B\u026C\x05-\x17" +
    "\x02\u026C\u026D\x05\v\x06\x02\u026D\u026E\x07a\x02\x02\u026E\u026F\x05" +
    "\x1F\x10\x02\u026F\u0270\x05%\x13\x02\u0270\u0271\x07a\x02\x02\u0271\u0272" +
    "\x05\x05\x03\x02\u0272\u0273\x05\v\x06\x02\u0273\u0274\x05\x19\r\x02\u0274" +
    "\u0275\x05\x1F\x10\x02\u0275\u0276\x05/\x18\x02\u0276|\x03\x02\x02\x02" +
    "\u0277\u0278\x05\x03\x02\x02\u0278\u0279\x05)\x15\x02\u0279~\x03\x02\x02" +
    "\x02\u027A\u027B\x05\x05\x03\x02\u027B\u027C\x05\v\x06\x02\u027C\u027D" +
    "\x05\x19\r\x02\u027D\u027E\x05\x1F\x10\x02\u027E\u027F\x05/\x18\x02\u027F" +
    "\x80\x03\x02\x02\x02\u0280\u0281\x05\x07\x04\x02\u0281\u0282\x05\x03\x02" +
    "\x02\u0282\u0283\x05)\x15\x02\u0283\u0284\x05\v\x06\x02\u0284\u0285\x05" +
    "\x0F\b\x02\u0285\u0286\x05\x1F\x10\x02\u0286\u0287\x05%\x13\x02\u0287" +
    "\u0288\x053\x1A\x02\u0288\x82\x03\x02\x02\x02\u0289\u028A\x05\t\x05\x02" +
    "\u028A\u028B\x05\x03\x02\x02\u028B\u028C\x05)\x15\x02\u028C\u028D\x05" +
    "\x03\x02\x02\u028D\x84\x03\x02\x02\x02\u028E\u028F\x05\v\x06\x02\u028F" +
    "\u0290\x05\x1D\x0F\x02\u0290\u0291\x05\t\x05\x02\u0291\x86\x03\x02\x02" +
    "\x02\u0292\u0293\x05\x1F\x10\x02\u0293\u0294\x05\r\x07\x02\u0294\u0295" +
    "\x05\r\x07\x02\u0295\u0296\x05\'\x14\x02\u0296\u0297\x05\v\x06\x02\u0297" +
    "\u0298\x05)\x15\x02\u0298\x88\x03\x02\x02\x02\u0299\u029A\x05\x1F\x10" +
    "\x02\u029A\u029B\x05%\x13\x02\u029B\u029C\x05\t\x05\x02\u029C\u029D\x05" +
    "\v\x06\x02\u029D\u029E\x05%\x13\x02\u029E\x8A\x03\x02\x02\x02\u029F\u02A0" +
    "\x05%\x13\x02\u02A0\u02A1\x05\v\x06\x02\u02A1\u02A2\x05\r\x07\x02\u02A2" +
    "\u02A3\x05\v\x06\x02\u02A3\u02A4\x05%\x13\x02\u02A4\u02A5\x05\v\x06\x02" +
    "\u02A5\u02A6\x05\x1D\x0F\x02\u02A6\u02A7\x05\x07\x04\x02\u02A7\u02A8\x05" +
    "\v\x06\x02\u02A8\x8C\x03\x02\x02\x02\u02A9\u02AA\x05\'\x14\x02\u02AA\u02AB" +
    "\x05\x07\x04\x02\u02AB\u02AC\x05\x1F\x10\x02\u02AC\u02AD\x05!\x11\x02" +
    "\u02AD\u02AE\x05\v\x06\x02\u02AE\x8E\x03\x02\x02\x02\u02AF\u02B0\x05)" +
    "\x15\x02\u02B0\u02B1\x05%\x13\x02\u02B1\u02B2\x05\x03\x02\x02\u02B2\u02B3" +
    "\x05\x07\x04\x02\u02B3\u02B4\x05\x17\f\x02\u02B4\u02B5\x05\x13\n\x02\u02B5" +
    "\u02B6\x05\x1D\x0F\x02\u02B6\u02B7\x05\x0F\b\x02\u02B7\x90\x03\x02\x02" +
    "\x02\u02B8\u02B9\x05)\x15\x02\u02B9\u02BA\x05\x11\t\x02\u02BA\u02BB\x05" +
    "\v\x06\x02\u02BB\u02BC\x05\x1D\x0F\x02\u02BC\x92\x03\x02\x02\x02\u02BD" +
    "\u02BE\x05)\x15\x02\u02BE\u02BF\x053\x1A\x02\u02BF\u02C0\x05!\x11\x02" +
    "\u02C0\u02C1\x05\v\x06\x02\u02C1\u02C2\x05\x1F\x10\x02\u02C2\u02C3\x05" +
    "\r\x07\x02\u02C3\x94\x03\x02\x02\x02\u02C4\u02C5\x05-\x17\x02\u02C5\u02C6" +
    "\x05\x13\n\x02\u02C6\u02C7\x05\v\x06\x02\u02C7\u02C8\x05/\x18\x02\u02C8" +
    "\x96\x03\x02\x02\x02\u02C9\u02CA\x05-\x17\x02\u02CA\u02CB\x05\x13\n\x02" +
    "\u02CB\u02CC\x05\v\x06\x02\u02CC\u02CD\x05/\x18\x02\u02CD\u02CE\x05\'" +
    "\x14\x02\u02CE\u02CF\x05)\x15\x02\u02CF\u02D0\x05\x03\x02\x02\u02D0\u02D1" +
    "\x05)\x15\x02\u02D1\x98\x03\x02\x02\x02\u02D2\u02D3\x05/\x18\x02\u02D3" +
    "\u02D4\x05\x11\t\x02\u02D4\u02D5\x05\v\x06\x02\u02D5\u02D6\x05\x1D\x0F" +
    "\x02\u02D6\x9A\x03\x02\x02\x02\u02D7\u02D8\x05\'\x14\x02\u02D8\u02D9\x05" +
    "\v\x06\x02\u02D9\u02DA\x05\x07\x04\x02\u02DA\u02DB\x05+\x16\x02\u02DB" +
    "\u02DC\x05%\x13\x02\u02DC\u02DD\x05\x13\n\x02\u02DD\u02DE\x05)\x15\x02" +
    "\u02DE\u02DF\x053\x1A\x02\u02DF\u02E0\x07a\x02\x02\u02E0\u02E1\x05\v\x06" +
    "\x02\u02E1\u02E2\x05\x1D\x0F\x02\u02E2\u02E3\x05\r\x07\x02\u02E3\u02E4" +
    "\x05\x1F\x10\x02\u02E4\u02E5\x05%\x13\x02\u02E5\u02E6\x05\x07\x04\x02" +
    "\u02E6\u02E7\x05\v\x06\x02\u02E7\u02E8\x05\t\x05\x02\u02E8\x9C\x03\x02" +
    "\x02\x02\u02E9\u02EA\x05\x07\x04\x02\u02EA\u02EB\x05\x03\x02\x02\u02EB" +
    "\u02EC\x05\x19\r\x02\u02EC\u02ED\x05\v\x06\x02\u02ED\u02EE\x05\x1D\x0F" +
    "\x02\u02EE\u02EF\x05\t\x05\x02\u02EF\u02F0\x05\x03\x02\x02\u02F0\u02F1" +
    "\x05%\x13\x02\u02F1\u02F2\x07a\x02\x02\u02F2\u02F3\x05\x1B\x0E\x02\u02F3" +
    "\u02F4\x05\x1F\x10\x02\u02F4\u02F5\x05\x1D\x0F\x02\u02F5\u02F6\x05)\x15" +
    "\x02\u02F6\u02F7\x05\x11\t\x02\u02F7\x9E\x03\x02\x02\x02\u02F8\u02F9\x05" +
    "\x07\x04\x02\u02F9\u02FA\x05\x03\x02\x02\u02FA\u02FB\x05\x19\r\x02\u02FB" +
    "\u02FC\x05\v\x06\x02\u02FC\u02FD\x05\x1D\x0F\x02\u02FD\u02FE\x05\t\x05" +
    "\x02\u02FE\u02FF\x05\x03\x02\x02\u02FF\u0300\x05%\x13\x02\u0300\u0301" +
    "\x07a\x02\x02\u0301\u0302\x05#\x12\x02\u0302\u0303\x05+\x16\x02\u0303" +
    "\u0304\x05\x03\x02\x02\u0304\u0305\x05%\x13\x02\u0305\u0306\x05)\x15\x02" +
    "\u0306\u0307\x05\v\x06\x02\u0307\u0308\x05%\x13\x02\u0308\xA0\x03\x02" +
    "\x02\x02\u0309\u030A\x05\x07\x04\x02\u030A\u030B\x05\x03\x02\x02\u030B" +
    "\u030C\x05\x19\r\x02\u030C\u030D\x05\v\x06\x02\u030D\u030E\x05\x1D\x0F" +
    "\x02\u030E\u030F\x05\t\x05\x02\u030F\u0310\x05\x03\x02\x02\u0310\u0311" +
    "\x05%\x13\x02\u0311\u0312\x07a\x02\x02\u0312\u0313\x053\x1A\x02\u0313" +
    "\u0314\x05\v\x06\x02\u0314\u0315\x05\x03\x02\x02\u0315\u0316\x05%\x13" +
    "\x02\u0316\xA2\x03\x02\x02\x02\u0317\u0318\x05\t\x05\x02\u0318\u0319\x05" +
    "\x03\x02\x02\u0319\u031A\x053\x1A\x02\u031A\u031B\x07a\x02\x02\u031B\u031C" +
    "\x05\x13\n\x02\u031C\u031D\x05\x1D\x0F\x02\u031D\u031E\x07a\x02\x02\u031E" +
    "\u031F\x05\x1B\x0E\x02\u031F\u0320\x05\x1F\x10\x02\u0320\u0321\x05\x1D" +
    "\x0F\x02\u0321\u0322\x05)\x15\x02\u0322\u0323\x05\x11\t\x02\u0323\xA4" +
    "\x03\x02\x02\x02\u0324\u0325\x05\t\x05\x02\u0325\u0326\x05\x03\x02\x02" +
    "\u0326\u0327\x053\x1A\x02\u0327\u0328\x07a\x02\x02\u0328\u0329\x05\x13" +
    "\n\x02\u0329\u032A\x05\x1D\x0F\x02\u032A\u032B\x07a\x02\x02\u032B\u032C" +
    "\x05/\x18\x02\u032C\u032D\x05\v\x06\x02\u032D\u032E\x05\v\x06\x02\u032E" +
    "\u032F\x05\x17\f\x02\u032F\xA6\x03\x02\x02\x02\u0330\u0331\x05\t\x05\x02" +
    "\u0331\u0332\x05\x03\x02\x02\u0332\u0333\x053\x1A\x02\u0333\u0334\x07" +
    "a\x02\x02\u0334\u0335\x05\x13\n\x02\u0335\u0336\x05\x1D\x0F\x02\u0336" +
    "\u0337\x07a\x02\x02\u0337\u0338\x053\x1A\x02\u0338\u0339\x05\v\x06\x02" +
    "\u0339\u033A\x05\x03\x02\x02\u033A\u033B\x05%\x13\x02\u033B\xA8\x03\x02" +
    "\x02\x02\u033C\u033D\x05\t\x05\x02\u033D\u033E\x05\x03\x02\x02\u033E\u033F" +
    "\x053\x1A\x02\u033F\u0340\x07a\x02\x02\u0340\u0341\x05\x1F\x10\x02\u0341" +
    "\u0342\x05\x1D\x0F\x02\u0342\u0343\x05\x19\r\x02\u0343\u0344\x053\x1A" +
    "\x02\u0344\xAA\x03\x02\x02\x02\u0345\u0346\x05\r\x07\x02\u0346\u0347\x05" +
    "\x13\n\x02\u0347\u0348\x05\'\x14\x02\u0348\u0349\x05\x07\x04\x02\u0349" +
    "\u034A\x05\x03\x02\x02\u034A\u034B\x05\x19\r\x02\u034B\u034C\x07a\x02" +
    "\x02\u034C\u034D\x05\x1B\x0E\x02\u034D\u034E\x05\x1F\x10\x02\u034E\u034F" +
    "\x05\x1D\x0F\x02\u034F\u0350\x05)\x15\x02\u0350\u0351\x05\x11\t\x02\u0351" +
    "\xAC\x03\x02\x02\x02\u0352\u0353\x05\r\x07\x02\u0353\u0354\x05\x13\n\x02" +
    "\u0354\u0355\x05\'\x14\x02\u0355\u0356\x05\x07\x04\x02\u0356\u0357\x05" +
    "\x03\x02\x02\u0357\u0358\x05\x19\r\x02\u0358\u0359\x07a\x02\x02\u0359" +
    "\u035A\x05#\x12\x02\u035A\u035B\x05+\x16\x02\u035B\u035C\x05\x03\x02\x02" +
    "\u035C\u035D\x05%\x13\x02\u035D\u035E\x05)\x15\x02\u035E\u035F\x05\v\x06" +
    "\x02\u035F\u0360\x05%\x13\x02\u0360\xAE\x03\x02\x02\x02\u0361\u0362\x05" +
    "\r\x07\x02\u0362\u0363\x05\x13\n\x02\u0363\u0364\x05\'\x14\x02\u0364\u0365" +
    "\x05\x07\x04\x02\u0365\u0366\x05\x03\x02\x02\u0366\u0367\x05\x19\r\x02" +
    "\u0367\u0368\x07a\x02\x02\u0368\u0369\x053\x1A\x02\u0369\u036A\x05\v\x06" +
    "\x02\u036A\u036B\x05\x03\x02\x02\u036B\u036C\x05%\x13\x02\u036C\xB0\x03" +
    "\x02\x02\x02\u036D\u036E\x05\x11\t\x02\u036E\u036F\x05\x1F\x10\x02\u036F" +
    "\u0370\x05+\x16\x02\u0370\u0371\x05%\x13\x02\u0371\u0372\x07a\x02\x02" +
    "\u0372\u0373\x05\x13\n\x02\u0373\u0374\x05\x1D\x0F\x02\u0374\u0375\x07" +
    "a\x02\x02\u0375\u0376\x05\t\x05\x02\u0376\u0377\x05\x03\x02\x02\u0377" +
    "\u0378\x053\x1A\x02\u0378\xB2\x03\x02\x02\x02\u0379\u037A\x05/\x18\x02" +
    "\u037A\u037B\x05\v\x06\x02\u037B\u037C\x05\v\x06\x02\u037C\u037D\x05\x17" +
    "\f\x02\u037D\u037E\x07a\x02\x02\u037E\u037F\x05\x13\n\x02\u037F\u0380" +
    "\x05\x1D\x0F\x02\u0380\u0381\x07a\x02\x02\u0381\u0382\x05\x1B\x0E\x02" +
    "\u0382\u0383\x05\x1F\x10\x02\u0383\u0384\x05\x1D\x0F\x02\u0384\u0385\x05" +
    ")\x15\x02\u0385\u0386\x05\x11\t\x02\u0386\xB4\x03\x02\x02\x02\u0387\u0388" +
    "\x05/\x18\x02\u0388\u0389\x05\v\x06\x02\u0389\u038A\x05\v\x06\x02\u038A" +
    "\u038B\x05\x17\f\x02\u038B\u038C\x07a\x02\x02\u038C\u038D\x05\x13\n\x02" +
    "\u038D\u038E\x05\x1D\x0F\x02\u038E\u038F\x07a\x02\x02\u038F\u0390\x05" +
    "3\x1A\x02\u0390\u0391\x05\v\x06\x02\u0391\u0392\x05\x03\x02\x02\u0392" +
    "\u0393\x05%\x13\x02\u0393\xB6\x03\x02\x02\x02\u0394\u0395\x05\x03\x02" +
    "\x02\u0395\u0396\x05-\x17\x02\u0396\u0397\x05\x0F\b\x02\u0397\xB8\x03" +
    "\x02\x02\x02\u0398\u0399\x05\x07\x04\x02\u0399\u039A\x05\x1F\x10\x02\u039A" +
    "\u039B\x05+\x16\x02\u039B\u039C\x05\x1D\x0F\x02\u039C\u039D\x05)\x15\x02" +
    "\u039D\xBA\x03\x02\x02\x02\u039E\u039F\x05\x07\x04\x02\u039F\u03A0\x05" +
    "\x1F\x10\x02\u03A0\u03A1\x05+\x16\x02\u03A1\u03A2\x05\x1D\x0F\x02\u03A2" +
    "\u03A3\x05)\x15\x02\u03A3\u03A4\x07a\x02\x02\u03A4\u03A5\x05\t\x05\x02" +
    "\u03A5\u03A6\x05\x13\n\x02\u03A6\u03A7\x05\'\x14\x02\u03A7\u03A8\x05)" +
    "\x15\x02\u03A8\u03A9\x05\x13\n\x02\u03A9\u03AA\x05\x1D\x0F\x02\u03AA\u03AB" +
    "\x05\x07\x04\x02\u03AB\u03AC\x05)\x15\x02\u03AC\xBC\x03\x02\x02\x02\u03AD" +
    "\u03AE\x05\x1B\x0E\x02\u03AE\u03AF\x05\x13\n\x02\u03AF\u03B0\x05\x1D\x0F" +
    "\x02\u03B0\xBE\x03\x02\x02\x02\u03B1\u03B2\x05\x1B\x0E\x02\u03B2\u03B3" +
    "\x05\x03\x02\x02\u03B3\u03B4\x051\x19\x02\u03B4\xC0\x03\x02\x02\x02\u03B5" +
    "\u03B6\x05\'\x14\x02\u03B6\u03B7\x05+\x16\x02\u03B7\u03B8\x05\x1B\x0E" +
    "\x02\u03B8\xC2\x03\x02\x02\x02\u03B9\u03BA\x05\t\x05\x02\u03BA\u03BB\x05" +
    "\x13\n\x02\u03BB\u03BC\x05\'\x14\x02\u03BC\u03BD\x05)\x15\x02\u03BD\u03BE" +
    "\x05\x03\x02\x02\u03BE\u03BF\x05\x1D\x0F\x02\u03BF\u03C0\x05\x07\x04\x02" +
    "\u03C0\u03C1\x05\v\x06\x02\u03C1\xC4\x03\x02\x02\x02\u03C2\u03C3\x05\x0F" +
    "\b\x02\u03C3\u03C4\x05\v\x06\x02\u03C4\u03C5\x05\x1F\x10\x02\u03C5\u03C6" +
    "\x05\x19\r\x02";
SOQLLexer._serializedATNSegment2 = "\u03C6\u03C7\x05\x1F\x10\x02\u03C7\u03C8\x05\x07\x04\x02\u03C8\u03C9\x05" +
    "\x03\x02\x02\u03C9\u03CA\x05)\x15\x02\u03CA\u03CB\x05\x13\n\x02\u03CB" +
    "\u03CC\x05\x1F\x10\x02\u03CC\u03CD\x05\x1D\x0F\x02\u03CD\xC6\x03\x02\x02" +
    "\x02\u03CE\u03CF\x05\r\x07\x02\u03CF\u03D0\x05\x1F\x10\x02\u03D0\u03D1" +
    "\x05%\x13\x02\u03D1\u03D2\x05\x1B\x0E\x02\u03D2\u03D3\x05\x03\x02\x02" +
    "\u03D3\u03D4\x05)\x15\x02\u03D4\xC8\x03\x02\x02\x02\u03D5\u03D6\x05)\x15" +
    "\x02\u03D6\u03D7\x05\x1F\x10\x02\u03D7\u03D8\x05\x19\r\x02\u03D8\u03D9" +
    "\x05\x03\x02\x02\u03D9\u03DA\x05\x05\x03\x02\u03DA\u03DB\x05\v\x06\x02" +
    "\u03DB\u03DC\x05\x19\r\x02\u03DC\xCA\x03\x02\x02\x02\u03DD\u03DE\x05\x07" +
    "\x04\x02\u03DE\u03DF\x05\x1F\x10\x02\u03DF\u03E0\x05\x1D\x0F\x02\u03E0" +
    "\u03E1\x05-\x17\x02\u03E1\u03E2\x05\v\x06\x02\u03E2\u03E3\x05%\x13\x02" +
    "\u03E3\u03E4\x05)\x15\x02\u03E4\u03E5\x05)\x15\x02\u03E5\u03E6\x05\x13" +
    "\n\x02\u03E6\u03E7\x05\x1B\x0E\x02\u03E7\u03E8\x05\v\x06\x02\u03E8\u03E9" +
    "\x055\x1B\x02\u03E9\u03EA\x05\x1F\x10\x02\u03EA\u03EB\x05\x1D\x0F\x02" +
    "\u03EB\u03EC\x05\v\x06\x02\u03EC\xCC\x03\x02\x02\x02\u03ED\u03EE\x05\x07" +
    "\x04\x02\u03EE\u03EF\x05\x1F\x10\x02\u03EF\u03F0\x05\x1D\x0F\x02\u03F0" +
    "\u03F1\x05-\x17\x02\u03F1\u03F2\x05\v\x06\x02\u03F2\u03F3\x05%\x13\x02" +
    "\u03F3\u03F4\x05)\x15\x02\u03F4\u03F5\x05\x07\x04\x02\u03F5\u03F6\x05" +
    "+\x16\x02\u03F6\u03F7\x05%\x13\x02\u03F7\u03F8\x05%\x13\x02\u03F8\u03F9" +
    "\x05\v\x06\x02\u03F9\u03FA\x05\x1D\x0F\x02\u03FA\u03FB\x05\x07\x04\x02" +
    "\u03FB\u03FC\x053\x1A\x02\u03FC\xCE\x03\x02\x02\x02\u03FD\u03FE\x05\x0F" +
    "\b\x02\u03FE\u03FF\x05%\x13\x02\u03FF\u0400\x05\x1F\x10\x02\u0400\u0401" +
    "\x05+\x16\x02\u0401\u0402\x05!\x11\x02\u0402\u0403\x05\x13\n\x02\u0403" +
    "\u0404\x05\x1D\x0F\x02\u0404\u0405\x05\x0F\b\x02\u0405\xD0\x03\x02\x02" +
    "\x02\u0406\u0407\x053\x1A\x02\u0407\u0408\x05\v\x06\x02\u0408\u0409\x05" +
    "\'\x14\x02\u0409\u040A\x05)\x15\x02\u040A\u040B\x05\v\x06\x02\u040B\u040C" +
    "\x05%\x13\x02\u040C\u040D\x05\t\x05\x02\u040D\u040E\x05\x03\x02\x02\u040E" +
    "\u040F\x053\x1A\x02\u040F\xD2\x03\x02\x02\x02\u0410\u0411\x05)\x15\x02" +
    "\u0411\u0412\x05\x1F\x10\x02\u0412\u0413\x05\t\x05\x02\u0413\u0414\x05" +
    "\x03\x02\x02\u0414\u0415\x053\x1A\x02\u0415\xD4\x03\x02\x02\x02\u0416" +
    "\u0417\x05)\x15\x02\u0417\u0418\x05\x1F\x10\x02\u0418\u0419\x05\x1B\x0E" +
    "\x02\u0419\u041A\x05\x1F\x10\x02\u041A\u041B\x05%\x13\x02\u041B\u041C" +
    "\x05%\x13\x02\u041C\u041D\x05\x1F\x10\x02\u041D\u041E\x05/\x18\x02\u041E" +
    "\xD6\x03\x02\x02\x02\u041F\u0420\x05\x19\r\x02\u0420\u0421\x05\x03\x02" +
    "\x02\u0421\u0422\x05\'\x14\x02\u0422\u0423\x05)\x15\x02\u0423\u0424\x07" +
    "a\x02\x02\u0424\u0425\x05/\x18\x02\u0425\u0426\x05\v\x06\x02\u0426\u0427" +
    "\x05\v\x06\x02\u0427\u0428\x05\x17\f\x02\u0428\xD8\x03\x02\x02\x02\u0429" +
    "\u042A\x05)\x15\x02\u042A\u042B\x05\x11\t\x02\u042B\u042C\x05\x13\n\x02" +
    "\u042C\u042D\x05\'\x14\x02\u042D\u042E\x07a\x02\x02\u042E\u042F\x05/\x18" +
    "\x02\u042F\u0430\x05\v\x06\x02\u0430\u0431\x05\v\x06\x02\u0431\u0432\x05" +
    "\x17\f\x02\u0432\xDA\x03\x02\x02\x02\u0433\u0434\x05\x1D\x0F\x02\u0434" +
    "\u0435\x05\v\x06\x02\u0435\u0436\x051\x19\x02\u0436\u0437\x05)\x15\x02" +
    "\u0437\u0438\x07a\x02\x02\u0438\u0439\x05/\x18\x02\u0439\u043A\x05\v\x06" +
    "\x02\u043A\u043B\x05\v\x06\x02\u043B\u043C\x05\x17\f\x02\u043C\xDC\x03" +
    "\x02\x02\x02\u043D\u043E\x05\x19\r\x02\u043E\u043F\x05\x03\x02\x02\u043F" +
    "\u0440\x05\'\x14\x02\u0440\u0441\x05)\x15\x02\u0441\u0442\x07a\x02\x02" +
    "\u0442\u0443\x05\x1B\x0E\x02\u0443\u0444\x05\x1F\x10\x02\u0444\u0445\x05" +
    "\x1D\x0F\x02\u0445\u0446\x05)\x15\x02\u0446\u0447\x05\x11\t\x02\u0447" +
    "\xDE\x03\x02\x02\x02\u0448\u0449\x05)\x15\x02\u0449\u044A\x05\x11\t\x02" +
    "\u044A\u044B\x05\x13\n\x02\u044B\u044C\x05\'\x14\x02\u044C\u044D\x07a" +
    "\x02\x02\u044D\u044E\x05\x1B\x0E\x02\u044E\u044F\x05\x1F\x10\x02\u044F" +
    "\u0450\x05\x1D\x0F\x02\u0450\u0451\x05)\x15\x02\u0451\u0452\x05\x11\t" +
    "\x02\u0452\xE0\x03\x02\x02\x02\u0453\u0454\x05\x1D\x0F\x02\u0454\u0455" +
    "\x05\v\x06\x02\u0455\u0456\x051\x19\x02\u0456\u0457\x05)\x15\x02\u0457" +
    "\u0458\x07a\x02\x02\u0458\u0459\x05\x1B\x0E\x02\u0459\u045A\x05\x1F\x10" +
    "\x02\u045A\u045B\x05\x1D\x0F\x02\u045B\u045C\x05)\x15\x02\u045C\u045D" +
    "\x05\x11\t\x02\u045D\xE2\x03\x02\x02\x02\u045E\u045F\x05\x19\r\x02\u045F" +
    "\u0460\x05\x03\x02\x02\u0460\u0461\x05\'\x14\x02\u0461\u0462\x05)\x15" +
    "\x02\u0462\u0463\x07a\x02\x02\u0463\u0464\x07;\x02\x02\u0464\u0465\x07" +
    "2\x02\x02\u0465\u0466\x07a\x02\x02\u0466\u0467\x05\t\x05\x02\u0467\u0468" +
    "\x05\x03\x02\x02\u0468\u0469\x053\x1A\x02\u0469\u046A\x05\'\x14\x02\u046A" +
    "\xE4\x03\x02\x02\x02\u046B\u046C\x05\x1D\x0F\x02\u046C\u046D\x05\v\x06" +
    "\x02\u046D\u046E\x051\x19\x02\u046E\u046F\x05)\x15\x02\u046F\u0470\x07" +
    "a\x02\x02\u0470\u0471\x07;\x02\x02\u0471\u0472\x072\x02\x02\u0472\u0473" +
    "\x07a\x02\x02\u0473\u0474\x05\t\x05\x02\u0474\u0475\x05\x03\x02\x02\u0475" +
    "\u0476\x053\x1A\x02\u0476\u0477\x05\'\x14\x02\u0477\xE6\x03\x02\x02\x02" +
    "\u0478\u0479\x05)\x15\x02\u0479\u047A\x05\x11\t\x02\u047A\u047B\x05\x13" +
    "\n\x02\u047B\u047C\x05\'\x14\x02\u047C\u047D\x07a\x02\x02\u047D\u047E" +
    "\x05#\x12\x02\u047E\u047F\x05+\x16\x02\u047F\u0480\x05\x03\x02\x02\u0480" +
    "\u0481\x05%\x13\x02\u0481\u0482\x05)\x15\x02\u0482\u0483\x05\v\x06\x02" +
    "\u0483\u0484\x05%\x13\x02\u0484\xE8\x03\x02\x02\x02\u0485\u0486\x05\x19" +
    "\r\x02\u0486\u0487\x05\x03\x02\x02\u0487\u0488\x05\'\x14\x02\u0488\u0489" +
    "\x05)\x15\x02\u0489\u048A\x07a\x02\x02\u048A\u048B\x05#\x12\x02\u048B" +
    "\u048C\x05+\x16\x02\u048C\u048D\x05\x03\x02\x02\u048D\u048E\x05%\x13\x02" +
    "\u048E\u048F\x05)\x15\x02\u048F\u0490\x05\v\x06\x02\u0490\u0491\x05%\x13" +
    "\x02\u0491\xEA\x03\x02\x02\x02\u0492\u0493\x05\x1D\x0F\x02\u0493\u0494" +
    "\x05\v\x06\x02\u0494\u0495\x051\x19\x02\u0495\u0496\x05)\x15\x02\u0496" +
    "\u0497\x07a\x02\x02\u0497\u0498\x05#\x12\x02\u0498\u0499\x05+\x16\x02" +
    "\u0499\u049A\x05\x03\x02\x02\u049A\u049B\x05%\x13\x02\u049B\u049C\x05" +
    ")\x15\x02\u049C\u049D\x05\v\x06\x02\u049D\u049E\x05%\x13\x02\u049E\xEC" +
    "\x03\x02\x02\x02\u049F\u04A0\x05)\x15\x02\u04A0\u04A1\x05\x11\t\x02\u04A1" +
    "\u04A2\x05\x13\n\x02\u04A2\u04A3\x05\'\x14\x02\u04A3\u04A4\x07a\x02\x02" +
    "\u04A4\u04A5\x053\x1A\x02\u04A5\u04A6\x05\v\x06\x02\u04A6\u04A7\x05\x03" +
    "\x02\x02\u04A7\u04A8\x05%\x13\x02\u04A8\xEE\x03\x02\x02\x02\u04A9\u04AA" +
    "\x05\x19\r\x02\u04AA\u04AB\x05\x03\x02\x02\u04AB\u04AC\x05\'\x14\x02\u04AC" +
    "\u04AD\x05)\x15\x02\u04AD\u04AE\x07a\x02\x02\u04AE\u04AF\x053\x1A\x02" +
    "\u04AF\u04B0\x05\v\x06\x02\u04B0\u04B1\x05\x03\x02\x02\u04B1\u04B2\x05" +
    "%\x13\x02\u04B2\xF0\x03\x02\x02\x02\u04B3\u04B4\x05\x1D\x0F\x02\u04B4" +
    "\u04B5\x05\v\x06\x02\u04B5\u04B6\x051\x19\x02\u04B6\u04B7\x05)\x15\x02" +
    "\u04B7\u04B8\x07a\x02\x02\u04B8\u04B9\x053\x1A\x02\u04B9\u04BA\x05\v\x06" +
    "\x02\u04BA\u04BB\x05\x03\x02\x02\u04BB\u04BC\x05%\x13\x02\u04BC\xF2\x03" +
    "\x02\x02\x02\u04BD\u04BE\x05)\x15\x02\u04BE\u04BF\x05\x11\t\x02\u04BF" +
    "\u04C0\x05\x13\n\x02\u04C0\u04C1\x05\'\x14\x02\u04C1\u04C2\x07a\x02\x02" +
    "\u04C2\u04C3\x05\r\x07\x02\u04C3\u04C4\x05\x13\n\x02\u04C4\u04C5\x05\'" +
    "\x14\x02\u04C5\u04C6\x05\x07\x04\x02\u04C6\u04C7\x05\x03\x02\x02\u04C7" +
    "\u04C8\x05\x19\r\x02\u04C8\u04C9\x07a\x02\x02\u04C9\u04CA\x05#\x12\x02" +
    "\u04CA\u04CB\x05+\x16\x02\u04CB\u04CC\x05\x03\x02\x02\u04CC\u04CD\x05" +
    "%\x13\x02\u04CD\u04CE\x05)\x15\x02\u04CE\u04CF\x05\v\x06\x02\u04CF\u04D0" +
    "\x05%\x13\x02\u04D0\xF4\x03\x02\x02\x02\u04D1\u04D2\x05\x19\r\x02\u04D2" +
    "\u04D3\x05\x03\x02\x02\u04D3\u04D4\x05\'\x14\x02\u04D4\u04D5\x05)\x15" +
    "\x02\u04D5\u04D6\x07a\x02\x02\u04D6\u04D7\x05\r\x07\x02\u04D7\u04D8\x05" +
    "\x13\n\x02\u04D8\u04D9\x05\'\x14\x02\u04D9\u04DA\x05\x07\x04\x02\u04DA" +
    "\u04DB\x05\x03\x02\x02\u04DB\u04DC\x05\x19\r\x02\u04DC\u04DD\x07a\x02" +
    "\x02\u04DD\u04DE\x05#\x12\x02\u04DE\u04DF\x05+\x16\x02\u04DF\u04E0\x05" +
    "\x03\x02\x02\u04E0\u04E1\x05%\x13\x02\u04E1\u04E2\x05)\x15\x02\u04E2\u04E3" +
    "\x05\v\x06\x02\u04E3\u04E4\x05%\x13\x02\u04E4\xF6\x03\x02\x02\x02\u04E5" +
    "\u04E6\x05\x1D\x0F\x02\u04E6\u04E7\x05\v\x06\x02\u04E7\u04E8\x051\x19" +
    "\x02\u04E8\u04E9\x05)\x15\x02\u04E9\u04EA\x07a\x02\x02\u04EA\u04EB\x05" +
    "\r\x07\x02\u04EB\u04EC\x05\x13\n\x02\u04EC\u04ED\x05\'\x14\x02\u04ED\u04EE" +
    "\x05\x07\x04\x02\u04EE\u04EF\x05\x03\x02\x02\u04EF\u04F0\x05\x19\r\x02" +
    "\u04F0\u04F1\x07a\x02\x02\u04F1\u04F2\x05#\x12\x02\u04F2\u04F3\x05+\x16" +
    "\x02\u04F3\u04F4\x05\x03\x02\x02\u04F4\u04F5\x05%\x13\x02\u04F5\u04F6" +
    "\x05)\x15\x02\u04F6\u04F7\x05\v\x06\x02\u04F7\u04F8\x05%\x13\x02\u04F8" +
    "\xF8\x03\x02\x02\x02\u04F9\u04FA\x05)\x15\x02\u04FA\u04FB\x05\x11\t\x02" +
    "\u04FB\u04FC\x05\x13\n\x02\u04FC\u04FD\x05\'\x14\x02\u04FD\u04FE\x07a" +
    "\x02\x02\u04FE\u04FF\x05\r\x07\x02\u04FF\u0500\x05\x13\n\x02\u0500\u0501" +
    "\x05\'\x14\x02\u0501\u0502\x05\x07\x04\x02\u0502\u0503\x05\x03\x02\x02" +
    "\u0503\u0504\x05\x19\r\x02\u0504\u0505\x07a\x02\x02\u0505\u0506\x053\x1A" +
    "\x02\u0506\u0507\x05\v\x06\x02\u0507\u0508\x05\x03\x02\x02\u0508\u0509" +
    "\x05%\x13\x02\u0509\xFA\x03\x02\x02\x02\u050A\u050B\x05\x19\r\x02\u050B" +
    "\u050C\x05\x03\x02\x02\u050C\u050D\x05\'\x14\x02\u050D\u050E\x05)\x15" +
    "\x02\u050E\u050F\x07a\x02\x02\u050F\u0510\x05\r\x07\x02\u0510\u0511\x05" +
    "\x13\n\x02\u0511\u0512\x05\'\x14\x02\u0512\u0513\x05\x07\x04\x02\u0513" +
    "\u0514\x05\x03\x02\x02\u0514\u0515\x05\x19\r\x02\u0515\u0516\x07a\x02" +
    "\x02\u0516\u0517\x053\x1A\x02\u0517\u0518\x05\v\x06\x02\u0518\u0519\x05" +
    "\x03\x02\x02\u0519\u051A\x05%\x13\x02\u051A\xFC\x03\x02\x02\x02\u051B" +
    "\u051C\x05\x1D\x0F\x02\u051C\u051D\x05\v\x06\x02\u051D\u051E\x051\x19" +
    "\x02\u051E\u051F\x05)\x15\x02\u051F\u0520\x07a\x02\x02\u0520\u0521\x05" +
    "\r\x07\x02\u0521\u0522\x05\x13\n\x02\u0522\u0523\x05\'\x14\x02\u0523\u0524" +
    "\x05\x07\x04\x02\u0524\u0525\x05\x03\x02\x02\u0525\u0526\x05\x19\r\x02" +
    "\u0526\u0527\x07a\x02\x02\u0527\u0528\x053\x1A\x02\u0528\u0529\x05\v\x06" +
    "\x02\u0529\u052A\x05\x03\x02\x02\u052A\u052B\x05%\x13\x02\u052B\xFE\x03" +
    "\x02\x02\x02\u052C\u052D\x05\x1D\x0F\x02\u052D\u052E\x05\v\x06\x02\u052E" +
    "\u052F\x051\x19\x02\u052F\u0530\x05)\x15\x02\u0530\u0531\x07a\x02\x02" +
    "\u0531\u0532\x05\x1D\x0F\x02\u0532\u0533\x07a\x02\x02\u0533\u0534\x05" +
    "\t\x05\x02\u0534\u0535\x05\x03\x02\x02\u0535\u0536\x053\x1A\x02\u0536" +
    "\u0537\x05\'\x14\x02\u0537\u0100\x03\x02\x02\x02\u0538\u0539\x05\x19\r" +
    "\x02\u0539\u053A\x05\x03\x02\x02\u053A\u053B\x05\'\x14\x02\u053B\u053C" +
    "\x05)\x15\x02\u053C\u053D\x07a\x02\x02\u053D\u053E\x05\x1D\x0F\x02\u053E" +
    "\u053F\x07a\x02\x02\u053F\u0540\x05\t\x05\x02\u0540\u0541\x05\x03\x02" +
    "\x02\u0541\u0542\x053\x1A\x02\u0542\u0543\x05\'\x14\x02\u0543\u0102\x03" +
    "\x02\x02\x02\u0544\u0545\x05\x1D\x0F\x02\u0545\u0546\x07a\x02\x02\u0546" +
    "\u0547\x05\t\x05\x02\u0547\u0548\x05\x03\x02\x02\u0548\u0549\x053\x1A" +
    "\x02\u0549\u054A\x05\'\x14\x02\u054A\u054B\x07a\x02\x02\u054B\u054C\x05" +
    "\x03\x02\x02\u054C\u054D\x05\x0F\b\x02\u054D\u054E\x05\x1F\x10\x02\u054E" +
    "\u0104\x03\x02\x02\x02\u054F\u0550\x05\x1D\x0F\x02\u0550\u0551\x05\v\x06" +
    "\x02\u0551\u0552\x051\x19\x02\u0552\u0553\x05)\x15\x02\u0553\u0554\x07" +
    "a\x02\x02\u0554\u0555\x05\x1D\x0F\x02\u0555\u0556\x07a\x02\x02\u0556\u0557" +
    "\x05/\x18\x02\u0557\u0558\x05\v\x06\x02\u0558\u0559\x05\v\x06\x02\u0559" +
    "\u055A\x05\x17\f\x02\u055A\u055B\x05\'\x14\x02\u055B\u0106\x03\x02\x02" +
    "\x02\u055C\u055D\x05\x19\r\x02\u055D\u055E\x05\x03\x02\x02\u055E\u055F" +
    "\x05\'\x14\x02\u055F\u0560\x05)\x15\x02\u0560\u0561\x07a\x02\x02\u0561" +
    "\u0562\x05\x1D\x0F\x02\u0562\u0563\x07a\x02\x02\u0563\u0564\x05/\x18\x02" +
    "\u0564\u0565\x05\v\x06\x02\u0565\u0566\x05\v\x06\x02\u0566\u0567\x05\x17" +
    "\f\x02\u0567\u0568\x05\'\x14\x02\u0568\u0108\x03\x02\x02\x02\u0569\u056A" +
    "\x05\x1D\x0F\x02\u056A\u056B\x07a\x02\x02\u056B\u056C\x05/\x18\x02\u056C" +
    "\u056D\x05\v\x06\x02\u056D\u056E\x05\v\x06\x02\u056E\u056F\x05\x17\f\x02" +
    "\u056F\u0570\x05\'\x14\x02\u0570\u0571\x07a\x02\x02\u0571\u0572\x05\x03" +
    "\x02\x02\u0572\u0573\x05\x0F\b\x02\u0573\u0574\x05\x1F\x10\x02\u0574\u010A" +
    "\x03\x02\x02\x02\u0575\u0576\x05\x1D\x0F\x02\u0576\u0577\x05\v\x06\x02" +
    "\u0577\u0578\x051\x19\x02\u0578\u0579\x05)\x15\x02\u0579\u057A\x07a\x02" +
    "\x02\u057A\u057B\x05\x1D\x0F\x02\u057B\u057C\x07a\x02\x02\u057C\u057D" +
    "\x05\x1B\x0E\x02\u057D\u057E\x05\x1F\x10\x02\u057E\u057F\x05\x1D\x0F\x02" +
    "\u057F\u0580\x05)\x15\x02\u0580\u0581\x05\x11\t\x02\u0581\u0582\x05\'" +
    "\x14\x02\u0582\u010C\x03\x02\x02\x02\u0583\u0584\x05\x19\r\x02\u0584\u0585" +
    "\x05\x03\x02\x02\u0585\u0586\x05\'\x14\x02\u0586\u0587\x05)\x15\x02\u0587" +
    "\u0588\x07a\x02\x02\u0588\u0589\x05\x1D\x0F\x02\u0589\u058A\x07a\x02\x02" +
    "\u058A\u058B\x05\x1B\x0E\x02\u058B\u058C\x05\x1F\x10\x02\u058C\u058D\x05" +
    "\x1D\x0F\x02\u058D\u058E\x05)\x15\x02\u058E\u058F\x05\x11\t\x02\u058F" +
    "\u0590\x05\'\x14\x02\u0590\u010E\x03\x02\x02\x02\u0591\u0592\x05\x1D\x0F" +
    "\x02\u0592\u0593\x07a\x02\x02\u0593\u0594\x05\x1B\x0E\x02\u0594\u0595" +
    "\x05\x1F\x10\x02\u0595\u0596\x05\x1D\x0F\x02\u0596\u0597\x05)\x15\x02" +
    "\u0597\u0598\x05\x11\t\x02\u0598\u0599\x05\'\x14\x02\u0599\u059A\x07a" +
    "\x02\x02\u059A\u059B\x05\x03\x02\x02\u059B\u059C\x05\x0F\b\x02\u059C\u059D" +
    "\x05\x1F\x10\x02\u059D\u0110\x03\x02\x02\x02\u059E\u059F\x05\x1D\x0F\x02" +
    "\u059F\u05A0\x05\v\x06\x02\u05A0\u05A1\x051\x19\x02\u05A1\u05A2\x05)\x15" +
    "\x02\u05A2\u05A3\x07a\x02\x02\u05A3\u05A4\x05\x1D\x0F\x02\u05A4\u05A5" +
    "\x07a\x02\x02\u05A5\u05A6\x05#\x12\x02\u05A6\u05A7\x05+\x16\x02\u05A7" +
    "\u05A8\x05\x03\x02\x02\u05A8\u05A9\x05%\x13\x02\u05A9\u05AA\x05)\x15\x02" +
    "\u05AA\u05AB\x05\v\x06\x02\u05AB\u05AC\x05%\x13\x02\u05AC\u05AD\x05\'" +
    "\x14\x02\u05AD\u0112\x03\x02\x02\x02\u05AE\u05AF\x05\x19\r\x02\u05AF\u05B0" +
    "\x05\x03\x02\x02\u05B0\u05B1\x05\'\x14\x02\u05B1\u05B2\x05)\x15\x02\u05B2" +
    "\u05B3\x07a\x02\x02\u05B3\u05B4\x05\x1D\x0F\x02\u05B4\u05B5\x07a\x02\x02" +
    "\u05B5\u05B6\x05#\x12\x02\u05B6\u05B7\x05+\x16\x02\u05B7\u05B8\x05\x03" +
    "\x02\x02\u05B8\u05B9\x05%\x13\x02\u05B9\u05BA\x05)\x15\x02\u05BA\u05BB" +
    "\x05\v\x06\x02\u05BB\u05BC\x05%\x13\x02\u05BC\u05BD\x05\'\x14\x02\u05BD" +
    "\u0114\x03\x02\x02\x02\u05BE\u05BF\x05\x1D\x0F\x02\u05BF\u05C0\x07a\x02" +
    "\x02\u05C0\u05C1\x05#\x12\x02\u05C1\u05C2\x05+\x16\x02\u05C2\u05C3\x05" +
    "\x03\x02\x02\u05C3\u05C4\x05%\x13\x02\u05C4\u05C5\x05)\x15\x02\u05C5\u05C6" +
    "\x05\v\x06\x02\u05C6\u05C7\x05%\x13\x02\u05C7\u05C8\x05\'\x14\x02\u05C8" +
    "\u05C9\x07a\x02\x02\u05C9\u05CA\x05\x03\x02\x02\u05CA\u05CB\x05\x0F\b" +
    "\x02\u05CB\u05CC\x05\x1F\x10\x02\u05CC\u0116\x03\x02\x02\x02\u05CD\u05CE" +
    "\x05\x1D\x0F\x02\u05CE\u05CF\x05\v\x06\x02\u05CF\u05D0\x051\x19\x02\u05D0" +
    "\u05D1\x05)\x15\x02\u05D1\u05D2\x07a\x02\x02\u05D2\u05D3\x05\x1D\x0F\x02" +
    "\u05D3\u05D4\x07a\x02\x02\u05D4\u05D5\x053\x1A\x02\u05D5\u05D6\x05\v\x06" +
    "\x02\u05D6\u05D7\x05\x03\x02\x02\u05D7\u05D8\x05%\x13\x02\u05D8\u05D9" +
    "\x05\'\x14\x02\u05D9\u0118\x03\x02\x02\x02\u05DA\u05DB\x05\x19\r\x02\u05DB" +
    "\u05DC\x05\x03\x02\x02\u05DC\u05DD\x05\'\x14\x02\u05DD\u05DE\x05)\x15" +
    "\x02\u05DE\u05DF\x07a\x02\x02\u05DF\u05E0\x05\x1D\x0F\x02\u05E0\u05E1" +
    "\x07a\x02\x02\u05E1\u05E2\x053\x1A\x02\u05E2\u05E3\x05\v\x06\x02\u05E3" +
    "\u05E4\x05\x03\x02\x02\u05E4\u05E5\x05%\x13\x02\u05E5\u05E6\x05\'\x14" +
    "\x02\u05E6\u011A\x03\x02\x02\x02\u05E7\u05E8\x05\x1D\x0F\x02\u05E8\u05E9" +
    "\x07a\x02\x02\u05E9\u05EA\x053\x1A\x02\u05EA\u05EB\x05\v\x06\x02\u05EB" +
    "\u05EC\x05\x03\x02\x02\u05EC\u05ED\x05%\x13\x02\u05ED\u05EE\x05\'\x14" +
    "\x02\u05EE\u05EF\x07a\x02\x02\u05EF\u05F0\x05\x03\x02\x02\u05F0\u05F1" +
    "\x05\x0F\b\x02\u05F1\u05F2\x05\x1F\x10\x02\u05F2\u011C\x03\x02\x02\x02" +
    "\u05F3\u05F4\x05\x1D\x0F\x02\u05F4\u05F5\x05\v\x06\x02\u05F5\u05F6\x05" +
    "1\x19\x02\u05F6\u05F7\x05)\x15\x02\u05F7\u05F8\x07a\x02\x02\u05F8\u05F9" +
    "\x05\x1D\x0F\x02\u05F9\u05FA\x07a\x02\x02\u05FA\u05FB\x05\r\x07\x02\u05FB" +
    "\u05FC\x05\x13\n\x02\u05FC\u05FD\x05\'\x14\x02\u05FD\u05FE\x05\x07\x04" +
    "\x02\u05FE\u05FF\x05\x03\x02\x02\u05FF\u0600\x05\x19\r\x02\u0600\u0601" +
    "\x07a\x02\x02\u0601\u0602\x05#\x12\x02\u0602\u0603\x05+\x16\x02\u0603" +
    "\u0604\x05\x03\x02\x02\u0604\u0605\x05%\x13\x02\u0605\u0606\x05)\x15\x02" +
    "\u0606\u0607\x05\v\x06\x02\u0607\u0608\x05%\x13\x02\u0608\u0609\x05\'" +
    "\x14\x02\u0609\u011E\x03\x02\x02\x02\u060A\u060B\x05\x19\r\x02\u060B\u060C" +
    "\x05\x03\x02\x02\u060C\u060D\x05\'\x14\x02\u060D\u060E\x05)\x15\x02\u060E" +
    "\u060F\x07a\x02\x02\u060F\u0610\x05\x1D\x0F\x02\u0610\u0611\x07a\x02\x02" +
    "\u0611\u0612\x05\r\x07\x02\u0612\u0613\x05\x13\n\x02\u0613\u0614\x05\'" +
    "\x14\x02\u0614\u0615\x05\x07\x04\x02\u0615\u0616\x05\x03\x02\x02\u0616" +
    "\u0617\x05\x19\r\x02\u0617\u0618\x07a\x02\x02\u0618\u0619\x05#\x12\x02" +
    "\u0619\u061A\x05+\x16\x02\u061A\u061B\x05\x03\x02\x02\u061B\u061C\x05" +
    "%\x13\x02\u061C\u061D\x05)\x15\x02\u061D\u061E\x05\v\x06\x02\u061E\u061F" +
    "\x05%\x13\x02\u061F\u0620\x05\'\x14\x02\u0620\u0120\x03\x02\x02\x02\u0621" +
    "\u0622\x05\x1D\x0F\x02\u0622\u0623\x07a\x02\x02\u0623\u0624\x05\r\x07" +
    "\x02\u0624\u0625\x05\x13\n\x02\u0625\u0626\x05\'\x14\x02\u0626\u0627\x05" +
    "\x07\x04\x02\u0627\u0628\x05\x03\x02\x02\u0628\u0629\x05\x19\r\x02\u0629" +
    "\u062A\x07a\x02\x02\u062A\u062B\x05#\x12\x02\u062B\u062C\x05+\x16\x02" +
    "\u062C\u062D\x05\x03\x02\x02\u062D\u062E\x05%\x13\x02\u062E\u062F\x05" +
    ")\x15\x02\u062F\u0630\x05\v\x06\x02\u0630\u0631\x05%\x13\x02\u0631\u0632" +
    "\x05\'\x14\x02\u0632\u0633\x07a\x02\x02\u0633\u0634\x05\x03\x02\x02\u0634" +
    "\u0635\x05\x0F\b\x02\u0635\u0636\x05\x1F\x10\x02\u0636\u0122\x03\x02\x02" +
    "\x02\u0637\u0638\x05\x1D\x0F\x02\u0638\u0639\x05\v\x06\x02\u0639\u063A" +
    "\x051\x19\x02\u063A\u063B\x05)\x15\x02\u063B\u063C\x07a\x02\x02\u063C" +
    "\u063D\x05\x1D\x0F\x02\u063D\u063E\x07a\x02\x02\u063E\u063F\x05\r\x07" +
    "\x02\u063F\u0640\x05\x13\n\x02\u0640\u0641\x05\'\x14\x02\u0641\u0642\x05" +
    "\x07\x04\x02\u0642\u0643\x05\x03\x02\x02\u0643\u0644\x05\x19\r\x02\u0644" +
    "\u0645\x07a\x02\x02\u0645\u0646\x053\x1A\x02\u0646\u0647\x05\v\x06\x02" +
    "\u0647\u0648\x05\x03\x02\x02\u0648\u0649\x05%\x13\x02\u0649\u064A\x05" +
    "\'\x14\x02\u064A\u0124\x03\x02\x02\x02\u064B\u064C\x05\x19\r\x02\u064C" +
    "\u064D\x05\x03\x02\x02\u064D\u064E\x05\'\x14\x02\u064E\u064F\x05)\x15" +
    "\x02\u064F\u0650\x07a\x02\x02\u0650\u0651\x05\x1D\x0F\x02\u0651\u0652" +
    "\x07a\x02\x02\u0652\u0653\x05\r\x07\x02\u0653\u0654\x05\x13\n\x02\u0654" +
    "\u0655\x05\'\x14\x02\u0655\u0656\x05\x07\x04\x02\u0656\u0657\x05\x03\x02" +
    "\x02\u0657\u0658\x05\x19\r\x02\u0658\u0659\x07a\x02\x02\u0659\u065A\x05" +
    "3\x1A\x02\u065A\u065B\x05\v\x06\x02\u065B\u065C\x05\x03\x02\x02\u065C" +
    "\u065D\x05%\x13\x02\u065D\u065E\x05\'\x14\x02\u065E\u0126\x03\x02\x02" +
    "\x02\u065F\u0660\x05\x1D\x0F\x02\u0660\u0661\x07a\x02\x02\u0661\u0662" +
    "\x05\r\x07\x02\u0662\u0663\x05\x13\n\x02\u0663\u0664\x05\'\x14\x02\u0664" +
    "\u0665\x05\x07\x04\x02\u0665\u0666\x05\x03\x02\x02\u0666\u0667\x05\x19" +
    "\r\x02\u0667\u0668\x07a\x02\x02\u0668\u0669\x053\x1A\x02\u0669\u066A\x05" +
    "\v\x06\x02\u066A\u066B\x05\x03\x02\x02\u066B\u066C\x05%\x13\x02\u066C" +
    "\u066D\x05\'\x14\x02\u066D\u066E\x07a\x02\x02\u066E\u066F\x05\x03\x02" +
    "\x02\u066F\u0670\x05\x0F\b\x02\u0670\u0671\x05\x1F\x10\x02\u0671\u0128" +
    "\x03\x02\x02\x02\u0672\u0673\x07?\x02\x02\u0673\u012A\x03\x02\x02\x02" +
    "\u0674\u0675\x07>\x02\x02\u0675\u0679\x07@\x02\x02\u0676\u0677\x07#\x02" +
    "\x02\u0677\u0679\x07?\x02\x02\u0678\u0674\x03\x02\x02\x02\u0678\u0676" +
    "\x03\x02\x02\x02\u0679\u012C\x03\x02\x02\x02\u067A\u067B\x07>\x02\x02" +
    "\u067B\u067C\x07?\x02\x02\u067C\u012E\x03\x02\x02\x02\u067D\u067E\x07" +
    "@\x02\x02\u067E\u067F\x07?\x02\x02\u067F\u0130\x03\x02\x02\x02\u0680\u0681" +
    "\x07@\x02\x02\u0681\u0132\x03\x02\x02\x02\u0682\u0683\x07>\x02\x02\u0683" +
    "\u0134\x03\x02\x02\x02\u0684\u0685\x070\x02\x02\u0685\u0136\x03\x02\x02" +
    "\x02\u0686\u0687\x07<\x02\x02\u0687\u0138\x03\x02\x02\x02\u0688\u0689" +
    "\x07=\x02\x02\u0689\u013A\x03\x02\x02\x02\u068A\u068B\x07.\x02\x02\u068B" +
    "\u013C\x03\x02\x02\x02\u068C\u068D\x07,\x02\x02\u068D\u013E\x03\x02\x02" +
    "\x02\u068E\u068F\x07+\x02\x02\u068F\u0140\x03\x02\x02\x02\u0690\u0691" +
    "\x07*\x02\x02\u0691\u0142\x03\x02\x02\x02\u0692\u0693\x07-\x02\x02\u0693" +
    "\u0144\x03\x02\x02\x02\u0694\u0695\x07/\x02\x02\u0695\u0146\x03\x02\x02" +
    "\x02\u0696\u069A\t\x1E\x02\x02\u0697\u0699\t\x1F\x02\x02\u0698\u0697\x03" +
    "\x02\x02\x02\u0699\u069C\x03\x02\x02\x02\u069A\u0698\x03\x02\x02\x02\u069A" +
    "\u069B\x03\x02\x02\x02\u069B\u0148\x03\x02\x02\x02\u069C\u069A\x03\x02" +
    "\x02\x02\u069D\u069E\x042;\x02\u069E\u069F\x042;\x02\u069F\u06A0\x042" +
    ";\x02\u06A0\u06A1\x042;\x02\u06A1\u06A2\x05\u0145\xA3\x02\u06A2\u06A3" +
    "\x0423\x02\u06A3\u06A4\x042;\x02\u06A4\u06A5\x05\u0145\xA3\x02\u06A5\u06A6" +
    "\x0425\x02\u06A6\u06A7\x042;\x02\u06A7\u014A\x03\x02\x02\x02\u06A8\u06A9" +
    "\x05\u0149\xA5\x02\u06A9\u06AA\x05)\x15\x02\u06AA\u06AB\x0424\x02\u06AB" +
    "\u06AC\x042;\x02\u06AC\u06AD\x05\u0137\x9C\x02\u06AD\u06AE\x0427\x02\u06AE" +
    "\u06AF\x042;\x02\u06AF\u06B0\x05\u0137\x9C\x02\u06B0\u06B1\x0427\x02\u06B1" +
    "\u06B8\x042;\x02\u06B2\u06B4\x05\u0135\x9B\x02\u06B3\u06B5\x042;\x02\u06B4" +
    "\u06B3\x03\x02\x02\x02\u06B5\u06B6\x03\x02\x02\x02\u06B6\u06B4\x03\x02" +
    "\x02\x02\u06B6\u06B7\x03\x02\x02\x02\u06B7\u06B9\x03\x02\x02\x02\u06B8" +
    "\u06B2\x03\x02\x02\x02\u06B8\u06B9\x03\x02\x02\x02\u06B9\u06C7\x03\x02" +
    "\x02\x02\u06BA\u06C8\x055\x1B\x02\u06BB\u06BE\x05\u0143\xA2\x02\u06BC" +
    "\u06BE\x05\u0145\xA3\x02\u06BD\u06BB\x03\x02\x02\x02\u06BD\u06BC\x03\x02" +
    "\x02\x02\u06BE\u06BF\x03\x02\x02\x02\u06BF\u06C0\x0424\x02\u06C0\u06C2" +
    "\x042;\x02\u06C1\u06C3\x05\u0137\x9C\x02\u06C2\u06C1\x03\x02\x02\x02\u06C2" +
    "\u06C3\x03\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4\u06C5\x0427\x02" +
    "\u06C5\u06C6\x042;\x02\u06C6\u06C8\x03\x02\x02\x02\u06C7\u06BA\x03\x02" +
    "\x02\x02\u06C7\u06BD\x03\x02\x02\x02\u06C8\u014C\x03\x02\x02\x02\u06C9" +
    "\u06CB\x042;\x02\u06CA\u06C9\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02\x02" +
    "\u06CC\u06CA\x03\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02\u06CD\u014E\x03" +
    "\x02\x02\x02\u06CE\u06D1\x05\u0143\xA2\x02\u06CF\u06D1\x05\u0145\xA3\x02" +
    "\u06D0\u06CE\x03\x02\x02\x02\u06D0\u06CF\x03\x02\x02\x02\u06D0\u06D1\x03" +
    "\x02\x02\x02\u06D1\u06DC\x03\x02\x02\x02\u06D2\u06D3\x05\u014D\xA7\x02" +
    "\u06D3\u06D4\x05\u0135\x9B\x02\u06D4\u06D5\x05\u014D\xA7\x02\u06D5\u06DD" +
    "\x03\x02\x02\x02\u06D6\u06D7\x05\u014D\xA7\x02\u06D7\u06D8\x05\u0135\x9B" +
    "\x02\u06D8\u06DD\x03\x02\x02\x02\u06D9\u06DA\x05\u0135\x9B\x02\u06DA\u06DB" +
    "\x05\u014D\xA7\x02\u06DB\u06DD\x03\x02\x02\x02\u06DC\u06D2\x03\x02\x02" +
    "\x02\u06DC\u06D6\x03\x02\x02\x02\u06DC\u06D9\x03\x02\x02\x02\u06DD\u0150" +
    "\x03\x02\x02\x02\u06DE\u06E1\x05\u0143\xA2\x02\u06DF\u06E1\x05\u0145\xA3" +
    "\x02\u06E0\u06DE\x03\x02\x02\x02\u06E0\u06DF\x03\x02\x02\x02\u06E1\u06E2" +
    "\x03\x02\x02\x02\u06E2\u06E3\x05\u014D\xA7\x02\u06E3\u0152\x03\x02\x02" +
    "\x02\x12\x02\u019D\u019F\u01BA\u01BC\u0678\u069A\u06B6\u06B8\u06BD\u06C2" +
    "\u06C7\u06CC\u06D0\u06DC\u06E0\x03\x02\x03\x02";
SOQLLexer._serializedATN = Utils.join([
    SOQLLexer._serializedATNSegment0,
    SOQLLexer._serializedATNSegment1,
    SOQLLexer._serializedATNSegment2
], "");
__decorate([
    Decorators.Override,
    Decorators.NotNull,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], SOQLLexer.prototype, "vocabulary", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], SOQLLexer.prototype, "grammarFileName", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [])
], SOQLLexer.prototype, "ruleNames", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], SOQLLexer.prototype, "serializedATN", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [])
], SOQLLexer.prototype, "modeNames", null);

// Generated from SOQL.g4 by ANTLR 4.6-SNAPSHOT
class Keywords_alias_allowedContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ABOVE() { return this.tryGetToken(SOQLParser.ABOVE, 0); }
    ABOVE_OR_BELOW() { return this.tryGetToken(SOQLParser.ABOVE_OR_BELOW, 0); }
    AT() { return this.tryGetToken(SOQLParser.AT, 0); }
    BELOW() { return this.tryGetToken(SOQLParser.BELOW, 0); }
    CATEGORY() { return this.tryGetToken(SOQLParser.CATEGORY, 0); }
    DATA() { return this.tryGetToken(SOQLParser.DATA, 0); }
    END() { return this.tryGetToken(SOQLParser.END, 0); }
    OFFSET() { return this.tryGetToken(SOQLParser.OFFSET, 0); }
    ORDER() { return this.tryGetToken(SOQLParser.ORDER, 0); }
    REFERENCE() { return this.tryGetToken(SOQLParser.REFERENCE, 0); }
    SCOPE() { return this.tryGetToken(SOQLParser.SCOPE, 0); }
    TRACKING() { return this.tryGetToken(SOQLParser.TRACKING, 0); }
    THEN() { return this.tryGetToken(SOQLParser.THEN, 0); }
    TYPEOF() { return this.tryGetToken(SOQLParser.TYPEOF, 0); }
    VIEW() { return this.tryGetToken(SOQLParser.VIEW, 0); }
    VIEWSTAT() { return this.tryGetToken(SOQLParser.VIEWSTAT, 0); }
    WHEN() { return this.tryGetToken(SOQLParser.WHEN, 0); }
    SECURITY_ENFORCED() { return this.tryGetToken(SOQLParser.SECURITY_ENFORCED, 0); }
    get ruleIndex() { return SOQLParser.RULE_keywords_alias_allowed; }
    enterRule(listener) {
        if (listener.enterKeywords_alias_allowed)
            listener.enterKeywords_alias_allowed(this);
    }
    exitRule(listener) {
        if (listener.exitKeywords_alias_allowed)
            listener.exitKeywords_alias_allowed(this);
    }
    accept(visitor) {
        if (visitor.visitKeywords_alias_allowed)
            return visitor.visitKeywords_alias_allowed(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Keywords_alias_allowedContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Keywords_alias_allowedContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Keywords_alias_allowedContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Keywords_alias_allowedContext.prototype, "accept", null);
class Keywords_name_allowedContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    keywords_alias_allowed() {
        return this.tryGetRuleContext(0, Keywords_alias_allowedContext);
    }
    GROUP() { return this.tryGetToken(SOQLParser.GROUP, 0); }
    get ruleIndex() { return SOQLParser.RULE_keywords_name_allowed; }
    enterRule(listener) {
        if (listener.enterKeywords_name_allowed)
            listener.enterKeywords_name_allowed(this);
    }
    exitRule(listener) {
        if (listener.exitKeywords_name_allowed)
            listener.exitKeywords_name_allowed(this);
    }
    accept(visitor) {
        if (visitor.visitKeywords_name_allowed)
            return visitor.visitKeywords_name_allowed(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Keywords_name_allowedContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Keywords_name_allowedContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Keywords_name_allowedContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Keywords_name_allowedContext.prototype, "accept", null);
class NameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ID() { return this.tryGetToken(SOQLParser.ID, 0); }
    keywords_name_allowed() {
        return this.tryGetRuleContext(0, Keywords_name_allowedContext);
    }
    date_formula_literal() {
        return this.tryGetRuleContext(0, Date_formula_literalContext);
    }
    date_formula_n_literal_name() {
        return this.tryGetRuleContext(0, Date_formula_n_literal_nameContext);
    }
    function_name() {
        return this.tryGetRuleContext(0, Function_nameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_name; }
    enterRule(listener) {
        if (listener.enterName)
            listener.enterName(this);
    }
    exitRule(listener) {
        if (listener.exitName)
            listener.exitName(this);
    }
    accept(visitor) {
        if (visitor.visitName)
            return visitor.visitName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], NameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], NameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], NameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], NameContext.prototype, "accept", null);
class Object_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    name() {
        return this.getRuleContext(0, NameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_object_name; }
    enterRule(listener) {
        if (listener.enterObject_name)
            listener.enterObject_name(this);
    }
    exitRule(listener) {
        if (listener.exitObject_name)
            listener.exitObject_name(this);
    }
    accept(visitor) {
        if (visitor.visitObject_name)
            return visitor.visitObject_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Object_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Object_nameContext.prototype, "accept", null);
class Field_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    name() {
        return this.getRuleContext(0, NameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_field_name; }
    enterRule(listener) {
        if (listener.enterField_name)
            listener.enterField_name(this);
    }
    exitRule(listener) {
        if (listener.exitField_name)
            listener.exitField_name(this);
    }
    accept(visitor) {
        if (visitor.visitField_name)
            return visitor.visitField_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Field_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Field_nameContext.prototype, "accept", null);
class Filter_scope_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    name() {
        return this.getRuleContext(0, NameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_filter_scope_name; }
    enterRule(listener) {
        if (listener.enterFilter_scope_name)
            listener.enterFilter_scope_name(this);
    }
    exitRule(listener) {
        if (listener.exitFilter_scope_name)
            listener.exitFilter_scope_name(this);
    }
    accept(visitor) {
        if (visitor.visitFilter_scope_name)
            return visitor.visitFilter_scope_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Filter_scope_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Filter_scope_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Filter_scope_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Filter_scope_nameContext.prototype, "accept", null);
class Data_category_group_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    name() {
        return this.getRuleContext(0, NameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_data_category_group_name; }
    enterRule(listener) {
        if (listener.enterData_category_group_name)
            listener.enterData_category_group_name(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_group_name)
            listener.exitData_category_group_name(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_group_name)
            return visitor.visitData_category_group_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_group_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_group_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_group_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_group_nameContext.prototype, "accept", null);
class Data_category_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    name() {
        return this.getRuleContext(0, NameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_data_category_name; }
    enterRule(listener) {
        if (listener.enterData_category_name)
            listener.enterData_category_name(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_name)
            listener.exitData_category_name(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_name)
            return visitor.visitData_category_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_nameContext.prototype, "accept", null);
class Alias_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ID() { return this.tryGetToken(SOQLParser.ID, 0); }
    keywords_alias_allowed() {
        return this.tryGetRuleContext(0, Keywords_alias_allowedContext);
    }
    date_formula_literal() {
        return this.tryGetRuleContext(0, Date_formula_literalContext);
    }
    date_formula_n_literal_name() {
        return this.tryGetRuleContext(0, Date_formula_n_literal_nameContext);
    }
    function_name() {
        return this.tryGetRuleContext(0, Function_nameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_alias_name; }
    enterRule(listener) {
        if (listener.enterAlias_name)
            listener.enterAlias_name(this);
    }
    exitRule(listener) {
        if (listener.exitAlias_name)
            listener.exitAlias_name(this);
    }
    accept(visitor) {
        if (visitor.visitAlias_name)
            return visitor.visitAlias_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Alias_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Alias_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Alias_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Alias_nameContext.prototype, "accept", null);
class AliasContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    alias_name() {
        return this.getRuleContext(0, Alias_nameContext);
    }
    AS() { return this.tryGetToken(SOQLParser.AS, 0); }
    get ruleIndex() { return SOQLParser.RULE_alias; }
    enterRule(listener) {
        if (listener.enterAlias)
            listener.enterAlias(this);
    }
    exitRule(listener) {
        if (listener.exitAlias)
            listener.exitAlias(this);
    }
    accept(visitor) {
        if (visitor.visitAlias)
            return visitor.visitAlias(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], AliasContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AliasContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AliasContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], AliasContext.prototype, "accept", null);
class LiteralContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    date_formula_literal() {
        return this.tryGetRuleContext(0, Date_formula_literalContext);
    }
    date_formula_n_literal() {
        return this.tryGetRuleContext(0, Date_formula_n_literalContext);
    }
    datetime_literal() {
        return this.tryGetRuleContext(0, Datetime_literalContext);
    }
    date_literal() {
        return this.tryGetRuleContext(0, Date_literalContext);
    }
    integer_literal() {
        return this.tryGetRuleContext(0, Integer_literalContext);
    }
    real_literal() {
        return this.tryGetRuleContext(0, Real_literalContext);
    }
    string_literal() {
        return this.tryGetRuleContext(0, String_literalContext);
    }
    boolean_literal() {
        return this.tryGetRuleContext(0, Boolean_literalContext);
    }
    null_literal() {
        return this.tryGetRuleContext(0, Null_literalContext);
    }
    get ruleIndex() { return SOQLParser.RULE_literal; }
    enterRule(listener) {
        if (listener.enterLiteral)
            listener.enterLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitLiteral)
            listener.exitLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitLiteral)
            return visitor.visitLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], LiteralContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], LiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], LiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], LiteralContext.prototype, "accept", null);
class Date_formula_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    YESTERDAY() { return this.tryGetToken(SOQLParser.YESTERDAY, 0); }
    TODAY() { return this.tryGetToken(SOQLParser.TODAY, 0); }
    TOMORROW() { return this.tryGetToken(SOQLParser.TOMORROW, 0); }
    LAST_WEEK() { return this.tryGetToken(SOQLParser.LAST_WEEK, 0); }
    THIS_WEEK() { return this.tryGetToken(SOQLParser.THIS_WEEK, 0); }
    NEXT_WEEK() { return this.tryGetToken(SOQLParser.NEXT_WEEK, 0); }
    LAST_MONTH() { return this.tryGetToken(SOQLParser.LAST_MONTH, 0); }
    THIS_MONTH() { return this.tryGetToken(SOQLParser.THIS_MONTH, 0); }
    NEXT_MONTH() { return this.tryGetToken(SOQLParser.NEXT_MONTH, 0); }
    LAST_90_DAYS() { return this.tryGetToken(SOQLParser.LAST_90_DAYS, 0); }
    NEXT_90_DAYS() { return this.tryGetToken(SOQLParser.NEXT_90_DAYS, 0); }
    THIS_QUARTER() { return this.tryGetToken(SOQLParser.THIS_QUARTER, 0); }
    LAST_QUARTER() { return this.tryGetToken(SOQLParser.LAST_QUARTER, 0); }
    NEXT_QUARTER() { return this.tryGetToken(SOQLParser.NEXT_QUARTER, 0); }
    THIS_YEAR() { return this.tryGetToken(SOQLParser.THIS_YEAR, 0); }
    LAST_YEAR() { return this.tryGetToken(SOQLParser.LAST_YEAR, 0); }
    NEXT_YEAR() { return this.tryGetToken(SOQLParser.NEXT_YEAR, 0); }
    THIS_FISCAL_QUARTER() { return this.tryGetToken(SOQLParser.THIS_FISCAL_QUARTER, 0); }
    LAST_FISCAL_QUARTER() { return this.tryGetToken(SOQLParser.LAST_FISCAL_QUARTER, 0); }
    NEXT_FISCAL_QUARTER() { return this.tryGetToken(SOQLParser.NEXT_FISCAL_QUARTER, 0); }
    THIS_FISCAL_YEAR() { return this.tryGetToken(SOQLParser.THIS_FISCAL_YEAR, 0); }
    LAST_FISCAL_YEAR() { return this.tryGetToken(SOQLParser.LAST_FISCAL_YEAR, 0); }
    NEXT_FISCAL_YEAR() { return this.tryGetToken(SOQLParser.NEXT_FISCAL_YEAR, 0); }
    get ruleIndex() { return SOQLParser.RULE_date_formula_literal; }
    enterRule(listener) {
        if (listener.enterDate_formula_literal)
            listener.enterDate_formula_literal(this);
    }
    exitRule(listener) {
        if (listener.exitDate_formula_literal)
            listener.exitDate_formula_literal(this);
    }
    accept(visitor) {
        if (visitor.visitDate_formula_literal)
            return visitor.visitDate_formula_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Date_formula_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Date_formula_literalContext.prototype, "accept", null);
class Date_formula_n_literal_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    NEXT_N_DAYS() { return this.tryGetToken(SOQLParser.NEXT_N_DAYS, 0); }
    LAST_N_DAYS() { return this.tryGetToken(SOQLParser.LAST_N_DAYS, 0); }
    N_DAYS_AGO() { return this.tryGetToken(SOQLParser.N_DAYS_AGO, 0); }
    NEXT_N_WEEKS() { return this.tryGetToken(SOQLParser.NEXT_N_WEEKS, 0); }
    LAST_N_WEEKS() { return this.tryGetToken(SOQLParser.LAST_N_WEEKS, 0); }
    N_WEEKS_AGO() { return this.tryGetToken(SOQLParser.N_WEEKS_AGO, 0); }
    NEXT_N_MONTHS() { return this.tryGetToken(SOQLParser.NEXT_N_MONTHS, 0); }
    LAST_N_MONTHS() { return this.tryGetToken(SOQLParser.LAST_N_MONTHS, 0); }
    N_MONTHS_AGO() { return this.tryGetToken(SOQLParser.N_MONTHS_AGO, 0); }
    NEXT_N_QUARTERS() { return this.tryGetToken(SOQLParser.NEXT_N_QUARTERS, 0); }
    LAST_N_QUARTERS() { return this.tryGetToken(SOQLParser.LAST_N_QUARTERS, 0); }
    N_QUARTERS_AGO() { return this.tryGetToken(SOQLParser.N_QUARTERS_AGO, 0); }
    NEXT_N_YEARS() { return this.tryGetToken(SOQLParser.NEXT_N_YEARS, 0); }
    LAST_N_YEARS() { return this.tryGetToken(SOQLParser.LAST_N_YEARS, 0); }
    N_YEARS_AGO() { return this.tryGetToken(SOQLParser.N_YEARS_AGO, 0); }
    NEXT_N_FISCAL_QUARTERS() { return this.tryGetToken(SOQLParser.NEXT_N_FISCAL_QUARTERS, 0); }
    LAST_N_FISCAL_QUARTERS() { return this.tryGetToken(SOQLParser.LAST_N_FISCAL_QUARTERS, 0); }
    N_FISCAL_QUARTERS_AGO() { return this.tryGetToken(SOQLParser.N_FISCAL_QUARTERS_AGO, 0); }
    NEXT_N_FISCAL_YEARS() { return this.tryGetToken(SOQLParser.NEXT_N_FISCAL_YEARS, 0); }
    LAST_N_FISCAL_YEARS() { return this.tryGetToken(SOQLParser.LAST_N_FISCAL_YEARS, 0); }
    N_FISCAL_YEARS_AGO() { return this.tryGetToken(SOQLParser.N_FISCAL_YEARS_AGO, 0); }
    get ruleIndex() { return SOQLParser.RULE_date_formula_n_literal_name; }
    enterRule(listener) {
        if (listener.enterDate_formula_n_literal_name)
            listener.enterDate_formula_n_literal_name(this);
    }
    exitRule(listener) {
        if (listener.exitDate_formula_n_literal_name)
            listener.exitDate_formula_n_literal_name(this);
    }
    accept(visitor) {
        if (visitor.visitDate_formula_n_literal_name)
            return visitor.visitDate_formula_n_literal_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Date_formula_n_literal_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_n_literal_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_n_literal_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Date_formula_n_literal_nameContext.prototype, "accept", null);
class Date_formula_n_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    date_formula_n_literal_name() {
        return this.getRuleContext(0, Date_formula_n_literal_nameContext);
    }
    COLON() { return this.getToken(SOQLParser.COLON, 0); }
    UNSIGNED_INTEGER() { return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0); }
    get ruleIndex() { return SOQLParser.RULE_date_formula_n_literal; }
    enterRule(listener) {
        if (listener.enterDate_formula_n_literal)
            listener.enterDate_formula_n_literal(this);
    }
    exitRule(listener) {
        if (listener.exitDate_formula_n_literal)
            listener.exitDate_formula_n_literal(this);
    }
    accept(visitor) {
        if (visitor.visitDate_formula_n_literal)
            return visitor.visitDate_formula_n_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Date_formula_n_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_n_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_formula_n_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Date_formula_n_literalContext.prototype, "accept", null);
class Datetime_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    DATETIME() { return this.getToken(SOQLParser.DATETIME, 0); }
    get ruleIndex() { return SOQLParser.RULE_datetime_literal; }
    enterRule(listener) {
        if (listener.enterDatetime_literal)
            listener.enterDatetime_literal(this);
    }
    exitRule(listener) {
        if (listener.exitDatetime_literal)
            listener.exitDatetime_literal(this);
    }
    accept(visitor) {
        if (visitor.visitDatetime_literal)
            return visitor.visitDatetime_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Datetime_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Datetime_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Datetime_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Datetime_literalContext.prototype, "accept", null);
class Date_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    DATE() { return this.getToken(SOQLParser.DATE, 0); }
    get ruleIndex() { return SOQLParser.RULE_date_literal; }
    enterRule(listener) {
        if (listener.enterDate_literal)
            listener.enterDate_literal(this);
    }
    exitRule(listener) {
        if (listener.exitDate_literal)
            listener.exitDate_literal(this);
    }
    accept(visitor) {
        if (visitor.visitDate_literal)
            return visitor.visitDate_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Date_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Date_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Date_literalContext.prototype, "accept", null);
class Integer_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SIGNED_INTEGER() { return this.tryGetToken(SOQLParser.SIGNED_INTEGER, 0); }
    UNSIGNED_INTEGER() { return this.tryGetToken(SOQLParser.UNSIGNED_INTEGER, 0); }
    get ruleIndex() { return SOQLParser.RULE_integer_literal; }
    enterRule(listener) {
        if (listener.enterInteger_literal)
            listener.enterInteger_literal(this);
    }
    exitRule(listener) {
        if (listener.exitInteger_literal)
            listener.exitInteger_literal(this);
    }
    accept(visitor) {
        if (visitor.visitInteger_literal)
            return visitor.visitInteger_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Integer_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Integer_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Integer_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Integer_literalContext.prototype, "accept", null);
class Real_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    REAL_NUMBER() { return this.getToken(SOQLParser.REAL_NUMBER, 0); }
    get ruleIndex() { return SOQLParser.RULE_real_literal; }
    enterRule(listener) {
        if (listener.enterReal_literal)
            listener.enterReal_literal(this);
    }
    exitRule(listener) {
        if (listener.exitReal_literal)
            listener.exitReal_literal(this);
    }
    accept(visitor) {
        if (visitor.visitReal_literal)
            return visitor.visitReal_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Real_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Real_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Real_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Real_literalContext.prototype, "accept", null);
class String_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    STRING_VALUE() { return this.getToken(SOQLParser.STRING_VALUE, 0); }
    get ruleIndex() { return SOQLParser.RULE_string_literal; }
    enterRule(listener) {
        if (listener.enterString_literal)
            listener.enterString_literal(this);
    }
    exitRule(listener) {
        if (listener.exitString_literal)
            listener.exitString_literal(this);
    }
    accept(visitor) {
        if (visitor.visitString_literal)
            return visitor.visitString_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], String_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], String_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], String_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], String_literalContext.prototype, "accept", null);
class Boolean_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TRUE() { return this.tryGetToken(SOQLParser.TRUE, 0); }
    FALSE() { return this.tryGetToken(SOQLParser.FALSE, 0); }
    get ruleIndex() { return SOQLParser.RULE_boolean_literal; }
    enterRule(listener) {
        if (listener.enterBoolean_literal)
            listener.enterBoolean_literal(this);
    }
    exitRule(listener) {
        if (listener.exitBoolean_literal)
            listener.exitBoolean_literal(this);
    }
    accept(visitor) {
        if (visitor.visitBoolean_literal)
            return visitor.visitBoolean_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Boolean_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Boolean_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Boolean_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Boolean_literalContext.prototype, "accept", null);
class Null_literalContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    NULL() { return this.getToken(SOQLParser.NULL, 0); }
    get ruleIndex() { return SOQLParser.RULE_null_literal; }
    enterRule(listener) {
        if (listener.enterNull_literal)
            listener.enterNull_literal(this);
    }
    exitRule(listener) {
        if (listener.exitNull_literal)
            listener.exitNull_literal(this);
    }
    accept(visitor) {
        if (visitor.visitNull_literal)
            return visitor.visitNull_literal(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Null_literalContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Null_literalContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Null_literalContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Null_literalContext.prototype, "accept", null);
class Function_nameContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    function_date() {
        return this.tryGetRuleContext(0, Function_dateContext);
    }
    function_aggregate() {
        return this.tryGetRuleContext(0, Function_aggregateContext);
    }
    function_location() {
        return this.tryGetRuleContext(0, Function_locationContext);
    }
    function_other() {
        return this.tryGetRuleContext(0, Function_otherContext);
    }
    get ruleIndex() { return SOQLParser.RULE_function_name; }
    enterRule(listener) {
        if (listener.enterFunction_name)
            listener.enterFunction_name(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_name)
            listener.exitFunction_name(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_name)
            return visitor.visitFunction_name(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_nameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_nameContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_nameContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_nameContext.prototype, "accept", null);
class Function_dateContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    CALENDAR_MONTH() { return this.tryGetToken(SOQLParser.CALENDAR_MONTH, 0); }
    CALENDAR_QUARTER() { return this.tryGetToken(SOQLParser.CALENDAR_QUARTER, 0); }
    CALENDAR_YEAR() { return this.tryGetToken(SOQLParser.CALENDAR_YEAR, 0); }
    DAY_IN_MONTH() { return this.tryGetToken(SOQLParser.DAY_IN_MONTH, 0); }
    DAY_IN_WEEK() { return this.tryGetToken(SOQLParser.DAY_IN_WEEK, 0); }
    DAY_IN_YEAR() { return this.tryGetToken(SOQLParser.DAY_IN_YEAR, 0); }
    DAY_ONLY() { return this.tryGetToken(SOQLParser.DAY_ONLY, 0); }
    FISCAL_MONTH() { return this.tryGetToken(SOQLParser.FISCAL_MONTH, 0); }
    FISCAL_QUARTER() { return this.tryGetToken(SOQLParser.FISCAL_QUARTER, 0); }
    FISCAL_YEAR() { return this.tryGetToken(SOQLParser.FISCAL_YEAR, 0); }
    HOUR_IN_DAY() { return this.tryGetToken(SOQLParser.HOUR_IN_DAY, 0); }
    WEEK_IN_MONTH() { return this.tryGetToken(SOQLParser.WEEK_IN_MONTH, 0); }
    WEEK_IN_YEAR() { return this.tryGetToken(SOQLParser.WEEK_IN_YEAR, 0); }
    get ruleIndex() { return SOQLParser.RULE_function_date; }
    enterRule(listener) {
        if (listener.enterFunction_date)
            listener.enterFunction_date(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_date)
            listener.exitFunction_date(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_date)
            return visitor.visitFunction_date(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_dateContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_dateContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_dateContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_dateContext.prototype, "accept", null);
class Function_aggregateContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    AVG() { return this.tryGetToken(SOQLParser.AVG, 0); }
    COUNT() { return this.tryGetToken(SOQLParser.COUNT, 0); }
    COUNT_DISTINCT() { return this.tryGetToken(SOQLParser.COUNT_DISTINCT, 0); }
    MIN() { return this.tryGetToken(SOQLParser.MIN, 0); }
    MAX() { return this.tryGetToken(SOQLParser.MAX, 0); }
    SUM() { return this.tryGetToken(SOQLParser.SUM, 0); }
    get ruleIndex() { return SOQLParser.RULE_function_aggregate; }
    enterRule(listener) {
        if (listener.enterFunction_aggregate)
            listener.enterFunction_aggregate(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_aggregate)
            listener.exitFunction_aggregate(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_aggregate)
            return visitor.visitFunction_aggregate(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_aggregateContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_aggregateContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_aggregateContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_aggregateContext.prototype, "accept", null);
class Function_locationContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    DISTANCE() { return this.tryGetToken(SOQLParser.DISTANCE, 0); }
    GEOLOCATION() { return this.tryGetToken(SOQLParser.GEOLOCATION, 0); }
    get ruleIndex() { return SOQLParser.RULE_function_location; }
    enterRule(listener) {
        if (listener.enterFunction_location)
            listener.enterFunction_location(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_location)
            listener.exitFunction_location(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_location)
            return visitor.visitFunction_location(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_locationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_locationContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_locationContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_locationContext.prototype, "accept", null);
class Function_otherContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FORMAT() { return this.tryGetToken(SOQLParser.FORMAT, 0); }
    TOLABEL() { return this.tryGetToken(SOQLParser.TOLABEL, 0); }
    CONVERT_TIME_ZONE() { return this.tryGetToken(SOQLParser.CONVERT_TIME_ZONE, 0); }
    CONVERT_CURRENCY() { return this.tryGetToken(SOQLParser.CONVERT_CURRENCY, 0); }
    GROUPING() { return this.tryGetToken(SOQLParser.GROUPING, 0); }
    get ruleIndex() { return SOQLParser.RULE_function_other; }
    enterRule(listener) {
        if (listener.enterFunction_other)
            listener.enterFunction_other(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_other)
            listener.exitFunction_other(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_other)
            return visitor.visitFunction_other(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_otherContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_otherContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_otherContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_otherContext.prototype, "accept", null);
class Soql_queryContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    select_clause() {
        return this.getRuleContext(0, Select_clauseContext);
    }
    from_clause() {
        return this.getRuleContext(0, From_clauseContext);
    }
    EOF() { return this.getToken(SOQLParser.EOF, 0); }
    using_clause() {
        return this.tryGetRuleContext(0, Using_clauseContext);
    }
    where_clause() {
        return this.tryGetRuleContext(0, Where_clauseContext);
    }
    with_clause() {
        return this.tryGetRuleContext(0, With_clauseContext);
    }
    with_security_enforced_clause() {
        return this.tryGetRuleContext(0, With_security_enforced_clauseContext);
    }
    groupby_clause() {
        return this.tryGetRuleContext(0, Groupby_clauseContext);
    }
    orderby_clause() {
        return this.tryGetRuleContext(0, Orderby_clauseContext);
    }
    limit_clause() {
        return this.tryGetRuleContext(0, Limit_clauseContext);
    }
    offset_clause() {
        return this.tryGetRuleContext(0, Offset_clauseContext);
    }
    for_clause() {
        return this.tryGetRuleContext(0, For_clauseContext);
    }
    update_clause() {
        return this.tryGetRuleContext(0, Update_clauseContext);
    }
    having_clause() {
        return this.tryGetRuleContext(0, Having_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_soql_query; }
    enterRule(listener) {
        if (listener.enterSoql_query)
            listener.enterSoql_query(this);
    }
    exitRule(listener) {
        if (listener.exitSoql_query)
            listener.exitSoql_query(this);
    }
    accept(visitor) {
        if (visitor.visitSoql_query)
            return visitor.visitSoql_query(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Soql_queryContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Soql_queryContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Soql_queryContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Soql_queryContext.prototype, "accept", null);
class Select_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SELECT() { return this.getToken(SOQLParser.SELECT, 0); }
    select_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Select_specContext);
        }
        else {
            return this.getRuleContext(i, Select_specContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_select_clause; }
    enterRule(listener) {
        if (listener.enterSelect_clause)
            listener.enterSelect_clause(this);
    }
    exitRule(listener) {
        if (listener.exitSelect_clause)
            listener.exitSelect_clause(this);
    }
    accept(visitor) {
        if (visitor.visitSelect_clause)
            return visitor.visitSelect_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Select_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Select_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Select_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Select_clauseContext.prototype, "accept", null);
class From_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FROM() { return this.getToken(SOQLParser.FROM, 0); }
    object_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Object_specContext);
        }
        else {
            return this.getRuleContext(i, Object_specContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_from_clause; }
    enterRule(listener) {
        if (listener.enterFrom_clause)
            listener.enterFrom_clause(this);
    }
    exitRule(listener) {
        if (listener.exitFrom_clause)
            listener.exitFrom_clause(this);
    }
    accept(visitor) {
        if (visitor.visitFrom_clause)
            return visitor.visitFrom_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], From_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], From_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], From_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], From_clauseContext.prototype, "accept", null);
class Using_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    USING() { return this.getToken(SOQLParser.USING, 0); }
    SCOPE() { return this.getToken(SOQLParser.SCOPE, 0); }
    filter_scope_name() {
        return this.getRuleContext(0, Filter_scope_nameContext);
    }
    get ruleIndex() { return SOQLParser.RULE_using_clause; }
    enterRule(listener) {
        if (listener.enterUsing_clause)
            listener.enterUsing_clause(this);
    }
    exitRule(listener) {
        if (listener.exitUsing_clause)
            listener.exitUsing_clause(this);
    }
    accept(visitor) {
        if (visitor.visitUsing_clause)
            return visitor.visitUsing_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Using_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Using_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Using_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Using_clauseContext.prototype, "accept", null);
class Where_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    WHERE() { return this.getToken(SOQLParser.WHERE, 0); }
    condition() {
        return this.getRuleContext(0, ConditionContext);
    }
    get ruleIndex() { return SOQLParser.RULE_where_clause; }
    enterRule(listener) {
        if (listener.enterWhere_clause)
            listener.enterWhere_clause(this);
    }
    exitRule(listener) {
        if (listener.exitWhere_clause)
            listener.exitWhere_clause(this);
    }
    accept(visitor) {
        if (visitor.visitWhere_clause)
            return visitor.visitWhere_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Where_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Where_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Where_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Where_clauseContext.prototype, "accept", null);
class Groupby_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    GROUP() { return this.getToken(SOQLParser.GROUP, 0); }
    BY() { return this.getToken(SOQLParser.BY, 0); }
    group_by_rollup_clause() {
        return this.tryGetRuleContext(0, Group_by_rollup_clauseContext);
    }
    group_by_cube_clause() {
        return this.tryGetRuleContext(0, Group_by_cube_clauseContext);
    }
    group_by_plain_clause() {
        return this.tryGetRuleContext(0, Group_by_plain_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_groupby_clause; }
    enterRule(listener) {
        if (listener.enterGroupby_clause)
            listener.enterGroupby_clause(this);
    }
    exitRule(listener) {
        if (listener.exitGroupby_clause)
            listener.exitGroupby_clause(this);
    }
    accept(visitor) {
        if (visitor.visitGroupby_clause)
            return visitor.visitGroupby_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Groupby_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Groupby_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Groupby_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Groupby_clauseContext.prototype, "accept", null);
class Having_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    HAVING() { return this.getToken(SOQLParser.HAVING, 0); }
    condition() {
        return this.getRuleContext(0, ConditionContext);
    }
    get ruleIndex() { return SOQLParser.RULE_having_clause; }
    enterRule(listener) {
        if (listener.enterHaving_clause)
            listener.enterHaving_clause(this);
    }
    exitRule(listener) {
        if (listener.exitHaving_clause)
            listener.exitHaving_clause(this);
    }
    accept(visitor) {
        if (visitor.visitHaving_clause)
            return visitor.visitHaving_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Having_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Having_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Having_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Having_clauseContext.prototype, "accept", null);
class Orderby_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ORDER() { return this.getToken(SOQLParser.ORDER, 0); }
    BY() { return this.getToken(SOQLParser.BY, 0); }
    order_by_list() {
        return this.getRuleContext(0, Order_by_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_orderby_clause; }
    enterRule(listener) {
        if (listener.enterOrderby_clause)
            listener.enterOrderby_clause(this);
    }
    exitRule(listener) {
        if (listener.exitOrderby_clause)
            listener.exitOrderby_clause(this);
    }
    accept(visitor) {
        if (visitor.visitOrderby_clause)
            return visitor.visitOrderby_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Orderby_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Orderby_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Orderby_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Orderby_clauseContext.prototype, "accept", null);
class Limit_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    LIMIT() { return this.getToken(SOQLParser.LIMIT, 0); }
    UNSIGNED_INTEGER() { return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0); }
    get ruleIndex() { return SOQLParser.RULE_limit_clause; }
    enterRule(listener) {
        if (listener.enterLimit_clause)
            listener.enterLimit_clause(this);
    }
    exitRule(listener) {
        if (listener.exitLimit_clause)
            listener.exitLimit_clause(this);
    }
    accept(visitor) {
        if (visitor.visitLimit_clause)
            return visitor.visitLimit_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Limit_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Limit_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Limit_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Limit_clauseContext.prototype, "accept", null);
class Offset_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    OFFSET() { return this.getToken(SOQLParser.OFFSET, 0); }
    UNSIGNED_INTEGER() { return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0); }
    get ruleIndex() { return SOQLParser.RULE_offset_clause; }
    enterRule(listener) {
        if (listener.enterOffset_clause)
            listener.enterOffset_clause(this);
    }
    exitRule(listener) {
        if (listener.exitOffset_clause)
            listener.exitOffset_clause(this);
    }
    accept(visitor) {
        if (visitor.visitOffset_clause)
            return visitor.visitOffset_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Offset_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Offset_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Offset_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Offset_clauseContext.prototype, "accept", null);
class For_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FOR() { return this.getToken(SOQLParser.FOR, 0); }
    for_value(i) {
        if (i === undefined) {
            return this.getRuleContexts(For_valueContext);
        }
        else {
            return this.getRuleContext(i, For_valueContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_for_clause; }
    enterRule(listener) {
        if (listener.enterFor_clause)
            listener.enterFor_clause(this);
    }
    exitRule(listener) {
        if (listener.exitFor_clause)
            listener.exitFor_clause(this);
    }
    accept(visitor) {
        if (visitor.visitFor_clause)
            return visitor.visitFor_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], For_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], For_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], For_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], For_clauseContext.prototype, "accept", null);
class Update_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    UPDATE() { return this.getToken(SOQLParser.UPDATE, 0); }
    update_value(i) {
        if (i === undefined) {
            return this.getRuleContexts(Update_valueContext);
        }
        else {
            return this.getRuleContext(i, Update_valueContext);
        }
    }
    COMMA() { return this.tryGetToken(SOQLParser.COMMA, 0); }
    get ruleIndex() { return SOQLParser.RULE_update_clause; }
    enterRule(listener) {
        if (listener.enterUpdate_clause)
            listener.enterUpdate_clause(this);
    }
    exitRule(listener) {
        if (listener.exitUpdate_clause)
            listener.exitUpdate_clause(this);
    }
    accept(visitor) {
        if (visitor.visitUpdate_clause)
            return visitor.visitUpdate_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Update_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Update_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Update_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Update_clauseContext.prototype, "accept", null);
class Soql_subqueryContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    subquery_select_clause() {
        return this.getRuleContext(0, Subquery_select_clauseContext);
    }
    from_clause() {
        return this.getRuleContext(0, From_clauseContext);
    }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    using_clause() {
        return this.tryGetRuleContext(0, Using_clauseContext);
    }
    where_clause() {
        return this.tryGetRuleContext(0, Where_clauseContext);
    }
    with_clause() {
        return this.tryGetRuleContext(0, With_clauseContext);
    }
    orderby_clause() {
        return this.tryGetRuleContext(0, Orderby_clauseContext);
    }
    limit_clause() {
        return this.tryGetRuleContext(0, Limit_clauseContext);
    }
    offset_clause() {
        return this.tryGetRuleContext(0, Offset_clauseContext);
    }
    for_clause() {
        return this.tryGetRuleContext(0, For_clauseContext);
    }
    update_clause() {
        return this.tryGetRuleContext(0, Update_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_soql_subquery; }
    enterRule(listener) {
        if (listener.enterSoql_subquery)
            listener.enterSoql_subquery(this);
    }
    exitRule(listener) {
        if (listener.exitSoql_subquery)
            listener.exitSoql_subquery(this);
    }
    accept(visitor) {
        if (visitor.visitSoql_subquery)
            return visitor.visitSoql_subquery(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Soql_subqueryContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Soql_subqueryContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Soql_subqueryContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Soql_subqueryContext.prototype, "accept", null);
class Subquery_select_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SELECT() { return this.getToken(SOQLParser.SELECT, 0); }
    subquery_select_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Subquery_select_specContext);
        }
        else {
            return this.getRuleContext(i, Subquery_select_specContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_subquery_select_clause; }
    enterRule(listener) {
        if (listener.enterSubquery_select_clause)
            listener.enterSubquery_select_clause(this);
    }
    exitRule(listener) {
        if (listener.exitSubquery_select_clause)
            listener.exitSubquery_select_clause(this);
    }
    accept(visitor) {
        if (visitor.visitSubquery_select_clause)
            return visitor.visitSubquery_select_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Subquery_select_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Subquery_select_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Subquery_select_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Subquery_select_clauseContext.prototype, "accept", null);
class Select_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field_spec() {
        return this.tryGetRuleContext(0, Field_specContext);
    }
    function_call_spec() {
        return this.tryGetRuleContext(0, Function_call_specContext);
    }
    soql_subquery() {
        return this.tryGetRuleContext(0, Soql_subqueryContext);
    }
    typeof_spec() {
        return this.tryGetRuleContext(0, Typeof_specContext);
    }
    get ruleIndex() { return SOQLParser.RULE_select_spec; }
    enterRule(listener) {
        if (listener.enterSelect_spec)
            listener.enterSelect_spec(this);
    }
    exitRule(listener) {
        if (listener.exitSelect_spec)
            listener.exitSelect_spec(this);
    }
    accept(visitor) {
        if (visitor.visitSelect_spec)
            return visitor.visitSelect_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Select_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Select_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Select_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Select_specContext.prototype, "accept", null);
class Subquery_select_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field_spec() {
        return this.tryGetRuleContext(0, Field_specContext);
    }
    function_call_spec() {
        return this.tryGetRuleContext(0, Function_call_specContext);
    }
    get ruleIndex() { return SOQLParser.RULE_subquery_select_spec; }
    enterRule(listener) {
        if (listener.enterSubquery_select_spec)
            listener.enterSubquery_select_spec(this);
    }
    exitRule(listener) {
        if (listener.exitSubquery_select_spec)
            listener.exitSubquery_select_spec(this);
    }
    accept(visitor) {
        if (visitor.visitSubquery_select_spec)
            return visitor.visitSubquery_select_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Subquery_select_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Subquery_select_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Subquery_select_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Subquery_select_specContext.prototype, "accept", null);
class Field_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field() {
        return this.getRuleContext(0, FieldContext);
    }
    alias() {
        return this.tryGetRuleContext(0, AliasContext);
    }
    get ruleIndex() { return SOQLParser.RULE_field_spec; }
    enterRule(listener) {
        if (listener.enterField_spec)
            listener.enterField_spec(this);
    }
    exitRule(listener) {
        if (listener.exitField_spec)
            listener.exitField_spec(this);
    }
    accept(visitor) {
        if (visitor.visitField_spec)
            return visitor.visitField_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Field_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Field_specContext.prototype, "accept", null);
class Function_call_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    function_call() {
        return this.getRuleContext(0, Function_callContext);
    }
    alias() {
        return this.tryGetRuleContext(0, AliasContext);
    }
    get ruleIndex() { return SOQLParser.RULE_function_call_spec; }
    enterRule(listener) {
        if (listener.enterFunction_call_spec)
            listener.enterFunction_call_spec(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_call_spec)
            listener.exitFunction_call_spec(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_call_spec)
            return visitor.visitFunction_call_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_call_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_call_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_call_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_call_specContext.prototype, "accept", null);
class FieldContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field_name() {
        return this.getRuleContext(0, Field_nameContext);
    }
    object_prefix() {
        return this.tryGetRuleContext(0, Object_prefixContext);
    }
    get ruleIndex() { return SOQLParser.RULE_field; }
    enterRule(listener) {
        if (listener.enterField)
            listener.enterField(this);
    }
    exitRule(listener) {
        if (listener.exitField)
            listener.exitField(this);
    }
    accept(visitor) {
        if (visitor.visitField)
            return visitor.visitField(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], FieldContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], FieldContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], FieldContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], FieldContext.prototype, "accept", null);
class Function_callContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    function_name() {
        return this.getRuleContext(0, Function_nameContext);
    }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    function_parameter_list() {
        return this.tryGetRuleContext(0, Function_parameter_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_function_call; }
    enterRule(listener) {
        if (listener.enterFunction_call)
            listener.enterFunction_call(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_call)
            listener.exitFunction_call(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_call)
            return visitor.visitFunction_call(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_callContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_callContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_callContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_callContext.prototype, "accept", null);
class Function_parameter_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    function_parameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_parameterContext);
        }
        else {
            return this.getRuleContext(i, Function_parameterContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_function_parameter_list; }
    enterRule(listener) {
        if (listener.enterFunction_parameter_list)
            listener.enterFunction_parameter_list(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_parameter_list)
            listener.exitFunction_parameter_list(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_parameter_list)
            return visitor.visitFunction_parameter_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_parameter_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_parameter_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_parameter_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_parameter_listContext.prototype, "accept", null);
class Function_parameterContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field() {
        return this.tryGetRuleContext(0, FieldContext);
    }
    literal() {
        return this.tryGetRuleContext(0, LiteralContext);
    }
    function_call() {
        return this.tryGetRuleContext(0, Function_callContext);
    }
    get ruleIndex() { return SOQLParser.RULE_function_parameter; }
    enterRule(listener) {
        if (listener.enterFunction_parameter)
            listener.enterFunction_parameter(this);
    }
    exitRule(listener) {
        if (listener.exitFunction_parameter)
            listener.exitFunction_parameter(this);
    }
    accept(visitor) {
        if (visitor.visitFunction_parameter)
            return visitor.visitFunction_parameter(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Function_parameterContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_parameterContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Function_parameterContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Function_parameterContext.prototype, "accept", null);
class Typeof_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TYPEOF() { return this.getToken(SOQLParser.TYPEOF, 0); }
    field() {
        return this.getRuleContext(0, FieldContext);
    }
    typeof_when_then_clause_list() {
        return this.getRuleContext(0, Typeof_when_then_clause_listContext);
    }
    END() { return this.getToken(SOQLParser.END, 0); }
    typeof_else_clause() {
        return this.tryGetRuleContext(0, Typeof_else_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_typeof_spec; }
    enterRule(listener) {
        if (listener.enterTypeof_spec)
            listener.enterTypeof_spec(this);
    }
    exitRule(listener) {
        if (listener.exitTypeof_spec)
            listener.exitTypeof_spec(this);
    }
    accept(visitor) {
        if (visitor.visitTypeof_spec)
            return visitor.visitTypeof_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Typeof_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Typeof_specContext.prototype, "accept", null);
class Typeof_when_then_clause_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    typeof_when_then_clause(i) {
        if (i === undefined) {
            return this.getRuleContexts(Typeof_when_then_clauseContext);
        }
        else {
            return this.getRuleContext(i, Typeof_when_then_clauseContext);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_typeof_when_then_clause_list; }
    enterRule(listener) {
        if (listener.enterTypeof_when_then_clause_list)
            listener.enterTypeof_when_then_clause_list(this);
    }
    exitRule(listener) {
        if (listener.exitTypeof_when_then_clause_list)
            listener.exitTypeof_when_then_clause_list(this);
    }
    accept(visitor) {
        if (visitor.visitTypeof_when_then_clause_list)
            return visitor.visitTypeof_when_then_clause_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Typeof_when_then_clause_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_when_then_clause_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_when_then_clause_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Typeof_when_then_clause_listContext.prototype, "accept", null);
class Typeof_when_then_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    WHEN() { return this.getToken(SOQLParser.WHEN, 0); }
    object_name() {
        return this.getRuleContext(0, Object_nameContext);
    }
    typeof_then_clause() {
        return this.getRuleContext(0, Typeof_then_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_typeof_when_then_clause; }
    enterRule(listener) {
        if (listener.enterTypeof_when_then_clause)
            listener.enterTypeof_when_then_clause(this);
    }
    exitRule(listener) {
        if (listener.exitTypeof_when_then_clause)
            listener.exitTypeof_when_then_clause(this);
    }
    accept(visitor) {
        if (visitor.visitTypeof_when_then_clause)
            return visitor.visitTypeof_when_then_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Typeof_when_then_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_when_then_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_when_then_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Typeof_when_then_clauseContext.prototype, "accept", null);
class Typeof_then_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    THEN() { return this.getToken(SOQLParser.THEN, 0); }
    field_list() {
        return this.getRuleContext(0, Field_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_typeof_then_clause; }
    enterRule(listener) {
        if (listener.enterTypeof_then_clause)
            listener.enterTypeof_then_clause(this);
    }
    exitRule(listener) {
        if (listener.exitTypeof_then_clause)
            listener.exitTypeof_then_clause(this);
    }
    accept(visitor) {
        if (visitor.visitTypeof_then_clause)
            return visitor.visitTypeof_then_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Typeof_then_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_then_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_then_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Typeof_then_clauseContext.prototype, "accept", null);
class Typeof_else_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ELSE() { return this.getToken(SOQLParser.ELSE, 0); }
    field_list() {
        return this.getRuleContext(0, Field_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_typeof_else_clause; }
    enterRule(listener) {
        if (listener.enterTypeof_else_clause)
            listener.enterTypeof_else_clause(this);
    }
    exitRule(listener) {
        if (listener.exitTypeof_else_clause)
            listener.exitTypeof_else_clause(this);
    }
    accept(visitor) {
        if (visitor.visitTypeof_else_clause)
            return visitor.visitTypeof_else_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Typeof_else_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_else_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Typeof_else_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Typeof_else_clauseContext.prototype, "accept", null);
class Field_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field(i) {
        if (i === undefined) {
            return this.getRuleContexts(FieldContext);
        }
        else {
            return this.getRuleContext(i, FieldContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_field_list; }
    enterRule(listener) {
        if (listener.enterField_list)
            listener.enterField_list(this);
    }
    exitRule(listener) {
        if (listener.exitField_list)
            listener.exitField_list(this);
    }
    accept(visitor) {
        if (visitor.visitField_list)
            return visitor.visitField_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Field_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Field_listContext.prototype, "accept", null);
class Object_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    object_name() {
        return this.getRuleContext(0, Object_nameContext);
    }
    object_prefix() {
        return this.tryGetRuleContext(0, Object_prefixContext);
    }
    alias() {
        return this.tryGetRuleContext(0, AliasContext);
    }
    get ruleIndex() { return SOQLParser.RULE_object_spec; }
    enterRule(listener) {
        if (listener.enterObject_spec)
            listener.enterObject_spec(this);
    }
    exitRule(listener) {
        if (listener.exitObject_spec)
            listener.exitObject_spec(this);
    }
    accept(visitor) {
        if (visitor.visitObject_spec)
            return visitor.visitObject_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Object_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Object_specContext.prototype, "accept", null);
class Object_prefixContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    object_name(i) {
        if (i === undefined) {
            return this.getRuleContexts(Object_nameContext);
        }
        else {
            return this.getRuleContext(i, Object_nameContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.DOT);
        }
        else {
            return this.getToken(SOQLParser.DOT, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_object_prefix; }
    enterRule(listener) {
        if (listener.enterObject_prefix)
            listener.enterObject_prefix(this);
    }
    exitRule(listener) {
        if (listener.exitObject_prefix)
            listener.exitObject_prefix(this);
    }
    accept(visitor) {
        if (visitor.visitObject_prefix)
            return visitor.visitObject_prefix(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Object_prefixContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_prefixContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Object_prefixContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Object_prefixContext.prototype, "accept", null);
class Comparison_operatorContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    EQ() { return this.tryGetToken(SOQLParser.EQ, 0); }
    NOT_EQ() { return this.tryGetToken(SOQLParser.NOT_EQ, 0); }
    LET() { return this.tryGetToken(SOQLParser.LET, 0); }
    GET() { return this.tryGetToken(SOQLParser.GET, 0); }
    GTH() { return this.tryGetToken(SOQLParser.GTH, 0); }
    LTH() { return this.tryGetToken(SOQLParser.LTH, 0); }
    get ruleIndex() { return SOQLParser.RULE_comparison_operator; }
    enterRule(listener) {
        if (listener.enterComparison_operator)
            listener.enterComparison_operator(this);
    }
    exitRule(listener) {
        if (listener.exitComparison_operator)
            listener.exitComparison_operator(this);
    }
    accept(visitor) {
        if (visitor.visitComparison_operator)
            return visitor.visitComparison_operator(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Comparison_operatorContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Comparison_operatorContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Comparison_operatorContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Comparison_operatorContext.prototype, "accept", null);
class Set_operatorContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    IN() { return this.tryGetToken(SOQLParser.IN, 0); }
    NOT() { return this.tryGetToken(SOQLParser.NOT, 0); }
    INCLUDES() { return this.tryGetToken(SOQLParser.INCLUDES, 0); }
    EXCLUDES() { return this.tryGetToken(SOQLParser.EXCLUDES, 0); }
    get ruleIndex() { return SOQLParser.RULE_set_operator; }
    enterRule(listener) {
        if (listener.enterSet_operator)
            listener.enterSet_operator(this);
    }
    exitRule(listener) {
        if (listener.exitSet_operator)
            listener.exitSet_operator(this);
    }
    accept(visitor) {
        if (visitor.visitSet_operator)
            return visitor.visitSet_operator(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Set_operatorContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_operatorContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_operatorContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Set_operatorContext.prototype, "accept", null);
class ConditionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    condition1(i) {
        if (i === undefined) {
            return this.getRuleContexts(Condition1Context);
        }
        else {
            return this.getRuleContext(i, Condition1Context);
        }
    }
    OR(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.OR);
        }
        else {
            return this.getToken(SOQLParser.OR, i);
        }
    }
    AND(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.AND);
        }
        else {
            return this.getToken(SOQLParser.AND, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_condition; }
    enterRule(listener) {
        if (listener.enterCondition)
            listener.enterCondition(this);
    }
    exitRule(listener) {
        if (listener.exitCondition)
            listener.exitCondition(this);
    }
    accept(visitor) {
        if (visitor.visitCondition)
            return visitor.visitCondition(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], ConditionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ConditionContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ConditionContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], ConditionContext.prototype, "accept", null);
class Condition1Context extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    simple_condition() {
        return this.tryGetRuleContext(0, Simple_conditionContext);
    }
    parenthesis() {
        return this.tryGetRuleContext(0, ParenthesisContext);
    }
    NOT() { return this.tryGetToken(SOQLParser.NOT, 0); }
    get ruleIndex() { return SOQLParser.RULE_condition1; }
    enterRule(listener) {
        if (listener.enterCondition1)
            listener.enterCondition1(this);
    }
    exitRule(listener) {
        if (listener.exitCondition1)
            listener.exitCondition1(this);
    }
    accept(visitor) {
        if (visitor.visitCondition1)
            return visitor.visitCondition1(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Condition1Context.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Condition1Context.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Condition1Context.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Condition1Context.prototype, "accept", null);
class ParenthesisContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    condition() {
        return this.getRuleContext(0, ConditionContext);
    }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    get ruleIndex() { return SOQLParser.RULE_parenthesis; }
    enterRule(listener) {
        if (listener.enterParenthesis)
            listener.enterParenthesis(this);
    }
    exitRule(listener) {
        if (listener.exitParenthesis)
            listener.exitParenthesis(this);
    }
    accept(visitor) {
        if (visitor.visitParenthesis)
            return visitor.visitParenthesis(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], ParenthesisContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ParenthesisContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ParenthesisContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], ParenthesisContext.prototype, "accept", null);
class Simple_conditionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field_based_condition() {
        return this.tryGetRuleContext(0, Field_based_conditionContext);
    }
    set_based_condition() {
        return this.tryGetRuleContext(0, Set_based_conditionContext);
    }
    like_based_condition() {
        return this.tryGetRuleContext(0, Like_based_conditionContext);
    }
    get ruleIndex() { return SOQLParser.RULE_simple_condition; }
    enterRule(listener) {
        if (listener.enterSimple_condition)
            listener.enterSimple_condition(this);
    }
    exitRule(listener) {
        if (listener.exitSimple_condition)
            listener.exitSimple_condition(this);
    }
    accept(visitor) {
        if (visitor.visitSimple_condition)
            return visitor.visitSimple_condition(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Simple_conditionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Simple_conditionContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Simple_conditionContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Simple_conditionContext.prototype, "accept", null);
class Field_based_conditionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    condition_field() {
        return this.getRuleContext(0, Condition_fieldContext);
    }
    comparison_operator() {
        return this.getRuleContext(0, Comparison_operatorContext);
    }
    literal() {
        return this.getRuleContext(0, LiteralContext);
    }
    get ruleIndex() { return SOQLParser.RULE_field_based_condition; }
    enterRule(listener) {
        if (listener.enterField_based_condition)
            listener.enterField_based_condition(this);
    }
    exitRule(listener) {
        if (listener.exitField_based_condition)
            listener.exitField_based_condition(this);
    }
    accept(visitor) {
        if (visitor.visitField_based_condition)
            return visitor.visitField_based_condition(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Field_based_conditionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_based_conditionContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Field_based_conditionContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Field_based_conditionContext.prototype, "accept", null);
class Set_based_conditionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    condition_field() {
        return this.getRuleContext(0, Condition_fieldContext);
    }
    set_operator() {
        return this.getRuleContext(0, Set_operatorContext);
    }
    soql_subquery() {
        return this.tryGetRuleContext(0, Soql_subqueryContext);
    }
    set_values() {
        return this.tryGetRuleContext(0, Set_valuesContext);
    }
    get ruleIndex() { return SOQLParser.RULE_set_based_condition; }
    enterRule(listener) {
        if (listener.enterSet_based_condition)
            listener.enterSet_based_condition(this);
    }
    exitRule(listener) {
        if (listener.exitSet_based_condition)
            listener.exitSet_based_condition(this);
    }
    accept(visitor) {
        if (visitor.visitSet_based_condition)
            return visitor.visitSet_based_condition(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Set_based_conditionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_based_conditionContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_based_conditionContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Set_based_conditionContext.prototype, "accept", null);
class Like_based_conditionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    condition_field() {
        return this.getRuleContext(0, Condition_fieldContext);
    }
    LIKE() { return this.getToken(SOQLParser.LIKE, 0); }
    STRING_VALUE() { return this.tryGetToken(SOQLParser.STRING_VALUE, 0); }
    LIKE_STRING_VALUE() { return this.tryGetToken(SOQLParser.LIKE_STRING_VALUE, 0); }
    get ruleIndex() { return SOQLParser.RULE_like_based_condition; }
    enterRule(listener) {
        if (listener.enterLike_based_condition)
            listener.enterLike_based_condition(this);
    }
    exitRule(listener) {
        if (listener.exitLike_based_condition)
            listener.exitLike_based_condition(this);
    }
    accept(visitor) {
        if (visitor.visitLike_based_condition)
            return visitor.visitLike_based_condition(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Like_based_conditionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Like_based_conditionContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Like_based_conditionContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Like_based_conditionContext.prototype, "accept", null);
class Condition_fieldContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field() {
        return this.tryGetRuleContext(0, FieldContext);
    }
    function_call() {
        return this.tryGetRuleContext(0, Function_callContext);
    }
    get ruleIndex() { return SOQLParser.RULE_condition_field; }
    enterRule(listener) {
        if (listener.enterCondition_field)
            listener.enterCondition_field(this);
    }
    exitRule(listener) {
        if (listener.exitCondition_field)
            listener.exitCondition_field(this);
    }
    accept(visitor) {
        if (visitor.visitCondition_field)
            return visitor.visitCondition_field(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Condition_fieldContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Condition_fieldContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Condition_fieldContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Condition_fieldContext.prototype, "accept", null);
class Set_valuesContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    set_value_list() {
        return this.getRuleContext(0, Set_value_listContext);
    }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    get ruleIndex() { return SOQLParser.RULE_set_values; }
    enterRule(listener) {
        if (listener.enterSet_values)
            listener.enterSet_values(this);
    }
    exitRule(listener) {
        if (listener.exitSet_values)
            listener.exitSet_values(this);
    }
    accept(visitor) {
        if (visitor.visitSet_values)
            return visitor.visitSet_values(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Set_valuesContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_valuesContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_valuesContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Set_valuesContext.prototype, "accept", null);
class Set_value_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    literal(i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_set_value_list; }
    enterRule(listener) {
        if (listener.enterSet_value_list)
            listener.enterSet_value_list(this);
    }
    exitRule(listener) {
        if (listener.exitSet_value_list)
            listener.exitSet_value_list(this);
    }
    accept(visitor) {
        if (visitor.visitSet_value_list)
            return visitor.visitSet_value_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Set_value_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_value_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Set_value_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Set_value_listContext.prototype, "accept", null);
class With_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    WITH() { return this.getToken(SOQLParser.WITH, 0); }
    with_plain_clause() {
        return this.tryGetRuleContext(0, With_plain_clauseContext);
    }
    with_data_category_clause() {
        return this.tryGetRuleContext(0, With_data_category_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_with_clause; }
    enterRule(listener) {
        if (listener.enterWith_clause)
            listener.enterWith_clause(this);
    }
    exitRule(listener) {
        if (listener.exitWith_clause)
            listener.exitWith_clause(this);
    }
    accept(visitor) {
        if (visitor.visitWith_clause)
            return visitor.visitWith_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], With_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], With_clauseContext.prototype, "accept", null);
class With_plain_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field_based_condition() {
        return this.getRuleContext(0, Field_based_conditionContext);
    }
    get ruleIndex() { return SOQLParser.RULE_with_plain_clause; }
    enterRule(listener) {
        if (listener.enterWith_plain_clause)
            listener.enterWith_plain_clause(this);
    }
    exitRule(listener) {
        if (listener.exitWith_plain_clause)
            listener.exitWith_plain_clause(this);
    }
    accept(visitor) {
        if (visitor.visitWith_plain_clause)
            return visitor.visitWith_plain_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], With_plain_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_plain_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_plain_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], With_plain_clauseContext.prototype, "accept", null);
class With_data_category_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    DATA() { return this.getToken(SOQLParser.DATA, 0); }
    CATEGORY() { return this.getToken(SOQLParser.CATEGORY, 0); }
    data_category_spec_list() {
        return this.getRuleContext(0, Data_category_spec_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_with_data_category_clause; }
    enterRule(listener) {
        if (listener.enterWith_data_category_clause)
            listener.enterWith_data_category_clause(this);
    }
    exitRule(listener) {
        if (listener.exitWith_data_category_clause)
            listener.exitWith_data_category_clause(this);
    }
    accept(visitor) {
        if (visitor.visitWith_data_category_clause)
            return visitor.visitWith_data_category_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], With_data_category_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_data_category_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_data_category_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], With_data_category_clauseContext.prototype, "accept", null);
class Data_category_spec_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    data_category_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Data_category_specContext);
        }
        else {
            return this.getRuleContext(i, Data_category_specContext);
        }
    }
    AND(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.AND);
        }
        else {
            return this.getToken(SOQLParser.AND, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_data_category_spec_list; }
    enterRule(listener) {
        if (listener.enterData_category_spec_list)
            listener.enterData_category_spec_list(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_spec_list)
            listener.exitData_category_spec_list(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_spec_list)
            return visitor.visitData_category_spec_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_spec_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_spec_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_spec_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_spec_listContext.prototype, "accept", null);
class Data_category_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    data_category_group_name() {
        return this.getRuleContext(0, Data_category_group_nameContext);
    }
    data_category_selector() {
        return this.getRuleContext(0, Data_category_selectorContext);
    }
    data_category_parameter_list() {
        return this.getRuleContext(0, Data_category_parameter_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_data_category_spec; }
    enterRule(listener) {
        if (listener.enterData_category_spec)
            listener.enterData_category_spec(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_spec)
            listener.exitData_category_spec(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_spec)
            return visitor.visitData_category_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_specContext.prototype, "accept", null);
class Data_category_parameter_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    data_category_name(i) {
        if (i === undefined) {
            return this.getRuleContexts(Data_category_nameContext);
        }
        else {
            return this.getRuleContext(i, Data_category_nameContext);
        }
    }
    LPAREN() { return this.tryGetToken(SOQLParser.LPAREN, 0); }
    RPAREN() { return this.tryGetToken(SOQLParser.RPAREN, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_data_category_parameter_list; }
    enterRule(listener) {
        if (listener.enterData_category_parameter_list)
            listener.enterData_category_parameter_list(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_parameter_list)
            listener.exitData_category_parameter_list(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_parameter_list)
            return visitor.visitData_category_parameter_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_parameter_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_parameter_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_parameter_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_parameter_listContext.prototype, "accept", null);
class Data_category_selectorContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    AT() { return this.tryGetToken(SOQLParser.AT, 0); }
    ABOVE() { return this.tryGetToken(SOQLParser.ABOVE, 0); }
    ABOVE_OR_BELOW() { return this.tryGetToken(SOQLParser.ABOVE_OR_BELOW, 0); }
    BELOW() { return this.tryGetToken(SOQLParser.BELOW, 0); }
    get ruleIndex() { return SOQLParser.RULE_data_category_selector; }
    enterRule(listener) {
        if (listener.enterData_category_selector)
            listener.enterData_category_selector(this);
    }
    exitRule(listener) {
        if (listener.exitData_category_selector)
            listener.exitData_category_selector(this);
    }
    accept(visitor) {
        if (visitor.visitData_category_selector)
            return visitor.visitData_category_selector(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Data_category_selectorContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_selectorContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Data_category_selectorContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Data_category_selectorContext.prototype, "accept", null);
class With_security_enforced_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    WITH() { return this.getToken(SOQLParser.WITH, 0); }
    SECURITY_ENFORCED() { return this.getToken(SOQLParser.SECURITY_ENFORCED, 0); }
    get ruleIndex() { return SOQLParser.RULE_with_security_enforced_clause; }
    enterRule(listener) {
        if (listener.enterWith_security_enforced_clause)
            listener.enterWith_security_enforced_clause(this);
    }
    exitRule(listener) {
        if (listener.exitWith_security_enforced_clause)
            listener.exitWith_security_enforced_clause(this);
    }
    accept(visitor) {
        if (visitor.visitWith_security_enforced_clause)
            return visitor.visitWith_security_enforced_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], With_security_enforced_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_security_enforced_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], With_security_enforced_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], With_security_enforced_clauseContext.prototype, "accept", null);
class Group_by_plain_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    group_by_list() {
        return this.getRuleContext(0, Group_by_listContext);
    }
    get ruleIndex() { return SOQLParser.RULE_group_by_plain_clause; }
    enterRule(listener) {
        if (listener.enterGroup_by_plain_clause)
            listener.enterGroup_by_plain_clause(this);
    }
    exitRule(listener) {
        if (listener.exitGroup_by_plain_clause)
            listener.exitGroup_by_plain_clause(this);
    }
    accept(visitor) {
        if (visitor.visitGroup_by_plain_clause)
            return visitor.visitGroup_by_plain_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Group_by_plain_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_plain_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_plain_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Group_by_plain_clauseContext.prototype, "accept", null);
class Group_by_rollup_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ROLLUP() { return this.getToken(SOQLParser.ROLLUP, 0); }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    group_by_list() {
        return this.getRuleContext(0, Group_by_listContext);
    }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    get ruleIndex() { return SOQLParser.RULE_group_by_rollup_clause; }
    enterRule(listener) {
        if (listener.enterGroup_by_rollup_clause)
            listener.enterGroup_by_rollup_clause(this);
    }
    exitRule(listener) {
        if (listener.exitGroup_by_rollup_clause)
            listener.exitGroup_by_rollup_clause(this);
    }
    accept(visitor) {
        if (visitor.visitGroup_by_rollup_clause)
            return visitor.visitGroup_by_rollup_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Group_by_rollup_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_rollup_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_rollup_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Group_by_rollup_clauseContext.prototype, "accept", null);
class Group_by_cube_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    CUBE() { return this.getToken(SOQLParser.CUBE, 0); }
    LPAREN() { return this.getToken(SOQLParser.LPAREN, 0); }
    group_by_list() {
        return this.getRuleContext(0, Group_by_listContext);
    }
    RPAREN() { return this.getToken(SOQLParser.RPAREN, 0); }
    get ruleIndex() { return SOQLParser.RULE_group_by_cube_clause; }
    enterRule(listener) {
        if (listener.enterGroup_by_cube_clause)
            listener.enterGroup_by_cube_clause(this);
    }
    exitRule(listener) {
        if (listener.exitGroup_by_cube_clause)
            listener.exitGroup_by_cube_clause(this);
    }
    accept(visitor) {
        if (visitor.visitGroup_by_cube_clause)
            return visitor.visitGroup_by_cube_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Group_by_cube_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_cube_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_cube_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Group_by_cube_clauseContext.prototype, "accept", null);
class Group_by_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    group_by_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Group_by_specContext);
        }
        else {
            return this.getRuleContext(i, Group_by_specContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_group_by_list; }
    enterRule(listener) {
        if (listener.enterGroup_by_list)
            listener.enterGroup_by_list(this);
    }
    exitRule(listener) {
        if (listener.exitGroup_by_list)
            listener.exitGroup_by_list(this);
    }
    accept(visitor) {
        if (visitor.visitGroup_by_list)
            return visitor.visitGroup_by_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Group_by_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Group_by_listContext.prototype, "accept", null);
class Group_by_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field() {
        return this.tryGetRuleContext(0, FieldContext);
    }
    function_call() {
        return this.tryGetRuleContext(0, Function_callContext);
    }
    get ruleIndex() { return SOQLParser.RULE_group_by_spec; }
    enterRule(listener) {
        if (listener.enterGroup_by_spec)
            listener.enterGroup_by_spec(this);
    }
    exitRule(listener) {
        if (listener.exitGroup_by_spec)
            listener.exitGroup_by_spec(this);
    }
    accept(visitor) {
        if (visitor.visitGroup_by_spec)
            return visitor.visitGroup_by_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Group_by_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Group_by_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Group_by_specContext.prototype, "accept", null);
class Order_by_listContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    order_by_spec(i) {
        if (i === undefined) {
            return this.getRuleContexts(Order_by_specContext);
        }
        else {
            return this.getRuleContext(i, Order_by_specContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(SOQLParser.COMMA);
        }
        else {
            return this.getToken(SOQLParser.COMMA, i);
        }
    }
    get ruleIndex() { return SOQLParser.RULE_order_by_list; }
    enterRule(listener) {
        if (listener.enterOrder_by_list)
            listener.enterOrder_by_list(this);
    }
    exitRule(listener) {
        if (listener.exitOrder_by_list)
            listener.exitOrder_by_list(this);
    }
    accept(visitor) {
        if (visitor.visitOrder_by_list)
            return visitor.visitOrder_by_list(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Order_by_listContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_listContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_listContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Order_by_listContext.prototype, "accept", null);
class Order_by_specContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    order_by_field() {
        return this.getRuleContext(0, Order_by_fieldContext);
    }
    order_by_direction_clause() {
        return this.tryGetRuleContext(0, Order_by_direction_clauseContext);
    }
    order_by_nulls_clause() {
        return this.tryGetRuleContext(0, Order_by_nulls_clauseContext);
    }
    get ruleIndex() { return SOQLParser.RULE_order_by_spec; }
    enterRule(listener) {
        if (listener.enterOrder_by_spec)
            listener.enterOrder_by_spec(this);
    }
    exitRule(listener) {
        if (listener.exitOrder_by_spec)
            listener.exitOrder_by_spec(this);
    }
    accept(visitor) {
        if (visitor.visitOrder_by_spec)
            return visitor.visitOrder_by_spec(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Order_by_specContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_specContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_specContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Order_by_specContext.prototype, "accept", null);
class Order_by_direction_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ASC() { return this.tryGetToken(SOQLParser.ASC, 0); }
    DESC() { return this.tryGetToken(SOQLParser.DESC, 0); }
    get ruleIndex() { return SOQLParser.RULE_order_by_direction_clause; }
    enterRule(listener) {
        if (listener.enterOrder_by_direction_clause)
            listener.enterOrder_by_direction_clause(this);
    }
    exitRule(listener) {
        if (listener.exitOrder_by_direction_clause)
            listener.exitOrder_by_direction_clause(this);
    }
    accept(visitor) {
        if (visitor.visitOrder_by_direction_clause)
            return visitor.visitOrder_by_direction_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Order_by_direction_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_direction_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_direction_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Order_by_direction_clauseContext.prototype, "accept", null);
class Order_by_nulls_clauseContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    NULLS() { return this.getToken(SOQLParser.NULLS, 0); }
    FIRST() { return this.tryGetToken(SOQLParser.FIRST, 0); }
    LAST() { return this.tryGetToken(SOQLParser.LAST, 0); }
    get ruleIndex() { return SOQLParser.RULE_order_by_nulls_clause; }
    enterRule(listener) {
        if (listener.enterOrder_by_nulls_clause)
            listener.enterOrder_by_nulls_clause(this);
    }
    exitRule(listener) {
        if (listener.exitOrder_by_nulls_clause)
            listener.exitOrder_by_nulls_clause(this);
    }
    accept(visitor) {
        if (visitor.visitOrder_by_nulls_clause)
            return visitor.visitOrder_by_nulls_clause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Order_by_nulls_clauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_nulls_clauseContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_nulls_clauseContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Order_by_nulls_clauseContext.prototype, "accept", null);
class Order_by_fieldContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    field() {
        return this.tryGetRuleContext(0, FieldContext);
    }
    function_call() {
        return this.tryGetRuleContext(0, Function_callContext);
    }
    get ruleIndex() { return SOQLParser.RULE_order_by_field; }
    enterRule(listener) {
        if (listener.enterOrder_by_field)
            listener.enterOrder_by_field(this);
    }
    exitRule(listener) {
        if (listener.exitOrder_by_field)
            listener.exitOrder_by_field(this);
    }
    accept(visitor) {
        if (visitor.visitOrder_by_field)
            return visitor.visitOrder_by_field(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Order_by_fieldContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_fieldContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Order_by_fieldContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Order_by_fieldContext.prototype, "accept", null);
class For_valueContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    REFERENCE() { return this.tryGetToken(SOQLParser.REFERENCE, 0); }
    VIEW() { return this.tryGetToken(SOQLParser.VIEW, 0); }
    UPDATE() { return this.tryGetToken(SOQLParser.UPDATE, 0); }
    get ruleIndex() { return SOQLParser.RULE_for_value; }
    enterRule(listener) {
        if (listener.enterFor_value)
            listener.enterFor_value(this);
    }
    exitRule(listener) {
        if (listener.exitFor_value)
            listener.exitFor_value(this);
    }
    accept(visitor) {
        if (visitor.visitFor_value)
            return visitor.visitFor_value(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], For_valueContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], For_valueContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], For_valueContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], For_valueContext.prototype, "accept", null);
class Update_valueContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TRACKING() { return this.tryGetToken(SOQLParser.TRACKING, 0); }
    VIEWSTAT() { return this.tryGetToken(SOQLParser.VIEWSTAT, 0); }
    get ruleIndex() { return SOQLParser.RULE_update_value; }
    enterRule(listener) {
        if (listener.enterUpdate_value)
            listener.enterUpdate_value(this);
    }
    exitRule(listener) {
        if (listener.exitUpdate_value)
            listener.exitUpdate_value(this);
    }
    accept(visitor) {
        if (visitor.visitUpdate_value)
            return visitor.visitUpdate_value(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators.Override,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], Update_valueContext.prototype, "ruleIndex", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Update_valueContext.prototype, "enterRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Update_valueContext.prototype, "exitRule", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], Update_valueContext.prototype, "accept", null);
class SOQLParser extends Parser.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator.ParserATNSimulator(SOQLParser._ATN, this);
    }
    get vocabulary() {
        return SOQLParser.VOCABULARY;
    }
    get grammarFileName() { return "SOQL.g4"; }
    get ruleNames() { return SOQLParser.ruleNames; }
    get serializedATN() { return SOQLParser._serializedATN; }
    keywords_alias_allowed() {
        let _localctx = new Keywords_alias_allowedContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, SOQLParser.RULE_keywords_alias_allowed);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 176;
                _la = this._input.LA(1);
                if (!(((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.SECURITY_ENFORCED - 34)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    keywords_name_allowed() {
        let _localctx = new Keywords_name_allowedContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, SOQLParser.RULE_keywords_name_allowed);
        try {
            this.state = 180;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.ABOVE:
                case SOQLParser.ABOVE_OR_BELOW:
                case SOQLParser.AT:
                case SOQLParser.BELOW:
                case SOQLParser.CATEGORY:
                case SOQLParser.DATA:
                case SOQLParser.END:
                case SOQLParser.OFFSET:
                case SOQLParser.ORDER:
                case SOQLParser.REFERENCE:
                case SOQLParser.SCOPE:
                case SOQLParser.TRACKING:
                case SOQLParser.THEN:
                case SOQLParser.TYPEOF:
                case SOQLParser.VIEW:
                case SOQLParser.VIEWSTAT:
                case SOQLParser.WHEN:
                case SOQLParser.SECURITY_ENFORCED:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 178;
                        this.keywords_alias_allowed();
                    }
                    break;
                case SOQLParser.GROUP:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 179;
                        this.match(SOQLParser.GROUP);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    name() {
        let _localctx = new NameContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, SOQLParser.RULE_name);
        try {
            this.state = 187;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.ID:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 182;
                        this.match(SOQLParser.ID);
                    }
                    break;
                case SOQLParser.GROUP:
                case SOQLParser.ABOVE:
                case SOQLParser.ABOVE_OR_BELOW:
                case SOQLParser.AT:
                case SOQLParser.BELOW:
                case SOQLParser.CATEGORY:
                case SOQLParser.DATA:
                case SOQLParser.END:
                case SOQLParser.OFFSET:
                case SOQLParser.ORDER:
                case SOQLParser.REFERENCE:
                case SOQLParser.SCOPE:
                case SOQLParser.TRACKING:
                case SOQLParser.THEN:
                case SOQLParser.TYPEOF:
                case SOQLParser.VIEW:
                case SOQLParser.VIEWSTAT:
                case SOQLParser.WHEN:
                case SOQLParser.SECURITY_ENFORCED:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 183;
                        this.keywords_name_allowed();
                    }
                    break;
                case SOQLParser.YESTERDAY:
                case SOQLParser.TODAY:
                case SOQLParser.TOMORROW:
                case SOQLParser.LAST_WEEK:
                case SOQLParser.THIS_WEEK:
                case SOQLParser.NEXT_WEEK:
                case SOQLParser.LAST_MONTH:
                case SOQLParser.THIS_MONTH:
                case SOQLParser.NEXT_MONTH:
                case SOQLParser.LAST_90_DAYS:
                case SOQLParser.NEXT_90_DAYS:
                case SOQLParser.THIS_QUARTER:
                case SOQLParser.LAST_QUARTER:
                case SOQLParser.NEXT_QUARTER:
                case SOQLParser.THIS_YEAR:
                case SOQLParser.LAST_YEAR:
                case SOQLParser.NEXT_YEAR:
                case SOQLParser.THIS_FISCAL_QUARTER:
                case SOQLParser.LAST_FISCAL_QUARTER:
                case SOQLParser.NEXT_FISCAL_QUARTER:
                case SOQLParser.THIS_FISCAL_YEAR:
                case SOQLParser.LAST_FISCAL_YEAR:
                case SOQLParser.NEXT_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 184;
                        this.date_formula_literal();
                    }
                    break;
                case SOQLParser.NEXT_N_DAYS:
                case SOQLParser.LAST_N_DAYS:
                case SOQLParser.N_DAYS_AGO:
                case SOQLParser.NEXT_N_WEEKS:
                case SOQLParser.LAST_N_WEEKS:
                case SOQLParser.N_WEEKS_AGO:
                case SOQLParser.NEXT_N_MONTHS:
                case SOQLParser.LAST_N_MONTHS:
                case SOQLParser.N_MONTHS_AGO:
                case SOQLParser.NEXT_N_QUARTERS:
                case SOQLParser.LAST_N_QUARTERS:
                case SOQLParser.N_QUARTERS_AGO:
                case SOQLParser.NEXT_N_YEARS:
                case SOQLParser.LAST_N_YEARS:
                case SOQLParser.N_YEARS_AGO:
                case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                case SOQLParser.LAST_N_FISCAL_QUARTERS:
                case SOQLParser.N_FISCAL_QUARTERS_AGO:
                case SOQLParser.NEXT_N_FISCAL_YEARS:
                case SOQLParser.LAST_N_FISCAL_YEARS:
                case SOQLParser.N_FISCAL_YEARS_AGO:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 185;
                        this.date_formula_n_literal_name();
                    }
                    break;
                case SOQLParser.CALENDAR_MONTH:
                case SOQLParser.CALENDAR_QUARTER:
                case SOQLParser.CALENDAR_YEAR:
                case SOQLParser.DAY_IN_MONTH:
                case SOQLParser.DAY_IN_WEEK:
                case SOQLParser.DAY_IN_YEAR:
                case SOQLParser.DAY_ONLY:
                case SOQLParser.FISCAL_MONTH:
                case SOQLParser.FISCAL_QUARTER:
                case SOQLParser.FISCAL_YEAR:
                case SOQLParser.HOUR_IN_DAY:
                case SOQLParser.WEEK_IN_MONTH:
                case SOQLParser.WEEK_IN_YEAR:
                case SOQLParser.AVG:
                case SOQLParser.COUNT:
                case SOQLParser.COUNT_DISTINCT:
                case SOQLParser.MIN:
                case SOQLParser.MAX:
                case SOQLParser.SUM:
                case SOQLParser.DISTANCE:
                case SOQLParser.GEOLOCATION:
                case SOQLParser.FORMAT:
                case SOQLParser.TOLABEL:
                case SOQLParser.CONVERT_TIME_ZONE:
                case SOQLParser.CONVERT_CURRENCY:
                case SOQLParser.GROUPING:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 186;
                        this.function_name();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    object_name() {
        let _localctx = new Object_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, SOQLParser.RULE_object_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 189;
                this.name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    field_name() {
        let _localctx = new Field_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, SOQLParser.RULE_field_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 191;
                this.name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    filter_scope_name() {
        let _localctx = new Filter_scope_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, SOQLParser.RULE_filter_scope_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 193;
                this.name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_group_name() {
        let _localctx = new Data_category_group_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, SOQLParser.RULE_data_category_group_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 195;
                this.name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_name() {
        let _localctx = new Data_category_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, SOQLParser.RULE_data_category_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 197;
                this.name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    alias_name() {
        let _localctx = new Alias_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, SOQLParser.RULE_alias_name);
        try {
            this.state = 204;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.ID:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 199;
                        this.match(SOQLParser.ID);
                    }
                    break;
                case SOQLParser.ABOVE:
                case SOQLParser.ABOVE_OR_BELOW:
                case SOQLParser.AT:
                case SOQLParser.BELOW:
                case SOQLParser.CATEGORY:
                case SOQLParser.DATA:
                case SOQLParser.END:
                case SOQLParser.OFFSET:
                case SOQLParser.ORDER:
                case SOQLParser.REFERENCE:
                case SOQLParser.SCOPE:
                case SOQLParser.TRACKING:
                case SOQLParser.THEN:
                case SOQLParser.TYPEOF:
                case SOQLParser.VIEW:
                case SOQLParser.VIEWSTAT:
                case SOQLParser.WHEN:
                case SOQLParser.SECURITY_ENFORCED:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 200;
                        this.keywords_alias_allowed();
                    }
                    break;
                case SOQLParser.YESTERDAY:
                case SOQLParser.TODAY:
                case SOQLParser.TOMORROW:
                case SOQLParser.LAST_WEEK:
                case SOQLParser.THIS_WEEK:
                case SOQLParser.NEXT_WEEK:
                case SOQLParser.LAST_MONTH:
                case SOQLParser.THIS_MONTH:
                case SOQLParser.NEXT_MONTH:
                case SOQLParser.LAST_90_DAYS:
                case SOQLParser.NEXT_90_DAYS:
                case SOQLParser.THIS_QUARTER:
                case SOQLParser.LAST_QUARTER:
                case SOQLParser.NEXT_QUARTER:
                case SOQLParser.THIS_YEAR:
                case SOQLParser.LAST_YEAR:
                case SOQLParser.NEXT_YEAR:
                case SOQLParser.THIS_FISCAL_QUARTER:
                case SOQLParser.LAST_FISCAL_QUARTER:
                case SOQLParser.NEXT_FISCAL_QUARTER:
                case SOQLParser.THIS_FISCAL_YEAR:
                case SOQLParser.LAST_FISCAL_YEAR:
                case SOQLParser.NEXT_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 201;
                        this.date_formula_literal();
                    }
                    break;
                case SOQLParser.NEXT_N_DAYS:
                case SOQLParser.LAST_N_DAYS:
                case SOQLParser.N_DAYS_AGO:
                case SOQLParser.NEXT_N_WEEKS:
                case SOQLParser.LAST_N_WEEKS:
                case SOQLParser.N_WEEKS_AGO:
                case SOQLParser.NEXT_N_MONTHS:
                case SOQLParser.LAST_N_MONTHS:
                case SOQLParser.N_MONTHS_AGO:
                case SOQLParser.NEXT_N_QUARTERS:
                case SOQLParser.LAST_N_QUARTERS:
                case SOQLParser.N_QUARTERS_AGO:
                case SOQLParser.NEXT_N_YEARS:
                case SOQLParser.LAST_N_YEARS:
                case SOQLParser.N_YEARS_AGO:
                case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                case SOQLParser.LAST_N_FISCAL_QUARTERS:
                case SOQLParser.N_FISCAL_QUARTERS_AGO:
                case SOQLParser.NEXT_N_FISCAL_YEARS:
                case SOQLParser.LAST_N_FISCAL_YEARS:
                case SOQLParser.N_FISCAL_YEARS_AGO:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 202;
                        this.date_formula_n_literal_name();
                    }
                    break;
                case SOQLParser.CALENDAR_MONTH:
                case SOQLParser.CALENDAR_QUARTER:
                case SOQLParser.CALENDAR_YEAR:
                case SOQLParser.DAY_IN_MONTH:
                case SOQLParser.DAY_IN_WEEK:
                case SOQLParser.DAY_IN_YEAR:
                case SOQLParser.DAY_ONLY:
                case SOQLParser.FISCAL_MONTH:
                case SOQLParser.FISCAL_QUARTER:
                case SOQLParser.FISCAL_YEAR:
                case SOQLParser.HOUR_IN_DAY:
                case SOQLParser.WEEK_IN_MONTH:
                case SOQLParser.WEEK_IN_YEAR:
                case SOQLParser.AVG:
                case SOQLParser.COUNT:
                case SOQLParser.COUNT_DISTINCT:
                case SOQLParser.MIN:
                case SOQLParser.MAX:
                case SOQLParser.SUM:
                case SOQLParser.DISTANCE:
                case SOQLParser.GEOLOCATION:
                case SOQLParser.FORMAT:
                case SOQLParser.TOLABEL:
                case SOQLParser.CONVERT_TIME_ZONE:
                case SOQLParser.CONVERT_CURRENCY:
                case SOQLParser.GROUPING:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 203;
                        this.function_name();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    alias() {
        let _localctx = new AliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, SOQLParser.RULE_alias);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 207;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.AS) {
                    {
                        this.state = 206;
                        this.match(SOQLParser.AS);
                    }
                }
                this.state = 209;
                this.alias_name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, SOQLParser.RULE_literal);
        try {
            this.state = 220;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.YESTERDAY:
                case SOQLParser.TODAY:
                case SOQLParser.TOMORROW:
                case SOQLParser.LAST_WEEK:
                case SOQLParser.THIS_WEEK:
                case SOQLParser.NEXT_WEEK:
                case SOQLParser.LAST_MONTH:
                case SOQLParser.THIS_MONTH:
                case SOQLParser.NEXT_MONTH:
                case SOQLParser.LAST_90_DAYS:
                case SOQLParser.NEXT_90_DAYS:
                case SOQLParser.THIS_QUARTER:
                case SOQLParser.LAST_QUARTER:
                case SOQLParser.NEXT_QUARTER:
                case SOQLParser.THIS_YEAR:
                case SOQLParser.LAST_YEAR:
                case SOQLParser.NEXT_YEAR:
                case SOQLParser.THIS_FISCAL_QUARTER:
                case SOQLParser.LAST_FISCAL_QUARTER:
                case SOQLParser.NEXT_FISCAL_QUARTER:
                case SOQLParser.THIS_FISCAL_YEAR:
                case SOQLParser.LAST_FISCAL_YEAR:
                case SOQLParser.NEXT_FISCAL_YEAR:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 211;
                        this.date_formula_literal();
                    }
                    break;
                case SOQLParser.NEXT_N_DAYS:
                case SOQLParser.LAST_N_DAYS:
                case SOQLParser.N_DAYS_AGO:
                case SOQLParser.NEXT_N_WEEKS:
                case SOQLParser.LAST_N_WEEKS:
                case SOQLParser.N_WEEKS_AGO:
                case SOQLParser.NEXT_N_MONTHS:
                case SOQLParser.LAST_N_MONTHS:
                case SOQLParser.N_MONTHS_AGO:
                case SOQLParser.NEXT_N_QUARTERS:
                case SOQLParser.LAST_N_QUARTERS:
                case SOQLParser.N_QUARTERS_AGO:
                case SOQLParser.NEXT_N_YEARS:
                case SOQLParser.LAST_N_YEARS:
                case SOQLParser.N_YEARS_AGO:
                case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                case SOQLParser.LAST_N_FISCAL_QUARTERS:
                case SOQLParser.N_FISCAL_QUARTERS_AGO:
                case SOQLParser.NEXT_N_FISCAL_YEARS:
                case SOQLParser.LAST_N_FISCAL_YEARS:
                case SOQLParser.N_FISCAL_YEARS_AGO:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 212;
                        this.date_formula_n_literal();
                    }
                    break;
                case SOQLParser.DATETIME:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 213;
                        this.datetime_literal();
                    }
                    break;
                case SOQLParser.DATE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 214;
                        this.date_literal();
                    }
                    break;
                case SOQLParser.UNSIGNED_INTEGER:
                case SOQLParser.SIGNED_INTEGER:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 215;
                        this.integer_literal();
                    }
                    break;
                case SOQLParser.REAL_NUMBER:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 216;
                        this.real_literal();
                    }
                    break;
                case SOQLParser.STRING_VALUE:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 217;
                        this.string_literal();
                    }
                    break;
                case SOQLParser.FALSE:
                case SOQLParser.TRUE:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 218;
                        this.boolean_literal();
                    }
                    break;
                case SOQLParser.NULL:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 219;
                        this.null_literal();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    date_formula_literal() {
        let _localctx = new Date_formula_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, SOQLParser.RULE_date_formula_literal);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 222;
                _la = this._input.LA(1);
                if (!(((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (SOQLParser.YESTERDAY - 78)) | (1 << (SOQLParser.TODAY - 78)) | (1 << (SOQLParser.TOMORROW - 78)) | (1 << (SOQLParser.LAST_WEEK - 78)) | (1 << (SOQLParser.THIS_WEEK - 78)) | (1 << (SOQLParser.NEXT_WEEK - 78)) | (1 << (SOQLParser.LAST_MONTH - 78)) | (1 << (SOQLParser.THIS_MONTH - 78)) | (1 << (SOQLParser.NEXT_MONTH - 78)) | (1 << (SOQLParser.LAST_90_DAYS - 78)) | (1 << (SOQLParser.NEXT_90_DAYS - 78)) | (1 << (SOQLParser.THIS_QUARTER - 78)) | (1 << (SOQLParser.LAST_QUARTER - 78)) | (1 << (SOQLParser.NEXT_QUARTER - 78)) | (1 << (SOQLParser.THIS_YEAR - 78)) | (1 << (SOQLParser.LAST_YEAR - 78)) | (1 << (SOQLParser.NEXT_YEAR - 78)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 78)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 78)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 78)) | (1 << (SOQLParser.THIS_FISCAL_YEAR - 78)) | (1 << (SOQLParser.LAST_FISCAL_YEAR - 78)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 78)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    date_formula_n_literal_name() {
        let _localctx = new Date_formula_n_literal_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, SOQLParser.RULE_date_formula_n_literal_name);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 224;
                _la = this._input.LA(1);
                if (!(((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (SOQLParser.NEXT_N_DAYS - 101)) | (1 << (SOQLParser.LAST_N_DAYS - 101)) | (1 << (SOQLParser.N_DAYS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_WEEKS - 101)) | (1 << (SOQLParser.LAST_N_WEEKS - 101)) | (1 << (SOQLParser.N_WEEKS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_MONTHS - 101)) | (1 << (SOQLParser.LAST_N_MONTHS - 101)) | (1 << (SOQLParser.N_MONTHS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 101)) | (1 << (SOQLParser.LAST_N_QUARTERS - 101)) | (1 << (SOQLParser.N_QUARTERS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_YEARS - 101)) | (1 << (SOQLParser.LAST_N_YEARS - 101)) | (1 << (SOQLParser.N_YEARS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 101)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 101)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 101)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 101)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 101)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 101)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    date_formula_n_literal() {
        let _localctx = new Date_formula_n_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, SOQLParser.RULE_date_formula_n_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 226;
                this.date_formula_n_literal_name();
                this.state = 227;
                this.match(SOQLParser.COLON);
                this.state = 228;
                this.match(SOQLParser.UNSIGNED_INTEGER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    datetime_literal() {
        let _localctx = new Datetime_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, SOQLParser.RULE_datetime_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 230;
                this.match(SOQLParser.DATETIME);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    date_literal() {
        let _localctx = new Date_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, SOQLParser.RULE_date_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 232;
                this.match(SOQLParser.DATE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    integer_literal() {
        let _localctx = new Integer_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, SOQLParser.RULE_integer_literal);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 234;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.UNSIGNED_INTEGER || _la === SOQLParser.SIGNED_INTEGER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    real_literal() {
        let _localctx = new Real_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, SOQLParser.RULE_real_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 236;
                this.match(SOQLParser.REAL_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    string_literal() {
        let _localctx = new String_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, SOQLParser.RULE_string_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 238;
                this.match(SOQLParser.STRING_VALUE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    boolean_literal() {
        let _localctx = new Boolean_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, SOQLParser.RULE_boolean_literal);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 240;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.FALSE || _la === SOQLParser.TRUE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    null_literal() {
        let _localctx = new Null_literalContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, SOQLParser.RULE_null_literal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 242;
                this.match(SOQLParser.NULL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_name() {
        let _localctx = new Function_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, SOQLParser.RULE_function_name);
        try {
            this.state = 248;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.CALENDAR_MONTH:
                case SOQLParser.CALENDAR_QUARTER:
                case SOQLParser.CALENDAR_YEAR:
                case SOQLParser.DAY_IN_MONTH:
                case SOQLParser.DAY_IN_WEEK:
                case SOQLParser.DAY_IN_YEAR:
                case SOQLParser.DAY_ONLY:
                case SOQLParser.FISCAL_MONTH:
                case SOQLParser.FISCAL_QUARTER:
                case SOQLParser.FISCAL_YEAR:
                case SOQLParser.HOUR_IN_DAY:
                case SOQLParser.WEEK_IN_MONTH:
                case SOQLParser.WEEK_IN_YEAR:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 244;
                        this.function_date();
                    }
                    break;
                case SOQLParser.AVG:
                case SOQLParser.COUNT:
                case SOQLParser.COUNT_DISTINCT:
                case SOQLParser.MIN:
                case SOQLParser.MAX:
                case SOQLParser.SUM:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 245;
                        this.function_aggregate();
                    }
                    break;
                case SOQLParser.DISTANCE:
                case SOQLParser.GEOLOCATION:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 246;
                        this.function_location();
                    }
                    break;
                case SOQLParser.FORMAT:
                case SOQLParser.TOLABEL:
                case SOQLParser.CONVERT_TIME_ZONE:
                case SOQLParser.CONVERT_CURRENCY:
                case SOQLParser.GROUPING:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 247;
                        this.function_other();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_date() {
        let _localctx = new Function_dateContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, SOQLParser.RULE_function_date);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 250;
                _la = this._input.LA(1);
                if (!(((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (SOQLParser.CALENDAR_MONTH - 52)) | (1 << (SOQLParser.CALENDAR_QUARTER - 52)) | (1 << (SOQLParser.CALENDAR_YEAR - 52)) | (1 << (SOQLParser.DAY_IN_MONTH - 52)) | (1 << (SOQLParser.DAY_IN_WEEK - 52)) | (1 << (SOQLParser.DAY_IN_YEAR - 52)) | (1 << (SOQLParser.DAY_ONLY - 52)) | (1 << (SOQLParser.FISCAL_MONTH - 52)) | (1 << (SOQLParser.FISCAL_QUARTER - 52)) | (1 << (SOQLParser.FISCAL_YEAR - 52)) | (1 << (SOQLParser.HOUR_IN_DAY - 52)) | (1 << (SOQLParser.WEEK_IN_MONTH - 52)) | (1 << (SOQLParser.WEEK_IN_YEAR - 52)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_aggregate() {
        let _localctx = new Function_aggregateContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, SOQLParser.RULE_function_aggregate);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 252;
                _la = this._input.LA(1);
                if (!(((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (SOQLParser.AVG - 65)) | (1 << (SOQLParser.COUNT - 65)) | (1 << (SOQLParser.COUNT_DISTINCT - 65)) | (1 << (SOQLParser.MIN - 65)) | (1 << (SOQLParser.MAX - 65)) | (1 << (SOQLParser.SUM - 65)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_location() {
        let _localctx = new Function_locationContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, SOQLParser.RULE_function_location);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 254;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.DISTANCE || _la === SOQLParser.GEOLOCATION)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_other() {
        let _localctx = new Function_otherContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, SOQLParser.RULE_function_other);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 256;
                _la = this._input.LA(1);
                if (!(((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (SOQLParser.FORMAT - 73)) | (1 << (SOQLParser.TOLABEL - 73)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 73)) | (1 << (SOQLParser.CONVERT_CURRENCY - 73)) | (1 << (SOQLParser.GROUPING - 73)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    soql_query() {
        let _localctx = new Soql_queryContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, SOQLParser.RULE_soql_query);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 258;
                this.select_clause();
                this.state = 259;
                this.from_clause();
                this.state = 261;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.USING) {
                    {
                        this.state = 260;
                        this.using_clause();
                    }
                }
                this.state = 264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.WHERE) {
                    {
                        this.state = 263;
                        this.where_clause();
                    }
                }
                this.state = 267;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {
                    case 1:
                        {
                            this.state = 266;
                            this.with_clause();
                        }
                        break;
                }
                this.state = 270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.WITH) {
                    {
                        this.state = 269;
                        this.with_security_enforced_clause();
                    }
                }
                this.state = 276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.GROUP) {
                    {
                        this.state = 272;
                        this.groupby_clause();
                        this.state = 274;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SOQLParser.HAVING) {
                            {
                                this.state = 273;
                                this.having_clause();
                            }
                        }
                    }
                }
                this.state = 279;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.ORDER) {
                    {
                        this.state = 278;
                        this.orderby_clause();
                    }
                }
                this.state = 282;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.LIMIT) {
                    {
                        this.state = 281;
                        this.limit_clause();
                    }
                }
                this.state = 285;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.OFFSET) {
                    {
                        this.state = 284;
                        this.offset_clause();
                    }
                }
                this.state = 288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.FOR) {
                    {
                        this.state = 287;
                        this.for_clause();
                    }
                }
                this.state = 291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.UPDATE) {
                    {
                        this.state = 290;
                        this.update_clause();
                    }
                }
                this.state = 293;
                this.match(SOQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    select_clause() {
        let _localctx = new Select_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, SOQLParser.RULE_select_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 295;
                this.match(SOQLParser.SELECT);
                this.state = 296;
                this.select_spec();
                this.state = 301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 297;
                            this.match(SOQLParser.COMMA);
                            this.state = 298;
                            this.select_spec();
                        }
                    }
                    this.state = 303;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    from_clause() {
        let _localctx = new From_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, SOQLParser.RULE_from_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 304;
                this.match(SOQLParser.FROM);
                this.state = 305;
                this.object_spec();
                this.state = 310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 306;
                            this.match(SOQLParser.COMMA);
                            this.state = 307;
                            this.object_spec();
                        }
                    }
                    this.state = 312;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    using_clause() {
        let _localctx = new Using_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, SOQLParser.RULE_using_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 313;
                this.match(SOQLParser.USING);
                this.state = 314;
                this.match(SOQLParser.SCOPE);
                this.state = 315;
                this.filter_scope_name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    where_clause() {
        let _localctx = new Where_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, SOQLParser.RULE_where_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 317;
                this.match(SOQLParser.WHERE);
                this.state = 318;
                this.condition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    groupby_clause() {
        let _localctx = new Groupby_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, SOQLParser.RULE_groupby_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 320;
                this.match(SOQLParser.GROUP);
                this.state = 321;
                this.match(SOQLParser.BY);
                this.state = 325;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SOQLParser.ROLLUP:
                        {
                            this.state = 322;
                            this.group_by_rollup_clause();
                        }
                        break;
                    case SOQLParser.CUBE:
                        {
                            this.state = 323;
                            this.group_by_cube_clause();
                        }
                        break;
                    case SOQLParser.GROUP:
                    case SOQLParser.ABOVE:
                    case SOQLParser.ABOVE_OR_BELOW:
                    case SOQLParser.AT:
                    case SOQLParser.BELOW:
                    case SOQLParser.CATEGORY:
                    case SOQLParser.DATA:
                    case SOQLParser.END:
                    case SOQLParser.OFFSET:
                    case SOQLParser.ORDER:
                    case SOQLParser.REFERENCE:
                    case SOQLParser.SCOPE:
                    case SOQLParser.TRACKING:
                    case SOQLParser.THEN:
                    case SOQLParser.TYPEOF:
                    case SOQLParser.VIEW:
                    case SOQLParser.VIEWSTAT:
                    case SOQLParser.WHEN:
                    case SOQLParser.SECURITY_ENFORCED:
                    case SOQLParser.CALENDAR_MONTH:
                    case SOQLParser.CALENDAR_QUARTER:
                    case SOQLParser.CALENDAR_YEAR:
                    case SOQLParser.DAY_IN_MONTH:
                    case SOQLParser.DAY_IN_WEEK:
                    case SOQLParser.DAY_IN_YEAR:
                    case SOQLParser.DAY_ONLY:
                    case SOQLParser.FISCAL_MONTH:
                    case SOQLParser.FISCAL_QUARTER:
                    case SOQLParser.FISCAL_YEAR:
                    case SOQLParser.HOUR_IN_DAY:
                    case SOQLParser.WEEK_IN_MONTH:
                    case SOQLParser.WEEK_IN_YEAR:
                    case SOQLParser.AVG:
                    case SOQLParser.COUNT:
                    case SOQLParser.COUNT_DISTINCT:
                    case SOQLParser.MIN:
                    case SOQLParser.MAX:
                    case SOQLParser.SUM:
                    case SOQLParser.DISTANCE:
                    case SOQLParser.GEOLOCATION:
                    case SOQLParser.FORMAT:
                    case SOQLParser.TOLABEL:
                    case SOQLParser.CONVERT_TIME_ZONE:
                    case SOQLParser.CONVERT_CURRENCY:
                    case SOQLParser.GROUPING:
                    case SOQLParser.YESTERDAY:
                    case SOQLParser.TODAY:
                    case SOQLParser.TOMORROW:
                    case SOQLParser.LAST_WEEK:
                    case SOQLParser.THIS_WEEK:
                    case SOQLParser.NEXT_WEEK:
                    case SOQLParser.LAST_MONTH:
                    case SOQLParser.THIS_MONTH:
                    case SOQLParser.NEXT_MONTH:
                    case SOQLParser.LAST_90_DAYS:
                    case SOQLParser.NEXT_90_DAYS:
                    case SOQLParser.THIS_QUARTER:
                    case SOQLParser.LAST_QUARTER:
                    case SOQLParser.NEXT_QUARTER:
                    case SOQLParser.THIS_YEAR:
                    case SOQLParser.LAST_YEAR:
                    case SOQLParser.NEXT_YEAR:
                    case SOQLParser.THIS_FISCAL_QUARTER:
                    case SOQLParser.LAST_FISCAL_QUARTER:
                    case SOQLParser.NEXT_FISCAL_QUARTER:
                    case SOQLParser.THIS_FISCAL_YEAR:
                    case SOQLParser.LAST_FISCAL_YEAR:
                    case SOQLParser.NEXT_FISCAL_YEAR:
                    case SOQLParser.NEXT_N_DAYS:
                    case SOQLParser.LAST_N_DAYS:
                    case SOQLParser.N_DAYS_AGO:
                    case SOQLParser.NEXT_N_WEEKS:
                    case SOQLParser.LAST_N_WEEKS:
                    case SOQLParser.N_WEEKS_AGO:
                    case SOQLParser.NEXT_N_MONTHS:
                    case SOQLParser.LAST_N_MONTHS:
                    case SOQLParser.N_MONTHS_AGO:
                    case SOQLParser.NEXT_N_QUARTERS:
                    case SOQLParser.LAST_N_QUARTERS:
                    case SOQLParser.N_QUARTERS_AGO:
                    case SOQLParser.NEXT_N_YEARS:
                    case SOQLParser.LAST_N_YEARS:
                    case SOQLParser.N_YEARS_AGO:
                    case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                    case SOQLParser.LAST_N_FISCAL_QUARTERS:
                    case SOQLParser.N_FISCAL_QUARTERS_AGO:
                    case SOQLParser.NEXT_N_FISCAL_YEARS:
                    case SOQLParser.LAST_N_FISCAL_YEARS:
                    case SOQLParser.N_FISCAL_YEARS_AGO:
                    case SOQLParser.ID:
                        {
                            this.state = 324;
                            this.group_by_plain_clause();
                        }
                        break;
                    default:
                        throw new NoViableAltException.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    having_clause() {
        let _localctx = new Having_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, SOQLParser.RULE_having_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 327;
                this.match(SOQLParser.HAVING);
                this.state = 328;
                this.condition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    orderby_clause() {
        let _localctx = new Orderby_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, SOQLParser.RULE_orderby_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 330;
                this.match(SOQLParser.ORDER);
                this.state = 331;
                this.match(SOQLParser.BY);
                this.state = 332;
                this.order_by_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    limit_clause() {
        let _localctx = new Limit_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, SOQLParser.RULE_limit_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 334;
                this.match(SOQLParser.LIMIT);
                this.state = 335;
                this.match(SOQLParser.UNSIGNED_INTEGER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    offset_clause() {
        let _localctx = new Offset_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, SOQLParser.RULE_offset_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 337;
                this.match(SOQLParser.OFFSET);
                this.state = 338;
                this.match(SOQLParser.UNSIGNED_INTEGER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    for_clause() {
        let _localctx = new For_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, SOQLParser.RULE_for_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 340;
                this.match(SOQLParser.FOR);
                this.state = 341;
                this.for_value();
                this.state = 344;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
                    case 1:
                        {
                            this.state = 342;
                            this.match(SOQLParser.COMMA);
                            this.state = 343;
                            this.for_value();
                        }
                        break;
                }
                this.state = 348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.COMMA) {
                    {
                        this.state = 346;
                        this.match(SOQLParser.COMMA);
                        this.state = 347;
                        this.for_value();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    update_clause() {
        let _localctx = new Update_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, SOQLParser.RULE_update_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 350;
                this.match(SOQLParser.UPDATE);
                this.state = 351;
                this.update_value();
                this.state = 354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.COMMA) {
                    {
                        this.state = 352;
                        this.match(SOQLParser.COMMA);
                        this.state = 353;
                        this.update_value();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    soql_subquery() {
        let _localctx = new Soql_subqueryContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, SOQLParser.RULE_soql_subquery);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 356;
                this.match(SOQLParser.LPAREN);
                this.state = 357;
                this.subquery_select_clause();
                this.state = 358;
                this.from_clause();
                this.state = 360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.USING) {
                    {
                        this.state = 359;
                        this.using_clause();
                    }
                }
                this.state = 363;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.WHERE) {
                    {
                        this.state = 362;
                        this.where_clause();
                    }
                }
                this.state = 366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.WITH) {
                    {
                        this.state = 365;
                        this.with_clause();
                    }
                }
                this.state = 369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.ORDER) {
                    {
                        this.state = 368;
                        this.orderby_clause();
                    }
                }
                this.state = 372;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.LIMIT) {
                    {
                        this.state = 371;
                        this.limit_clause();
                    }
                }
                this.state = 375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.OFFSET) {
                    {
                        this.state = 374;
                        this.offset_clause();
                    }
                }
                this.state = 378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.FOR) {
                    {
                        this.state = 377;
                        this.for_clause();
                    }
                }
                this.state = 381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.UPDATE) {
                    {
                        this.state = 380;
                        this.update_clause();
                    }
                }
                this.state = 383;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    subquery_select_clause() {
        let _localctx = new Subquery_select_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, SOQLParser.RULE_subquery_select_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 385;
                this.match(SOQLParser.SELECT);
                this.state = 386;
                this.subquery_select_spec();
                this.state = 391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 387;
                            this.match(SOQLParser.COMMA);
                            this.state = 388;
                            this.subquery_select_spec();
                        }
                    }
                    this.state = 393;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    select_spec() {
        let _localctx = new Select_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, SOQLParser.RULE_select_spec);
        try {
            this.state = 398;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 32, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 394;
                        this.field_spec();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 395;
                        this.function_call_spec();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 396;
                        this.soql_subquery();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 397;
                        this.typeof_spec();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    subquery_select_spec() {
        let _localctx = new Subquery_select_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, SOQLParser.RULE_subquery_select_spec);
        try {
            this.state = 402;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 400;
                        this.field_spec();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 401;
                        this.function_call_spec();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    field_spec() {
        let _localctx = new Field_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, SOQLParser.RULE_field_spec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 404;
                this.field();
                this.state = 406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.AS || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.SECURITY_ENFORCED - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT - 66)) | (1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.THIS_FISCAL_YEAR - 98)) | (1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || _la === SOQLParser.ID) {
                    {
                        this.state = 405;
                        this.alias();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_call_spec() {
        let _localctx = new Function_call_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, SOQLParser.RULE_function_call_spec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 408;
                this.function_call();
                this.state = 410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.AS || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.SECURITY_ENFORCED - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT - 66)) | (1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.THIS_FISCAL_YEAR - 98)) | (1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || _la === SOQLParser.ID) {
                    {
                        this.state = 409;
                        this.alias();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    field() {
        let _localctx = new FieldContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, SOQLParser.RULE_field);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 413;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                    case 1:
                        {
                            this.state = 412;
                            this.object_prefix();
                        }
                        break;
                }
                this.state = 415;
                this.field_name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_call() {
        let _localctx = new Function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, SOQLParser.RULE_function_call);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 417;
                this.function_name();
                this.state = 418;
                this.match(SOQLParser.LPAREN);
                this.state = 420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SOQLParser.STRING_VALUE) | (1 << SOQLParser.FALSE) | (1 << SOQLParser.GROUP) | (1 << SOQLParser.NULL) | (1 << SOQLParser.TRUE))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.SECURITY_ENFORCED - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT - 66)) | (1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.THIS_FISCAL_YEAR - 98)) | (1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (SOQLParser.ID - 137)) | (1 << (SOQLParser.DATE - 137)) | (1 << (SOQLParser.DATETIME - 137)) | (1 << (SOQLParser.UNSIGNED_INTEGER - 137)) | (1 << (SOQLParser.REAL_NUMBER - 137)) | (1 << (SOQLParser.SIGNED_INTEGER - 137)))) !== 0)) {
                    {
                        this.state = 419;
                        this.function_parameter_list();
                    }
                }
                this.state = 422;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_parameter_list() {
        let _localctx = new Function_parameter_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, SOQLParser.RULE_function_parameter_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 424;
                this.function_parameter();
                this.state = 429;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 425;
                            this.match(SOQLParser.COMMA);
                            this.state = 426;
                            this.function_parameter();
                        }
                    }
                    this.state = 431;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    function_parameter() {
        let _localctx = new Function_parameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, SOQLParser.RULE_function_parameter);
        try {
            this.state = 435;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 432;
                        this.field();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 433;
                        this.literal();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 434;
                        this.function_call();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeof_spec() {
        let _localctx = new Typeof_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, SOQLParser.RULE_typeof_spec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 437;
                this.match(SOQLParser.TYPEOF);
                this.state = 438;
                this.field();
                this.state = 439;
                this.typeof_when_then_clause_list();
                this.state = 441;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.ELSE) {
                    {
                        this.state = 440;
                        this.typeof_else_clause();
                    }
                }
                this.state = 443;
                this.match(SOQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeof_when_then_clause_list() {
        let _localctx = new Typeof_when_then_clause_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, SOQLParser.RULE_typeof_when_then_clause_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 445;
                            this.typeof_when_then_clause();
                        }
                    }
                    this.state = 448;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === SOQLParser.WHEN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeof_when_then_clause() {
        let _localctx = new Typeof_when_then_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, SOQLParser.RULE_typeof_when_then_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 450;
                this.match(SOQLParser.WHEN);
                this.state = 451;
                this.object_name();
                this.state = 452;
                this.typeof_then_clause();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeof_then_clause() {
        let _localctx = new Typeof_then_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, SOQLParser.RULE_typeof_then_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 454;
                this.match(SOQLParser.THEN);
                this.state = 455;
                this.field_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeof_else_clause() {
        let _localctx = new Typeof_else_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, SOQLParser.RULE_typeof_else_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 457;
                this.match(SOQLParser.ELSE);
                this.state = 458;
                this.field_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    field_list() {
        let _localctx = new Field_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, SOQLParser.RULE_field_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 460;
                this.field();
                this.state = 465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 461;
                            this.match(SOQLParser.COMMA);
                            this.state = 462;
                            this.field();
                        }
                    }
                    this.state = 467;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    object_spec() {
        let _localctx = new Object_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, SOQLParser.RULE_object_spec);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 469;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                    case 1:
                        {
                            this.state = 468;
                            this.object_prefix();
                        }
                        break;
                }
                this.state = 471;
                this.object_name();
                this.state = 473;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
                    case 1:
                        {
                            this.state = 472;
                            this.alias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    object_prefix() {
        let _localctx = new Object_prefixContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, SOQLParser.RULE_object_prefix);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 478;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 475;
                                    this.object_name();
                                    this.state = 476;
                                    this.match(SOQLParser.DOT);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException.NoViableAltException(this);
                    }
                    this.state = 480;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    comparison_operator() {
        let _localctx = new Comparison_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, SOQLParser.RULE_comparison_operator);
        try {
            this.state = 492;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 482;
                        this.match(SOQLParser.EQ);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 483;
                        this.match(SOQLParser.NOT_EQ);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 484;
                        this.match(SOQLParser.LET);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 485;
                        this.match(SOQLParser.GET);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 486;
                        this.match(SOQLParser.GTH);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 487;
                        this.match(SOQLParser.LTH);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 488;
                        this.match(SOQLParser.GTH);
                        this.state = 489;
                        this.match(SOQLParser.EQ);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 490;
                        this.match(SOQLParser.LTH);
                        this.state = 491;
                        this.match(SOQLParser.EQ);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    set_operator() {
        let _localctx = new Set_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, SOQLParser.RULE_set_operator);
        try {
            this.state = 499;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.IN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 494;
                        this.match(SOQLParser.IN);
                    }
                    break;
                case SOQLParser.NOT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 495;
                        this.match(SOQLParser.NOT);
                        this.state = 496;
                        this.match(SOQLParser.IN);
                    }
                    break;
                case SOQLParser.INCLUDES:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 497;
                        this.match(SOQLParser.INCLUDES);
                    }
                    break;
                case SOQLParser.EXCLUDES:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 498;
                        this.match(SOQLParser.EXCLUDES);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    condition() {
        let _localctx = new ConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, SOQLParser.RULE_condition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 501;
                this.condition1();
                this.state = 506;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.AND || _la === SOQLParser.OR) {
                    {
                        {
                            this.state = 502;
                            _la = this._input.LA(1);
                            if (!(_la === SOQLParser.AND || _la === SOQLParser.OR)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 503;
                            this.condition1();
                        }
                    }
                    this.state = 508;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    condition1() {
        let _localctx = new Condition1Context(this._ctx, this.state);
        this.enterRule(_localctx, 118, SOQLParser.RULE_condition1);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 510;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.NOT) {
                    {
                        this.state = 509;
                        this.match(SOQLParser.NOT);
                    }
                }
                this.state = 514;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SOQLParser.GROUP:
                    case SOQLParser.ABOVE:
                    case SOQLParser.ABOVE_OR_BELOW:
                    case SOQLParser.AT:
                    case SOQLParser.BELOW:
                    case SOQLParser.CATEGORY:
                    case SOQLParser.DATA:
                    case SOQLParser.END:
                    case SOQLParser.OFFSET:
                    case SOQLParser.ORDER:
                    case SOQLParser.REFERENCE:
                    case SOQLParser.SCOPE:
                    case SOQLParser.TRACKING:
                    case SOQLParser.THEN:
                    case SOQLParser.TYPEOF:
                    case SOQLParser.VIEW:
                    case SOQLParser.VIEWSTAT:
                    case SOQLParser.WHEN:
                    case SOQLParser.SECURITY_ENFORCED:
                    case SOQLParser.CALENDAR_MONTH:
                    case SOQLParser.CALENDAR_QUARTER:
                    case SOQLParser.CALENDAR_YEAR:
                    case SOQLParser.DAY_IN_MONTH:
                    case SOQLParser.DAY_IN_WEEK:
                    case SOQLParser.DAY_IN_YEAR:
                    case SOQLParser.DAY_ONLY:
                    case SOQLParser.FISCAL_MONTH:
                    case SOQLParser.FISCAL_QUARTER:
                    case SOQLParser.FISCAL_YEAR:
                    case SOQLParser.HOUR_IN_DAY:
                    case SOQLParser.WEEK_IN_MONTH:
                    case SOQLParser.WEEK_IN_YEAR:
                    case SOQLParser.AVG:
                    case SOQLParser.COUNT:
                    case SOQLParser.COUNT_DISTINCT:
                    case SOQLParser.MIN:
                    case SOQLParser.MAX:
                    case SOQLParser.SUM:
                    case SOQLParser.DISTANCE:
                    case SOQLParser.GEOLOCATION:
                    case SOQLParser.FORMAT:
                    case SOQLParser.TOLABEL:
                    case SOQLParser.CONVERT_TIME_ZONE:
                    case SOQLParser.CONVERT_CURRENCY:
                    case SOQLParser.GROUPING:
                    case SOQLParser.YESTERDAY:
                    case SOQLParser.TODAY:
                    case SOQLParser.TOMORROW:
                    case SOQLParser.LAST_WEEK:
                    case SOQLParser.THIS_WEEK:
                    case SOQLParser.NEXT_WEEK:
                    case SOQLParser.LAST_MONTH:
                    case SOQLParser.THIS_MONTH:
                    case SOQLParser.NEXT_MONTH:
                    case SOQLParser.LAST_90_DAYS:
                    case SOQLParser.NEXT_90_DAYS:
                    case SOQLParser.THIS_QUARTER:
                    case SOQLParser.LAST_QUARTER:
                    case SOQLParser.NEXT_QUARTER:
                    case SOQLParser.THIS_YEAR:
                    case SOQLParser.LAST_YEAR:
                    case SOQLParser.NEXT_YEAR:
                    case SOQLParser.THIS_FISCAL_QUARTER:
                    case SOQLParser.LAST_FISCAL_QUARTER:
                    case SOQLParser.NEXT_FISCAL_QUARTER:
                    case SOQLParser.THIS_FISCAL_YEAR:
                    case SOQLParser.LAST_FISCAL_YEAR:
                    case SOQLParser.NEXT_FISCAL_YEAR:
                    case SOQLParser.NEXT_N_DAYS:
                    case SOQLParser.LAST_N_DAYS:
                    case SOQLParser.N_DAYS_AGO:
                    case SOQLParser.NEXT_N_WEEKS:
                    case SOQLParser.LAST_N_WEEKS:
                    case SOQLParser.N_WEEKS_AGO:
                    case SOQLParser.NEXT_N_MONTHS:
                    case SOQLParser.LAST_N_MONTHS:
                    case SOQLParser.N_MONTHS_AGO:
                    case SOQLParser.NEXT_N_QUARTERS:
                    case SOQLParser.LAST_N_QUARTERS:
                    case SOQLParser.N_QUARTERS_AGO:
                    case SOQLParser.NEXT_N_YEARS:
                    case SOQLParser.LAST_N_YEARS:
                    case SOQLParser.N_YEARS_AGO:
                    case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                    case SOQLParser.LAST_N_FISCAL_QUARTERS:
                    case SOQLParser.N_FISCAL_QUARTERS_AGO:
                    case SOQLParser.NEXT_N_FISCAL_YEARS:
                    case SOQLParser.LAST_N_FISCAL_YEARS:
                    case SOQLParser.N_FISCAL_YEARS_AGO:
                    case SOQLParser.ID:
                        {
                            this.state = 512;
                            this.simple_condition();
                        }
                        break;
                    case SOQLParser.LPAREN:
                        {
                            this.state = 513;
                            this.parenthesis();
                        }
                        break;
                    default:
                        throw new NoViableAltException.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    parenthesis() {
        let _localctx = new ParenthesisContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, SOQLParser.RULE_parenthesis);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 516;
                this.match(SOQLParser.LPAREN);
                this.state = 517;
                this.condition();
                this.state = 518;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    simple_condition() {
        let _localctx = new Simple_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, SOQLParser.RULE_simple_condition);
        try {
            this.state = 523;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 520;
                        this.field_based_condition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 521;
                        this.set_based_condition();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 522;
                        this.like_based_condition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    field_based_condition() {
        let _localctx = new Field_based_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, SOQLParser.RULE_field_based_condition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 525;
                this.condition_field();
                this.state = 526;
                this.comparison_operator();
                this.state = 527;
                this.literal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    set_based_condition() {
        let _localctx = new Set_based_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, SOQLParser.RULE_set_based_condition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 529;
                this.condition_field();
                this.state = 530;
                this.set_operator();
                this.state = 533;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                    case 1:
                        {
                            this.state = 531;
                            this.soql_subquery();
                        }
                        break;
                    case 2:
                        {
                            this.state = 532;
                            this.set_values();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    like_based_condition() {
        let _localctx = new Like_based_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, SOQLParser.RULE_like_based_condition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 535;
                this.condition_field();
                this.state = 536;
                this.match(SOQLParser.LIKE);
                this.state = 537;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.STRING_VALUE || _la === SOQLParser.LIKE_STRING_VALUE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    condition_field() {
        let _localctx = new Condition_fieldContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, SOQLParser.RULE_condition_field);
        try {
            this.state = 541;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 53, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 539;
                        this.field();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 540;
                        this.function_call();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    set_values() {
        let _localctx = new Set_valuesContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, SOQLParser.RULE_set_values);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 543;
                this.match(SOQLParser.LPAREN);
                this.state = 544;
                this.set_value_list();
                this.state = 545;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    set_value_list() {
        let _localctx = new Set_value_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, SOQLParser.RULE_set_value_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 547;
                this.literal();
                this.state = 552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 548;
                            this.match(SOQLParser.COMMA);
                            this.state = 549;
                            this.literal();
                        }
                    }
                    this.state = 554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    with_clause() {
        let _localctx = new With_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, SOQLParser.RULE_with_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 555;
                this.match(SOQLParser.WITH);
                this.state = 558;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {
                    case 1:
                        {
                            this.state = 556;
                            this.with_plain_clause();
                        }
                        break;
                    case 2:
                        {
                            this.state = 557;
                            this.with_data_category_clause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    with_plain_clause() {
        let _localctx = new With_plain_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, SOQLParser.RULE_with_plain_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 560;
                this.field_based_condition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    with_data_category_clause() {
        let _localctx = new With_data_category_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, SOQLParser.RULE_with_data_category_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 562;
                this.match(SOQLParser.DATA);
                this.state = 563;
                this.match(SOQLParser.CATEGORY);
                this.state = 564;
                this.data_category_spec_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_spec_list() {
        let _localctx = new Data_category_spec_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, SOQLParser.RULE_data_category_spec_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 566;
                this.data_category_spec();
                this.state = 571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.AND) {
                    {
                        {
                            this.state = 567;
                            this.match(SOQLParser.AND);
                            this.state = 568;
                            this.data_category_spec();
                        }
                    }
                    this.state = 573;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_spec() {
        let _localctx = new Data_category_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, SOQLParser.RULE_data_category_spec);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 574;
                this.data_category_group_name();
                this.state = 575;
                this.data_category_selector();
                this.state = 576;
                this.data_category_parameter_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_parameter_list() {
        let _localctx = new Data_category_parameter_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, SOQLParser.RULE_data_category_parameter_list);
        let _la;
        try {
            this.state = 590;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SOQLParser.GROUP:
                case SOQLParser.ABOVE:
                case SOQLParser.ABOVE_OR_BELOW:
                case SOQLParser.AT:
                case SOQLParser.BELOW:
                case SOQLParser.CATEGORY:
                case SOQLParser.DATA:
                case SOQLParser.END:
                case SOQLParser.OFFSET:
                case SOQLParser.ORDER:
                case SOQLParser.REFERENCE:
                case SOQLParser.SCOPE:
                case SOQLParser.TRACKING:
                case SOQLParser.THEN:
                case SOQLParser.TYPEOF:
                case SOQLParser.VIEW:
                case SOQLParser.VIEWSTAT:
                case SOQLParser.WHEN:
                case SOQLParser.SECURITY_ENFORCED:
                case SOQLParser.CALENDAR_MONTH:
                case SOQLParser.CALENDAR_QUARTER:
                case SOQLParser.CALENDAR_YEAR:
                case SOQLParser.DAY_IN_MONTH:
                case SOQLParser.DAY_IN_WEEK:
                case SOQLParser.DAY_IN_YEAR:
                case SOQLParser.DAY_ONLY:
                case SOQLParser.FISCAL_MONTH:
                case SOQLParser.FISCAL_QUARTER:
                case SOQLParser.FISCAL_YEAR:
                case SOQLParser.HOUR_IN_DAY:
                case SOQLParser.WEEK_IN_MONTH:
                case SOQLParser.WEEK_IN_YEAR:
                case SOQLParser.AVG:
                case SOQLParser.COUNT:
                case SOQLParser.COUNT_DISTINCT:
                case SOQLParser.MIN:
                case SOQLParser.MAX:
                case SOQLParser.SUM:
                case SOQLParser.DISTANCE:
                case SOQLParser.GEOLOCATION:
                case SOQLParser.FORMAT:
                case SOQLParser.TOLABEL:
                case SOQLParser.CONVERT_TIME_ZONE:
                case SOQLParser.CONVERT_CURRENCY:
                case SOQLParser.GROUPING:
                case SOQLParser.YESTERDAY:
                case SOQLParser.TODAY:
                case SOQLParser.TOMORROW:
                case SOQLParser.LAST_WEEK:
                case SOQLParser.THIS_WEEK:
                case SOQLParser.NEXT_WEEK:
                case SOQLParser.LAST_MONTH:
                case SOQLParser.THIS_MONTH:
                case SOQLParser.NEXT_MONTH:
                case SOQLParser.LAST_90_DAYS:
                case SOQLParser.NEXT_90_DAYS:
                case SOQLParser.THIS_QUARTER:
                case SOQLParser.LAST_QUARTER:
                case SOQLParser.NEXT_QUARTER:
                case SOQLParser.THIS_YEAR:
                case SOQLParser.LAST_YEAR:
                case SOQLParser.NEXT_YEAR:
                case SOQLParser.THIS_FISCAL_QUARTER:
                case SOQLParser.LAST_FISCAL_QUARTER:
                case SOQLParser.NEXT_FISCAL_QUARTER:
                case SOQLParser.THIS_FISCAL_YEAR:
                case SOQLParser.LAST_FISCAL_YEAR:
                case SOQLParser.NEXT_FISCAL_YEAR:
                case SOQLParser.NEXT_N_DAYS:
                case SOQLParser.LAST_N_DAYS:
                case SOQLParser.N_DAYS_AGO:
                case SOQLParser.NEXT_N_WEEKS:
                case SOQLParser.LAST_N_WEEKS:
                case SOQLParser.N_WEEKS_AGO:
                case SOQLParser.NEXT_N_MONTHS:
                case SOQLParser.LAST_N_MONTHS:
                case SOQLParser.N_MONTHS_AGO:
                case SOQLParser.NEXT_N_QUARTERS:
                case SOQLParser.LAST_N_QUARTERS:
                case SOQLParser.N_QUARTERS_AGO:
                case SOQLParser.NEXT_N_YEARS:
                case SOQLParser.LAST_N_YEARS:
                case SOQLParser.N_YEARS_AGO:
                case SOQLParser.NEXT_N_FISCAL_QUARTERS:
                case SOQLParser.LAST_N_FISCAL_QUARTERS:
                case SOQLParser.N_FISCAL_QUARTERS_AGO:
                case SOQLParser.NEXT_N_FISCAL_YEARS:
                case SOQLParser.LAST_N_FISCAL_YEARS:
                case SOQLParser.N_FISCAL_YEARS_AGO:
                case SOQLParser.ID:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 578;
                        this.data_category_name();
                    }
                    break;
                case SOQLParser.LPAREN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 579;
                        this.match(SOQLParser.LPAREN);
                        this.state = 580;
                        this.data_category_name();
                        this.state = 585;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SOQLParser.COMMA) {
                            {
                                {
                                    this.state = 581;
                                    this.match(SOQLParser.COMMA);
                                    this.state = 582;
                                    this.data_category_name();
                                }
                            }
                            this.state = 587;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 588;
                        this.match(SOQLParser.RPAREN);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    data_category_selector() {
        let _localctx = new Data_category_selectorContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, SOQLParser.RULE_data_category_selector);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 592;
                _la = this._input.LA(1);
                if (!(((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    with_security_enforced_clause() {
        let _localctx = new With_security_enforced_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, SOQLParser.RULE_with_security_enforced_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 594;
                this.match(SOQLParser.WITH);
                this.state = 595;
                this.match(SOQLParser.SECURITY_ENFORCED);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    group_by_plain_clause() {
        let _localctx = new Group_by_plain_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, SOQLParser.RULE_group_by_plain_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 597;
                this.group_by_list();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    group_by_rollup_clause() {
        let _localctx = new Group_by_rollup_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, SOQLParser.RULE_group_by_rollup_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 599;
                this.match(SOQLParser.ROLLUP);
                this.state = 600;
                this.match(SOQLParser.LPAREN);
                this.state = 601;
                this.group_by_list();
                this.state = 602;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    group_by_cube_clause() {
        let _localctx = new Group_by_cube_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, SOQLParser.RULE_group_by_cube_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 604;
                this.match(SOQLParser.CUBE);
                this.state = 605;
                this.match(SOQLParser.LPAREN);
                this.state = 606;
                this.group_by_list();
                this.state = 607;
                this.match(SOQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    group_by_list() {
        let _localctx = new Group_by_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, SOQLParser.RULE_group_by_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 609;
                this.group_by_spec();
                this.state = 614;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 610;
                            this.match(SOQLParser.COMMA);
                            this.state = 611;
                            this.group_by_spec();
                        }
                    }
                    this.state = 616;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    group_by_spec() {
        let _localctx = new Group_by_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, SOQLParser.RULE_group_by_spec);
        try {
            this.state = 619;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 60, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 617;
                        this.field();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 618;
                        this.function_call();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    order_by_list() {
        let _localctx = new Order_by_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, SOQLParser.RULE_order_by_list);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 621;
                this.order_by_spec();
                this.state = 626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SOQLParser.COMMA) {
                    {
                        {
                            this.state = 622;
                            this.match(SOQLParser.COMMA);
                            this.state = 623;
                            this.order_by_spec();
                        }
                    }
                    this.state = 628;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    order_by_spec() {
        let _localctx = new Order_by_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, SOQLParser.RULE_order_by_spec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 629;
                this.order_by_field();
                this.state = 631;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.ASC || _la === SOQLParser.DESC) {
                    {
                        this.state = 630;
                        this.order_by_direction_clause();
                    }
                }
                this.state = 634;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SOQLParser.NULLS) {
                    {
                        this.state = 633;
                        this.order_by_nulls_clause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    order_by_direction_clause() {
        let _localctx = new Order_by_direction_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, SOQLParser.RULE_order_by_direction_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 636;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.ASC || _la === SOQLParser.DESC)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    order_by_nulls_clause() {
        let _localctx = new Order_by_nulls_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, SOQLParser.RULE_order_by_nulls_clause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 638;
                this.match(SOQLParser.NULLS);
                this.state = 639;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.FIRST || _la === SOQLParser.LAST)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    order_by_field() {
        let _localctx = new Order_by_fieldContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, SOQLParser.RULE_order_by_field);
        try {
            this.state = 643;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 64, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 641;
                        this.field();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 642;
                        this.function_call();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    for_value() {
        let _localctx = new For_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, SOQLParser.RULE_for_value);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 645;
                _la = this._input.LA(1);
                if (!(((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (SOQLParser.UPDATE - 33)) | (1 << (SOQLParser.REFERENCE - 33)) | (1 << (SOQLParser.VIEW - 33)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    update_value() {
        let _localctx = new Update_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, SOQLParser.RULE_update_value);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 647;
                _la = this._input.LA(1);
                if (!(_la === SOQLParser.TRACKING || _la === SOQLParser.VIEWSTAT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!SOQLParser.__ATN) {
            SOQLParser.__ATN = new ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(SOQLParser._serializedATN));
        }
        return SOQLParser.__ATN;
    }
}
SOQLParser.WHITE_SPACE = 1;
SOQLParser.STRING_VALUE = 2;
SOQLParser.LIKE_STRING_VALUE = 3;
SOQLParser.AND = 4;
SOQLParser.AS = 5;
SOQLParser.ASC = 6;
SOQLParser.BY = 7;
SOQLParser.CUBE = 8;
SOQLParser.DESC = 9;
SOQLParser.ELSE = 10;
SOQLParser.EXCLUDES = 11;
SOQLParser.FALSE = 12;
SOQLParser.FIRST = 13;
SOQLParser.FROM = 14;
SOQLParser.GROUP = 15;
SOQLParser.HAVING = 16;
SOQLParser.IN = 17;
SOQLParser.INCLUDES = 18;
SOQLParser.LAST = 19;
SOQLParser.LIKE = 20;
SOQLParser.LIMIT = 21;
SOQLParser.NOT = 22;
SOQLParser.NULL = 23;
SOQLParser.NULLS = 24;
SOQLParser.OR = 25;
SOQLParser.ROLLUP = 26;
SOQLParser.SELECT = 27;
SOQLParser.TRUE = 28;
SOQLParser.USING = 29;
SOQLParser.WHERE = 30;
SOQLParser.WITH = 31;
SOQLParser.FOR = 32;
SOQLParser.UPDATE = 33;
SOQLParser.ABOVE = 34;
SOQLParser.ABOVE_OR_BELOW = 35;
SOQLParser.AT = 36;
SOQLParser.BELOW = 37;
SOQLParser.CATEGORY = 38;
SOQLParser.DATA = 39;
SOQLParser.END = 40;
SOQLParser.OFFSET = 41;
SOQLParser.ORDER = 42;
SOQLParser.REFERENCE = 43;
SOQLParser.SCOPE = 44;
SOQLParser.TRACKING = 45;
SOQLParser.THEN = 46;
SOQLParser.TYPEOF = 47;
SOQLParser.VIEW = 48;
SOQLParser.VIEWSTAT = 49;
SOQLParser.WHEN = 50;
SOQLParser.SECURITY_ENFORCED = 51;
SOQLParser.CALENDAR_MONTH = 52;
SOQLParser.CALENDAR_QUARTER = 53;
SOQLParser.CALENDAR_YEAR = 54;
SOQLParser.DAY_IN_MONTH = 55;
SOQLParser.DAY_IN_WEEK = 56;
SOQLParser.DAY_IN_YEAR = 57;
SOQLParser.DAY_ONLY = 58;
SOQLParser.FISCAL_MONTH = 59;
SOQLParser.FISCAL_QUARTER = 60;
SOQLParser.FISCAL_YEAR = 61;
SOQLParser.HOUR_IN_DAY = 62;
SOQLParser.WEEK_IN_MONTH = 63;
SOQLParser.WEEK_IN_YEAR = 64;
SOQLParser.AVG = 65;
SOQLParser.COUNT = 66;
SOQLParser.COUNT_DISTINCT = 67;
SOQLParser.MIN = 68;
SOQLParser.MAX = 69;
SOQLParser.SUM = 70;
SOQLParser.DISTANCE = 71;
SOQLParser.GEOLOCATION = 72;
SOQLParser.FORMAT = 73;
SOQLParser.TOLABEL = 74;
SOQLParser.CONVERT_TIME_ZONE = 75;
SOQLParser.CONVERT_CURRENCY = 76;
SOQLParser.GROUPING = 77;
SOQLParser.YESTERDAY = 78;
SOQLParser.TODAY = 79;
SOQLParser.TOMORROW = 80;
SOQLParser.LAST_WEEK = 81;
SOQLParser.THIS_WEEK = 82;
SOQLParser.NEXT_WEEK = 83;
SOQLParser.LAST_MONTH = 84;
SOQLParser.THIS_MONTH = 85;
SOQLParser.NEXT_MONTH = 86;
SOQLParser.LAST_90_DAYS = 87;
SOQLParser.NEXT_90_DAYS = 88;
SOQLParser.THIS_QUARTER = 89;
SOQLParser.LAST_QUARTER = 90;
SOQLParser.NEXT_QUARTER = 91;
SOQLParser.THIS_YEAR = 92;
SOQLParser.LAST_YEAR = 93;
SOQLParser.NEXT_YEAR = 94;
SOQLParser.THIS_FISCAL_QUARTER = 95;
SOQLParser.LAST_FISCAL_QUARTER = 96;
SOQLParser.NEXT_FISCAL_QUARTER = 97;
SOQLParser.THIS_FISCAL_YEAR = 98;
SOQLParser.LAST_FISCAL_YEAR = 99;
SOQLParser.NEXT_FISCAL_YEAR = 100;
SOQLParser.NEXT_N_DAYS = 101;
SOQLParser.LAST_N_DAYS = 102;
SOQLParser.N_DAYS_AGO = 103;
SOQLParser.NEXT_N_WEEKS = 104;
SOQLParser.LAST_N_WEEKS = 105;
SOQLParser.N_WEEKS_AGO = 106;
SOQLParser.NEXT_N_MONTHS = 107;
SOQLParser.LAST_N_MONTHS = 108;
SOQLParser.N_MONTHS_AGO = 109;
SOQLParser.NEXT_N_QUARTERS = 110;
SOQLParser.LAST_N_QUARTERS = 111;
SOQLParser.N_QUARTERS_AGO = 112;
SOQLParser.NEXT_N_YEARS = 113;
SOQLParser.LAST_N_YEARS = 114;
SOQLParser.N_YEARS_AGO = 115;
SOQLParser.NEXT_N_FISCAL_QUARTERS = 116;
SOQLParser.LAST_N_FISCAL_QUARTERS = 117;
SOQLParser.N_FISCAL_QUARTERS_AGO = 118;
SOQLParser.NEXT_N_FISCAL_YEARS = 119;
SOQLParser.LAST_N_FISCAL_YEARS = 120;
SOQLParser.N_FISCAL_YEARS_AGO = 121;
SOQLParser.EQ = 122;
SOQLParser.NOT_EQ = 123;
SOQLParser.LET = 124;
SOQLParser.GET = 125;
SOQLParser.GTH = 126;
SOQLParser.LTH = 127;
SOQLParser.DOT = 128;
SOQLParser.COLON = 129;
SOQLParser.SEMICOLON = 130;
SOQLParser.COMMA = 131;
SOQLParser.ASTERISK = 132;
SOQLParser.RPAREN = 133;
SOQLParser.LPAREN = 134;
SOQLParser.PLUS = 135;
SOQLParser.MINUS = 136;
SOQLParser.ID = 137;
SOQLParser.DATE = 138;
SOQLParser.DATETIME = 139;
SOQLParser.UNSIGNED_INTEGER = 140;
SOQLParser.REAL_NUMBER = 141;
SOQLParser.SIGNED_INTEGER = 142;
SOQLParser.RULE_keywords_alias_allowed = 0;
SOQLParser.RULE_keywords_name_allowed = 1;
SOQLParser.RULE_name = 2;
SOQLParser.RULE_object_name = 3;
SOQLParser.RULE_field_name = 4;
SOQLParser.RULE_filter_scope_name = 5;
SOQLParser.RULE_data_category_group_name = 6;
SOQLParser.RULE_data_category_name = 7;
SOQLParser.RULE_alias_name = 8;
SOQLParser.RULE_alias = 9;
SOQLParser.RULE_literal = 10;
SOQLParser.RULE_date_formula_literal = 11;
SOQLParser.RULE_date_formula_n_literal_name = 12;
SOQLParser.RULE_date_formula_n_literal = 13;
SOQLParser.RULE_datetime_literal = 14;
SOQLParser.RULE_date_literal = 15;
SOQLParser.RULE_integer_literal = 16;
SOQLParser.RULE_real_literal = 17;
SOQLParser.RULE_string_literal = 18;
SOQLParser.RULE_boolean_literal = 19;
SOQLParser.RULE_null_literal = 20;
SOQLParser.RULE_function_name = 21;
SOQLParser.RULE_function_date = 22;
SOQLParser.RULE_function_aggregate = 23;
SOQLParser.RULE_function_location = 24;
SOQLParser.RULE_function_other = 25;
SOQLParser.RULE_soql_query = 26;
SOQLParser.RULE_select_clause = 27;
SOQLParser.RULE_from_clause = 28;
SOQLParser.RULE_using_clause = 29;
SOQLParser.RULE_where_clause = 30;
SOQLParser.RULE_groupby_clause = 31;
SOQLParser.RULE_having_clause = 32;
SOQLParser.RULE_orderby_clause = 33;
SOQLParser.RULE_limit_clause = 34;
SOQLParser.RULE_offset_clause = 35;
SOQLParser.RULE_for_clause = 36;
SOQLParser.RULE_update_clause = 37;
SOQLParser.RULE_soql_subquery = 38;
SOQLParser.RULE_subquery_select_clause = 39;
SOQLParser.RULE_select_spec = 40;
SOQLParser.RULE_subquery_select_spec = 41;
SOQLParser.RULE_field_spec = 42;
SOQLParser.RULE_function_call_spec = 43;
SOQLParser.RULE_field = 44;
SOQLParser.RULE_function_call = 45;
SOQLParser.RULE_function_parameter_list = 46;
SOQLParser.RULE_function_parameter = 47;
SOQLParser.RULE_typeof_spec = 48;
SOQLParser.RULE_typeof_when_then_clause_list = 49;
SOQLParser.RULE_typeof_when_then_clause = 50;
SOQLParser.RULE_typeof_then_clause = 51;
SOQLParser.RULE_typeof_else_clause = 52;
SOQLParser.RULE_field_list = 53;
SOQLParser.RULE_object_spec = 54;
SOQLParser.RULE_object_prefix = 55;
SOQLParser.RULE_comparison_operator = 56;
SOQLParser.RULE_set_operator = 57;
SOQLParser.RULE_condition = 58;
SOQLParser.RULE_condition1 = 59;
SOQLParser.RULE_parenthesis = 60;
SOQLParser.RULE_simple_condition = 61;
SOQLParser.RULE_field_based_condition = 62;
SOQLParser.RULE_set_based_condition = 63;
SOQLParser.RULE_like_based_condition = 64;
SOQLParser.RULE_condition_field = 65;
SOQLParser.RULE_set_values = 66;
SOQLParser.RULE_set_value_list = 67;
SOQLParser.RULE_with_clause = 68;
SOQLParser.RULE_with_plain_clause = 69;
SOQLParser.RULE_with_data_category_clause = 70;
SOQLParser.RULE_data_category_spec_list = 71;
SOQLParser.RULE_data_category_spec = 72;
SOQLParser.RULE_data_category_parameter_list = 73;
SOQLParser.RULE_data_category_selector = 74;
SOQLParser.RULE_with_security_enforced_clause = 75;
SOQLParser.RULE_group_by_plain_clause = 76;
SOQLParser.RULE_group_by_rollup_clause = 77;
SOQLParser.RULE_group_by_cube_clause = 78;
SOQLParser.RULE_group_by_list = 79;
SOQLParser.RULE_group_by_spec = 80;
SOQLParser.RULE_order_by_list = 81;
SOQLParser.RULE_order_by_spec = 82;
SOQLParser.RULE_order_by_direction_clause = 83;
SOQLParser.RULE_order_by_nulls_clause = 84;
SOQLParser.RULE_order_by_field = 85;
SOQLParser.RULE_for_value = 86;
SOQLParser.RULE_update_value = 87;
SOQLParser.ruleNames = [
    "keywords_alias_allowed", "keywords_name_allowed", "name", "object_name",
    "field_name", "filter_scope_name", "data_category_group_name", "data_category_name",
    "alias_name", "alias", "literal", "date_formula_literal", "date_formula_n_literal_name",
    "date_formula_n_literal", "datetime_literal", "date_literal", "integer_literal",
    "real_literal", "string_literal", "boolean_literal", "null_literal", "function_name",
    "function_date", "function_aggregate", "function_location", "function_other",
    "soql_query", "select_clause", "from_clause", "using_clause", "where_clause",
    "groupby_clause", "having_clause", "orderby_clause", "limit_clause", "offset_clause",
    "for_clause", "update_clause", "soql_subquery", "subquery_select_clause",
    "select_spec", "subquery_select_spec", "field_spec", "function_call_spec",
    "field", "function_call", "function_parameter_list", "function_parameter",
    "typeof_spec", "typeof_when_then_clause_list", "typeof_when_then_clause",
    "typeof_then_clause", "typeof_else_clause", "field_list", "object_spec",
    "object_prefix", "comparison_operator", "set_operator", "condition", "condition1",
    "parenthesis", "simple_condition", "field_based_condition", "set_based_condition",
    "like_based_condition", "condition_field", "set_values", "set_value_list",
    "with_clause", "with_plain_clause", "with_data_category_clause", "data_category_spec_list",
    "data_category_spec", "data_category_parameter_list", "data_category_selector",
    "with_security_enforced_clause", "group_by_plain_clause", "group_by_rollup_clause",
    "group_by_cube_clause", "group_by_list", "group_by_spec", "order_by_list",
    "order_by_spec", "order_by_direction_clause", "order_by_nulls_clause",
    "order_by_field", "for_value", "update_value"
];
SOQLParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'='", undefined, "'<='", "'>='", "'>'",
    "'<'", "'.'", "':'", "';'", "','", "'*'", "')'", "'('", "'+'", "'-'"
];
SOQLParser._SYMBOLIC_NAMES = [
    undefined, "WHITE_SPACE", "STRING_VALUE", "LIKE_STRING_VALUE", "AND",
    "AS", "ASC", "BY", "CUBE", "DESC", "ELSE", "EXCLUDES", "FALSE", "FIRST",
    "FROM", "GROUP", "HAVING", "IN", "INCLUDES", "LAST", "LIKE", "LIMIT",
    "NOT", "NULL", "NULLS", "OR", "ROLLUP", "SELECT", "TRUE", "USING", "WHERE",
    "WITH", "FOR", "UPDATE", "ABOVE", "ABOVE_OR_BELOW", "AT", "BELOW", "CATEGORY",
    "DATA", "END", "OFFSET", "ORDER", "REFERENCE", "SCOPE", "TRACKING", "THEN",
    "TYPEOF", "VIEW", "VIEWSTAT", "WHEN", "SECURITY_ENFORCED", "CALENDAR_MONTH",
    "CALENDAR_QUARTER", "CALENDAR_YEAR", "DAY_IN_MONTH", "DAY_IN_WEEK", "DAY_IN_YEAR",
    "DAY_ONLY", "FISCAL_MONTH", "FISCAL_QUARTER", "FISCAL_YEAR", "HOUR_IN_DAY",
    "WEEK_IN_MONTH", "WEEK_IN_YEAR", "AVG", "COUNT", "COUNT_DISTINCT", "MIN",
    "MAX", "SUM", "DISTANCE", "GEOLOCATION", "FORMAT", "TOLABEL", "CONVERT_TIME_ZONE",
    "CONVERT_CURRENCY", "GROUPING", "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK",
    "THIS_WEEK", "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", "NEXT_MONTH", "LAST_90_DAYS",
    "NEXT_90_DAYS", "THIS_QUARTER", "LAST_QUARTER", "NEXT_QUARTER", "THIS_YEAR",
    "LAST_YEAR", "NEXT_YEAR", "THIS_FISCAL_QUARTER", "LAST_FISCAL_QUARTER",
    "NEXT_FISCAL_QUARTER", "THIS_FISCAL_YEAR", "LAST_FISCAL_YEAR", "NEXT_FISCAL_YEAR",
    "NEXT_N_DAYS", "LAST_N_DAYS", "N_DAYS_AGO", "NEXT_N_WEEKS", "LAST_N_WEEKS",
    "N_WEEKS_AGO", "NEXT_N_MONTHS", "LAST_N_MONTHS", "N_MONTHS_AGO", "NEXT_N_QUARTERS",
    "LAST_N_QUARTERS", "N_QUARTERS_AGO", "NEXT_N_YEARS", "LAST_N_YEARS", "N_YEARS_AGO",
    "NEXT_N_FISCAL_QUARTERS", "LAST_N_FISCAL_QUARTERS", "N_FISCAL_QUARTERS_AGO",
    "NEXT_N_FISCAL_YEARS", "LAST_N_FISCAL_YEARS", "N_FISCAL_YEARS_AGO", "EQ",
    "NOT_EQ", "LET", "GET", "GTH", "LTH", "DOT", "COLON", "SEMICOLON", "COMMA",
    "ASTERISK", "RPAREN", "LPAREN", "PLUS", "MINUS", "ID", "DATE", "DATETIME",
    "UNSIGNED_INTEGER", "REAL_NUMBER", "SIGNED_INTEGER"
];
SOQLParser.VOCABULARY = new VocabularyImpl.VocabularyImpl(SOQLParser._LITERAL_NAMES, SOQLParser._SYMBOLIC_NAMES, []);
SOQLParser._serializedATNSegments = 2;
SOQLParser._serializedATNSegment0 = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x03\x90\u028C\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x03\x02\x03\x02\x03\x03\x03\x03\x05\x03\xB7\n\x03\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\xBE\n\x04\x03\x05\x03\x05\x03" +
    "\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n" +
    "\x03\n\x03\n\x05\n\xCF\n\n\x03\v\x05\v\xD2\n\v\x03\v\x03\v\x03\f\x03\f" +
    "\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\xDF\n\f\x03\r\x03\r\x03" +
    "\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03" +
    "\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
    "\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\xFB\n\x17\x03\x18" +
    "\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
    "\x03\x1C\x05\x1C\u0108\n\x1C\x03\x1C\x05\x1C\u010B\n\x1C\x03\x1C\x05\x1C" +
    "\u010E\n\x1C\x03\x1C\x05\x1C\u0111\n\x1C\x03\x1C\x03\x1C\x05\x1C\u0115" +
    "\n\x1C\x05\x1C\u0117\n\x1C\x03\x1C\x05\x1C\u011A\n\x1C\x03\x1C\x05\x1C" +
    "\u011D\n\x1C\x03\x1C\x05\x1C\u0120\n\x1C\x03\x1C\x05\x1C\u0123\n\x1C\x03" +
    "\x1C\x05\x1C\u0126\n\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
    "\x07\x1D\u012E\n\x1D\f\x1D\x0E\x1D\u0131\v\x1D\x03\x1E\x03\x1E\x03\x1E" +
    "\x03\x1E\x07\x1E\u0137\n\x1E\f\x1E\x0E\x1E\u013A\v\x1E\x03\x1F\x03\x1F" +
    "\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x05!\u0148\n" +
    "!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%" +
    "\x03&\x03&\x03&\x03&\x05&\u015B\n&\x03&\x03&\x05&\u015F\n&\x03\'\x03\'" +
    "\x03\'\x03\'\x05\'\u0165\n\'\x03(\x03(\x03(\x03(\x05(\u016B\n(\x03(\x05" +
    "(\u016E\n(\x03(\x05(\u0171\n(\x03(\x05(\u0174\n(\x03(\x05(\u0177\n(\x03" +
    "(\x05(\u017A\n(\x03(\x05(\u017D\n(\x03(\x05(\u0180\n(\x03(\x03(\x03)\x03" +
    ")\x03)\x03)\x07)\u0188\n)\f)\x0E)\u018B\v)\x03*\x03*\x03*\x03*\x05*\u0191" +
    "\n*\x03+\x03+\x05+\u0195\n+\x03,\x03,\x05,\u0199\n,\x03-\x03-\x05-\u019D" +
    "\n-\x03.\x05.\u01A0\n.\x03.\x03.\x03/\x03/\x03/\x05/\u01A7\n/\x03/\x03" +
    "/\x030\x030\x030\x070\u01AE\n0\f0\x0E0\u01B1\v0\x031\x031\x031\x051\u01B6" +
    "\n1\x032\x032\x032\x032\x052\u01BC\n2\x032\x032\x033\x063\u01C1\n3\r3" +
    "\x0E3\u01C2\x034\x034\x034\x034\x035\x035\x035\x036\x036\x036\x037\x03" +
    "7\x037\x077\u01D2\n7\f7\x0E7\u01D5\v7\x038\x058\u01D8\n8\x038\x038\x05" +
    "8\u01DC\n8\x039\x039\x039\x069\u01E1\n9\r9\x0E9\u01E2\x03:\x03:\x03:\x03" +
    ":\x03:\x03:\x03:\x03:\x03:\x03:\x05:\u01EF\n:\x03;\x03;\x03;\x03;\x03" +
    ";\x05;\u01F6\n;\x03<\x03<\x03<\x07<\u01FB\n<\f<\x0E<\u01FE\v<\x03=\x05" +
    "=\u0201\n=\x03=\x03=\x05=\u0205\n=\x03>\x03>\x03>\x03>\x03?\x03?\x03?" +
    "\x05?\u020E\n?\x03@\x03@\x03@\x03@\x03A\x03A\x03A\x03A\x05A\u0218\nA\x03" +
    "B\x03B\x03B\x03B\x03C\x03C\x05C\u0220\nC\x03D\x03D\x03D\x03D\x03E\x03" +
    "E\x03E\x07E\u0229\nE\fE\x0EE\u022C\vE\x03F\x03F\x03F\x05F\u0231\nF\x03" +
    "G\x03G\x03H\x03H\x03H\x03H\x03I\x03I\x03I\x07I\u023C\nI\fI\x0EI\u023F" +
    "\vI\x03J\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03K\x07K\u024A\nK\fK\x0E" +
    "K\u024D\vK\x03K\x03K\x05K\u0251\nK\x03L\x03L\x03M\x03M\x03M\x03N\x03N" +
    "\x03O\x03O\x03O\x03O\x03O\x03P\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x07" +
    "Q\u0267\nQ\fQ\x0EQ\u026A\vQ\x03R\x03R\x05R\u026E\nR\x03S\x03S\x03S\x07" +
    "S\u0273\nS\fS\x0ES\u0276\vS\x03T\x03T\x05T\u027A\nT\x03T\x05T\u027D\n" +
    "T\x03U\x03U\x03V\x03V\x03V\x03W\x03W\x05W\u0286\nW\x03X\x03X\x03Y\x03" +
    "Y\x03Y\x02\x02\x02Z\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02" +
    "\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02" +
    "\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02" +
    ">\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02" +
    "Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02" +
    "v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A" +
    "\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C" +
    "\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE" +
    "\x02\xB0\x02\x02\x12\x03\x02$5\x03\x02Pf\x03\x02g{\x04\x02\x8E\x8E\x90" +
    "\x90\x04\x02\x0E\x0E\x1E\x1E\x03\x026B\x03\x02CH\x03\x02IJ\x03\x02KO\x04" +
    "\x02\x06\x06\x1B\x1B\x03\x02\x04\x05\x03\x02$\'\x04\x02\b\b\v\v\x04\x02" +
    "\x0F\x0F\x15\x15\x05\x02##--22\x04\x02//33\u0290\x02\xB2\x03\x02\x02\x02" +
    "\x04\xB6\x03\x02\x02\x02\x06\xBD\x03\x02\x02\x02\b\xBF\x03\x02\x02\x02" +
    "\n\xC1\x03\x02\x02\x02\f\xC3\x03\x02\x02\x02\x0E\xC5\x03\x02\x02\x02\x10" +
    "\xC7\x03\x02\x02\x02\x12\xCE\x03\x02\x02\x02\x14\xD1\x03\x02\x02\x02\x16" +
    "\xDE\x03\x02\x02\x02\x18\xE0\x03\x02\x02\x02\x1A\xE2\x03\x02\x02\x02\x1C" +
    "\xE4\x03\x02\x02\x02\x1E\xE8\x03\x02\x02\x02 \xEA\x03\x02\x02\x02\"\xEC" +
    "\x03\x02\x02\x02$\xEE\x03\x02\x02\x02&\xF0\x03\x02\x02\x02(\xF2\x03\x02" +
    "\x02\x02*\xF4\x03\x02\x02\x02,\xFA\x03\x02\x02\x02.\xFC\x03\x02\x02\x02" +
    "0\xFE\x03\x02\x02\x022\u0100\x03\x02\x02\x024\u0102\x03\x02\x02\x026\u0104" +
    "\x03\x02\x02\x028\u0129\x03\x02\x02\x02:\u0132\x03\x02\x02\x02<\u013B" +
    "\x03\x02\x02\x02>\u013F\x03\x02\x02\x02@\u0142\x03\x02\x02\x02B\u0149" +
    "\x03\x02\x02\x02D\u014C\x03\x02\x02\x02F\u0150\x03\x02\x02\x02H\u0153" +
    "\x03\x02\x02\x02J\u0156\x03\x02\x02\x02L\u0160\x03\x02\x02\x02N\u0166" +
    "\x03\x02\x02\x02P\u0183\x03\x02\x02\x02R\u0190\x03\x02\x02\x02T\u0194" +
    "\x03\x02\x02\x02V\u0196\x03\x02\x02\x02X\u019A\x03\x02\x02\x02Z\u019F" +
    "\x03\x02\x02\x02\\\u01A3\x03\x02\x02\x02^\u01AA\x03\x02\x02\x02`\u01B5" +
    "\x03\x02\x02\x02b\u01B7\x03\x02\x02\x02d\u01C0\x03\x02\x02\x02f\u01C4" +
    "\x03\x02\x02\x02h\u01C8\x03\x02\x02\x02j\u01CB\x03\x02\x02\x02l\u01CE" +
    "\x03\x02\x02\x02n\u01D7\x03\x02\x02\x02p\u01E0\x03\x02\x02\x02r\u01EE" +
    "\x03\x02\x02\x02t\u01F5\x03\x02\x02\x02v\u01F7\x03\x02\x02\x02x\u0200" +
    "\x03\x02\x02\x02z\u0206\x03\x02\x02\x02|\u020D\x03\x02\x02\x02~\u020F" +
    "\x03\x02\x02\x02\x80\u0213\x03\x02\x02\x02\x82\u0219\x03\x02\x02\x02\x84" +
    "\u021F\x03\x02\x02\x02\x86\u0221\x03\x02\x02\x02\x88\u0225\x03\x02\x02" +
    "\x02\x8A\u022D\x03\x02\x02\x02\x8C\u0232\x03\x02\x02\x02\x8E\u0234\x03" +
    "\x02\x02\x02\x90\u0238\x03\x02\x02\x02\x92\u0240\x03\x02\x02\x02\x94\u0250" +
    "\x03\x02\x02\x02\x96\u0252\x03\x02\x02\x02\x98\u0254\x03\x02\x02\x02\x9A" +
    "\u0257\x03\x02\x02\x02\x9C\u0259\x03\x02\x02\x02\x9E\u025E\x03\x02\x02" +
    "\x02\xA0\u0263\x03\x02\x02\x02\xA2\u026D\x03\x02\x02\x02\xA4\u026F\x03" +
    "\x02\x02\x02\xA6\u0277\x03\x02\x02\x02\xA8\u027E\x03\x02\x02\x02\xAA\u0280" +
    "\x03\x02\x02\x02\xAC\u0285\x03\x02\x02\x02\xAE\u0287\x03\x02\x02\x02\xB0" +
    "\u0289\x03\x02\x02\x02\xB2\xB3\t\x02\x02\x02\xB3\x03\x03\x02\x02\x02\xB4" +
    "\xB7\x05\x02\x02\x02\xB5\xB7\x07\x11\x02\x02\xB6\xB4\x03\x02\x02\x02\xB6" +
    "\xB5\x03\x02\x02\x02\xB7\x05\x03\x02\x02\x02\xB8\xBE\x07\x8B\x02\x02\xB9" +
    "\xBE\x05\x04\x03\x02\xBA\xBE\x05\x18\r\x02\xBB\xBE\x05\x1A\x0E\x02\xBC" +
    "\xBE\x05,\x17\x02\xBD\xB8\x03\x02\x02\x02\xBD\xB9\x03\x02\x02\x02\xBD" +
    "\xBA\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBD\xBC\x03\x02\x02\x02\xBE" +
    "\x07\x03\x02\x02\x02\xBF\xC0\x05\x06\x04\x02\xC0\t\x03\x02\x02\x02\xC1" +
    "\xC2\x05\x06\x04\x02\xC2\v\x03\x02\x02\x02\xC3\xC4\x05\x06\x04\x02\xC4" +
    "\r\x03\x02\x02\x02\xC5\xC6\x05\x06\x04\x02\xC6\x0F\x03\x02\x02\x02\xC7" +
    "\xC8\x05\x06\x04\x02\xC8\x11\x03\x02\x02\x02\xC9\xCF\x07\x8B\x02\x02\xCA" +
    "\xCF\x05\x02\x02\x02\xCB\xCF\x05\x18\r\x02\xCC\xCF\x05\x1A\x0E\x02\xCD" +
    "\xCF\x05,\x17\x02\xCE\xC9\x03\x02\x02\x02\xCE\xCA\x03\x02\x02\x02\xCE" +
    "\xCB\x03\x02\x02\x02\xCE\xCC\x03\x02\x02\x02\xCE\xCD\x03\x02\x02\x02\xCF" +
    "\x13\x03\x02\x02\x02\xD0\xD2\x07\x07\x02\x02\xD1\xD0\x03\x02\x02\x02\xD1" +
    "\xD2\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD4\x05\x12\n\x02\xD4" +
    "\x15\x03\x02\x02\x02\xD5\xDF\x05\x18\r\x02\xD6\xDF\x05\x1C\x0F\x02\xD7" +
    "\xDF\x05\x1E\x10\x02\xD8\xDF\x05 \x11\x02\xD9\xDF\x05\"\x12\x02\xDA\xDF" +
    "\x05$\x13\x02\xDB\xDF\x05&\x14\x02\xDC\xDF\x05(\x15\x02\xDD\xDF\x05*\x16" +
    "\x02\xDE\xD5\x03\x02\x02\x02\xDE\xD6\x03\x02\x02\x02\xDE\xD7\x03\x02\x02" +
    "\x02\xDE\xD8\x03\x02\x02\x02\xDE\xD9\x03\x02\x02\x02\xDE\xDA\x03\x02\x02" +
    "\x02\xDE\xDB\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDD\x03\x02\x02" +
    "\x02\xDF\x17\x03\x02\x02\x02\xE0\xE1\t\x03\x02\x02\xE1\x19\x03\x02\x02" +
    "\x02\xE2\xE3\t\x04\x02\x02\xE3\x1B\x03\x02\x02\x02\xE4\xE5\x05\x1A\x0E" +
    "\x02\xE5\xE6\x07\x83\x02\x02\xE6\xE7\x07\x8E\x02\x02\xE7\x1D\x03\x02\x02" +
    "\x02\xE8\xE9\x07\x8D\x02\x02\xE9\x1F\x03\x02\x02\x02\xEA\xEB\x07\x8C\x02" +
    "\x02\xEB!\x03\x02\x02\x02\xEC\xED\t\x05\x02\x02\xED#\x03\x02\x02\x02\xEE" +
    "\xEF\x07\x8F\x02\x02\xEF%\x03\x02\x02\x02\xF0\xF1\x07\x04\x02\x02\xF1" +
    "\'\x03\x02\x02\x02\xF2\xF3\t\x06\x02\x02\xF3)\x03\x02\x02\x02\xF4\xF5" +
    "\x07\x19\x02\x02\xF5+\x03\x02\x02\x02\xF6\xFB\x05.\x18\x02\xF7\xFB\x05" +
    "0\x19\x02\xF8\xFB\x052\x1A\x02\xF9\xFB\x054\x1B\x02\xFA\xF6\x03\x02\x02" +
    "\x02\xFA\xF7\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xF9\x03\x02\x02" +
    "\x02\xFB-\x03\x02\x02\x02\xFC\xFD\t\x07\x02\x02\xFD/\x03\x02\x02\x02\xFE" +
    "\xFF\t\b\x02\x02\xFF1\x03\x02\x02\x02\u0100\u0101\t\t\x02\x02\u01013\x03" +
    "\x02\x02\x02\u0102\u0103\t\n\x02\x02\u01035\x03\x02\x02\x02\u0104\u0105" +
    "\x058\x1D\x02\u0105\u0107\x05:\x1E\x02\u0106\u0108\x05<\x1F\x02\u0107" +
    "\u0106\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u010A\x03\x02" +
    "\x02\x02\u0109\u010B\x05> \x02\u010A\u0109\x03\x02\x02\x02\u010A\u010B" +
    "\x03\x02\x02\x02\u010B\u010D\x03\x02\x02\x02\u010C\u010E\x05\x8AF\x02" +
    "\u010D\u010C\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010E\u0110\x03" +
    "\x02\x02\x02\u010F\u0111\x05\x98M\x02\u0110\u010F\x03\x02\x02\x02\u0110" +
    "\u0111\x03\x02\x02\x02\u0111\u0116\x03\x02\x02\x02\u0112\u0114\x05@!\x02" +
    "\u0113\u0115\x05B\"\x02\u0114\u0113\x03\x02\x02\x02\u0114\u0115\x03\x02" +
    "\x02\x02\u0115\u0117\x03\x02\x02\x02\u0116\u0112\x03\x02\x02\x02\u0116" +
    "\u0117\x03\x02\x02\x02\u0117\u0119\x03\x02\x02\x02\u0118\u011A\x05D#\x02" +
    "\u0119\u0118\x03\x02\x02\x02\u0119\u011A\x03\x02\x02\x02\u011A\u011C\x03" +
    "\x02\x02\x02\u011B\u011D\x05F$\x02\u011C\u011B\x03\x02\x02\x02\u011C\u011D" +
    "\x03\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E\u0120\x05H%\x02\u011F" +
    "\u011E\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02\u0120\u0122\x03\x02" +
    "\x02\x02\u0121\u0123\x05J&\x02\u0122\u0121\x03\x02\x02\x02\u0122\u0123" +
    "\x03\x02\x02\x02\u0123\u0125\x03\x02\x02\x02\u0124\u0126\x05L\'\x02\u0125" +
    "\u0124\x03\x02\x02\x02\u0125\u0126\x03\x02\x02\x02\u0126\u0127\x03\x02" +
    "\x02\x02\u0127\u0128\x07\x02\x02\x03\u01287\x03\x02\x02\x02\u0129\u012A" +
    "\x07\x1D\x02\x02\u012A\u012F\x05R*\x02\u012B\u012C\x07\x85\x02\x02\u012C" +
    "\u012E\x05R*\x02\u012D\u012B\x03\x02\x02\x02\u012E\u0131\x03\x02\x02\x02" +
    "\u012F\u012D\x03\x02\x02\x02\u012F\u0130\x03\x02\x02\x02\u01309\x03\x02" +
    "\x02\x02\u0131\u012F\x03\x02\x02\x02\u0132\u0133\x07\x10\x02\x02\u0133" +
    "\u0138\x05n8\x02\u0134\u0135\x07\x85\x02\x02\u0135\u0137\x05n8\x02\u0136" +
    "\u0134\x03\x02\x02\x02\u0137\u013A\x03\x02\x02\x02\u0138\u0136\x03\x02" +
    "\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139;\x03\x02\x02\x02\u013A\u0138" +
    "\x03\x02\x02\x02\u013B\u013C\x07\x1F\x02\x02\u013C\u013D\x07.\x02\x02" +
    "\u013D\u013E\x05\f\x07\x02\u013E=\x03\x02\x02\x02\u013F\u0140\x07 \x02" +
    "\x02\u0140\u0141\x05v<\x02\u0141?\x03\x02\x02\x02\u0142\u0143\x07\x11" +
    "\x02\x02\u0143\u0147\x07\t\x02\x02\u0144\u0148\x05\x9CO\x02\u0145\u0148" +
    "\x05\x9EP\x02\u0146\u0148\x05\x9AN\x02\u0147\u0144\x03\x02\x02\x02\u0147" +
    "\u0145\x03\x02\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148A\x03\x02\x02" +
    "\x02\u0149\u014A\x07\x12\x02\x02\u014A\u014B\x05v<\x02\u014BC\x03\x02" +
    "\x02\x02\u014C\u014D\x07,\x02\x02\u014D\u014E\x07\t\x02\x02\u014E\u014F" +
    "\x05\xA4S\x02\u014FE\x03\x02\x02\x02\u0150\u0151\x07\x17\x02\x02\u0151" +
    "\u0152\x07\x8E\x02\x02\u0152G\x03\x02\x02\x02\u0153\u0154\x07+\x02\x02" +
    "\u0154\u0155\x07\x8E\x02\x02\u0155I\x03\x02\x02\x02\u0156\u0157\x07\"" +
    "\x02\x02\u0157\u015A\x05\xAEX\x02\u0158\u0159\x07\x85\x02\x02\u0159\u015B" +
    "\x05\xAEX\x02\u015A\u0158\x03\x02\x02\x02\u015A\u015B\x03\x02\x02\x02" +
    "\u015B\u015E\x03\x02\x02\x02\u015C\u015D\x07\x85\x02\x02\u015D\u015F\x05" +
    "\xAEX\x02\u015E\u015C\x03\x02\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F" +
    "K\x03\x02\x02\x02\u0160\u0161\x07#\x02\x02\u0161\u0164\x05\xB0Y\x02\u0162" +
    "\u0163\x07\x85\x02\x02\u0163\u0165\x05\xB0Y\x02\u0164\u0162\x03\x02\x02" +
    "\x02\u0164\u0165\x03\x02\x02\x02\u0165M\x03\x02\x02\x02\u0166\u0167\x07" +
    "\x88\x02\x02\u0167\u0168\x05P)\x02\u0168\u016A\x05:\x1E\x02\u0169\u016B" +
    "\x05<\x1F\x02\u016A\u0169\x03\x02\x02\x02\u016A\u016B\x03\x02\x02\x02" +
    "\u016B\u016D\x03\x02\x02\x02\u016C\u016E\x05> \x02\u016D\u016C\x03\x02" +
    "\x02\x02\u016D\u016E\x03\x02\x02\x02\u016E\u0170\x03\x02\x02\x02\u016F" +
    "\u0171\x05\x8AF\x02\u0170\u016F\x03\x02\x02\x02\u0170\u0171\x03\x02\x02" +
    "\x02\u0171\u0173\x03\x02\x02\x02\u0172\u0174\x05D#\x02\u0173\u0172\x03" +
    "\x02\x02\x02\u0173\u0174\x03\x02\x02\x02\u0174\u0176\x03\x02\x02\x02\u0175" +
    "\u0177\x05F$\x02\u0176\u0175\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02" +
    "\u0177\u0179\x03\x02\x02\x02\u0178\u017A\x05H%\x02\u0179\u0178\x03\x02" +
    "\x02\x02\u0179\u017A\x03\x02\x02\x02\u017A\u017C\x03\x02\x02\x02\u017B" +
    "\u017D\x05J&\x02\u017C\u017B\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02" +
    "\u017D\u017F\x03\x02\x02\x02\u017E\u0180\x05L\'\x02\u017F\u017E\x03\x02" +
    "\x02\x02\u017F\u0180\x03\x02\x02\x02\u0180\u0181\x03\x02\x02\x02\u0181" +
    "\u0182\x07\x87\x02\x02\u0182O\x03\x02\x02\x02\u0183\u0184\x07\x1D\x02" +
    "\x02\u0184\u0189\x05T+\x02\u0185\u0186\x07\x85\x02\x02\u0186\u0188\x05" +
    "T+\x02\u0187\u0185\x03\x02\x02\x02\u0188\u018B\x03\x02\x02\x02\u0189\u0187" +
    "\x03\x02\x02\x02\u0189\u018A\x03\x02\x02\x02\u018AQ\x03\x02\x02\x02\u018B" +
    "\u0189\x03\x02\x02\x02\u018C\u0191\x05V,\x02\u018D\u0191\x05X-\x02\u018E" +
    "\u0191\x05N(\x02\u018F\u0191\x05b2\x02\u0190\u018C\x03\x02\x02\x02\u0190" +
    "\u018D\x03\x02\x02\x02\u0190\u018E\x03\x02\x02\x02\u0190\u018F\x03\x02" +
    "\x02\x02\u0191S\x03\x02\x02\x02\u0192\u0195\x05V,\x02\u0193\u0195\x05" +
    "X-\x02\u0194\u0192\x03\x02\x02\x02\u0194\u0193\x03\x02\x02\x02\u0195U" +
    "\x03\x02\x02\x02\u0196\u0198\x05Z.\x02\u0197\u0199\x05\x14\v\x02\u0198" +
    "\u0197\x03\x02\x02\x02\u0198\u0199\x03\x02\x02\x02\u0199W\x03\x02\x02" +
    "\x02\u019A\u019C\x05\\/\x02\u019B\u019D\x05\x14\v\x02\u019C\u019B\x03" +
    "\x02\x02\x02\u019C\u019D\x03\x02\x02\x02\u019DY\x03\x02\x02\x02\u019E" +
    "\u01A0\x05p9\x02\u019F\u019E\x03\x02\x02\x02\u019F\u01A0\x03\x02\x02\x02" +
    "\u01A0\u01A1\x03\x02\x02\x02\u01A1\u01A2\x05\n\x06\x02\u01A2[\x03\x02" +
    "\x02\x02\u01A3\u01A4\x05,\x17\x02\u01A4\u01A6\x07\x88\x02\x02\u01A5\u01A7" +
    "\x05^0\x02\u01A6\u01A5\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02\x02\u01A7" +
    "\u01A8\x03\x02\x02\x02\u01A8\u01A9\x07\x87\x02\x02\u01A9]\x03\x02\x02" +
    "\x02\u01AA\u01AF\x05`1\x02\u01AB\u01AC\x07\x85\x02\x02\u01AC\u01AE\x05" +
    "`1\x02\u01AD\u01AB\x03\x02\x02\x02\u01AE\u01B1\x03\x02\x02\x02\u01AF\u01AD" +
    "\x03\x02\x02\x02\u01AF\u01B0\x03\x02\x02\x02\u01B0_\x03\x02\x02\x02\u01B1" +
    "\u01AF\x03\x02\x02\x02\u01B2\u01B6\x05Z.\x02\u01B3\u01B6\x05\x16\f\x02" +
    "\u01B4\u01B6\x05\\/\x02\u01B5\u01B2\x03\x02\x02\x02\u01B5\u01B3\x03\x02" +
    "\x02\x02\u01B5\u01B4\x03\x02\x02\x02\u01B6a\x03\x02\x02\x02\u01B7\u01B8" +
    "\x071\x02\x02\u01B8\u01B9\x05Z.\x02\u01B9\u01BB\x05d3\x02\u01BA\u01BC" +
    "\x05j6\x02\u01BB\u01BA\x03\x02\x02\x02\u01BB\u01BC\x03\x02\x02\x02\u01BC" +
    "\u01BD\x03\x02\x02\x02\u01BD\u01BE\x07*\x02\x02\u01BEc\x03\x02\x02\x02" +
    "\u01BF\u01C1\x05f4\x02\u01C0\u01BF\x03\x02\x02\x02\u01C1\u01C2\x03\x02" +
    "\x02\x02\u01C2\u01C0\x03\x02\x02\x02\u01C2\u01C3\x03\x02\x02\x02\u01C3" +
    "e\x03\x02\x02\x02\u01C4\u01C5\x074\x02\x02\u01C5\u01C6\x05\b\x05\x02\u01C6" +
    "\u01C7\x05h5\x02\u01C7g\x03\x02\x02\x02\u01C8\u01C9\x070\x02\x02\u01C9" +
    "\u01CA\x05l7\x02\u01CAi\x03\x02\x02\x02\u01CB\u01CC\x07\f\x02\x02\u01CC" +
    "\u01CD\x05l7\x02\u01CDk\x03\x02\x02\x02\u01CE\u01D3\x05Z.\x02\u01CF\u01D0" +
    "\x07\x85\x02\x02\u01D0\u01D2\x05Z.\x02\u01D1\u01CF\x03\x02\x02\x02\u01D2" +
    "\u01D5\x03\x02\x02\x02\u01D3\u01D1\x03\x02\x02\x02\u01D3\u01D4\x03\x02" +
    "\x02\x02\u01D4m\x03\x02\x02\x02\u01D5\u01D3\x03\x02\x02\x02\u01D6\u01D8" +
    "\x05p9\x02\u01D7\u01D6\x03\x02\x02\x02\u01D7\u01D8\x03\x02\x02\x02\u01D8" +
    "\u01D9\x03\x02\x02\x02\u01D9\u01DB\x05\b\x05\x02\u01DA\u01DC\x05\x14\v" +
    "\x02\u01DB\u01DA\x03\x02\x02\x02\u01DB\u01DC\x03\x02\x02\x02\u01DCo\x03" +
    "\x02\x02\x02\u01DD\u01DE\x05\b\x05\x02\u01DE\u01DF\x07\x82\x02\x02\u01DF" +
    "\u01E1\x03\x02\x02\x02\u01E0\u01DD\x03\x02\x02\x02\u01E1\u01E2\x03\x02" +
    "\x02\x02\u01E2\u01E0\x03\x02\x02\x02\u01E2\u01E3\x03\x02\x02\x02\u01E3" +
    "q\x03\x02\x02\x02\u01E4\u01EF\x07|\x02\x02\u01E5\u01EF\x07}\x02\x02\u01E6" +
    "\u01EF\x07~\x02\x02\u01E7\u01EF\x07\x7F\x02\x02\u01E8\u01EF\x07\x80\x02" +
    "\x02\u01E9\u01EF\x07\x81\x02\x02\u01EA\u01EB\x07\x80\x02\x02\u01EB\u01EF" +
    "\x07|\x02\x02\u01EC\u01ED\x07\x81\x02\x02\u01ED\u01EF\x07|\x02\x02\u01EE" +
    "\u01E4\x03\x02\x02\x02\u01EE\u01E5\x03\x02\x02\x02\u01EE\u01E6\x03\x02" +
    "\x02\x02\u01EE\u01E7\x03\x02\x02\x02\u01EE\u01E8\x03\x02\x02\x02\u01EE" +
    "\u01E9\x03\x02\x02\x02\u01EE\u01EA\x03\x02\x02\x02\u01EE\u01EC\x03\x02" +
    "\x02\x02\u01EFs\x03\x02\x02\x02\u01F0\u01F6\x07\x13\x02\x02\u01F1\u01F2" +
    "\x07\x18\x02\x02\u01F2\u01F6\x07\x13\x02\x02\u01F3\u01F6\x07\x14\x02\x02" +
    "\u01F4\u01F6\x07\r\x02\x02\u01F5\u01F0\x03\x02\x02\x02\u01F5\u01F1\x03" +
    "\x02\x02\x02\u01F5\u01F3\x03\x02\x02\x02\u01F5\u01F4\x03\x02\x02\x02\u01F6" +
    "u\x03\x02\x02\x02\u01F7\u01FC\x05x=\x02\u01F8\u01F9\t\v\x02\x02\u01F9" +
    "\u01FB\x05x=\x02\u01FA\u01F8\x03\x02\x02\x02\u01FB\u01FE\x03\x02\x02\x02" +
    "\u01FC\u01FA\x03\x02\x02\x02\u01FC\u01FD\x03\x02\x02\x02\u01FDw\x03\x02" +
    "\x02\x02\u01FE\u01FC\x03\x02\x02\x02\u01FF\u0201\x07\x18\x02\x02\u0200" +
    "\u01FF\x03\x02\x02\x02\u0200\u0201\x03\x02\x02\x02\u0201\u0204\x03\x02" +
    "\x02\x02\u0202\u0205\x05|?\x02\u0203\u0205\x05z>\x02\u0204\u0202\x03\x02" +
    "\x02\x02\u0204\u0203\x03\x02\x02\x02\u0205y\x03\x02\x02\x02\u0206\u0207" +
    "\x07\x88\x02\x02\u0207\u0208\x05v<\x02\u0208\u0209\x07\x87\x02\x02\u0209" +
    "{\x03\x02\x02\x02\u020A\u020E\x05~@\x02\u020B\u020E\x05\x80A\x02\u020C" +
    "\u020E\x05\x82B\x02\u020D\u020A\x03\x02\x02\x02\u020D\u020B\x03\x02\x02" +
    "\x02\u020D\u020C\x03\x02\x02\x02\u020E}\x03\x02\x02\x02\u020F\u0210\x05" +
    "\x84C\x02\u0210\u0211\x05r:\x02\u0211\u0212\x05\x16\f\x02\u0212\x7F\x03" +
    "\x02\x02\x02\u0213\u0214\x05\x84C\x02\u0214\u0217\x05t;\x02\u0215\u0218" +
    "\x05N(\x02\u0216\u0218\x05\x86D\x02\u0217\u0215\x03\x02\x02\x02\u0217" +
    "\u0216\x03\x02\x02\x02\u0218\x81\x03\x02\x02\x02\u0219\u021A\x05\x84C" +
    "\x02\u021A\u021B\x07\x16\x02\x02\u021B\u021C\t\f\x02\x02\u021C\x83\x03" +
    "\x02\x02\x02\u021D\u0220\x05Z.\x02\u021E\u0220\x05\\/\x02\u021F\u021D" +
    "\x03\x02\x02\x02\u021F\u021E\x03\x02\x02\x02\u0220\x85\x03\x02\x02\x02" +
    "\u0221\u0222\x07\x88\x02\x02\u0222\u0223\x05\x88E\x02\u0223\u0224\x07" +
    "\x87\x02\x02\u0224\x87\x03\x02\x02\x02\u0225\u022A\x05\x16\f\x02\u0226" +
    "\u0227\x07\x85\x02\x02\u0227\u0229\x05\x16\f\x02\u0228\u0226\x03\x02\x02" +
    "\x02\u0229\u022C\x03\x02\x02\x02\u022A\u0228\x03\x02\x02\x02\u022A\u022B" +
    "\x03\x02\x02\x02\u022B\x89\x03\x02\x02\x02\u022C\u022A\x03\x02\x02\x02" +
    "\u022D\u0230\x07!\x02\x02\u022E\u0231\x05\x8CG\x02\u022F\u0231\x05\x8E" +
    "H\x02\u0230\u022E\x03\x02\x02\x02\u0230\u022F\x03\x02\x02\x02\u0231\x8B" +
    "\x03\x02\x02\x02\u0232\u0233\x05~@\x02\u0233\x8D\x03\x02\x02";
SOQLParser._serializedATNSegment1 = "\x02\u0234\u0235\x07)\x02\x02\u0235\u0236\x07(\x02\x02\u0236\u0237\x05" +
    "\x90I\x02\u0237\x8F\x03\x02\x02\x02\u0238\u023D\x05\x92J\x02\u0239\u023A" +
    "\x07\x06\x02\x02\u023A\u023C\x05\x92J\x02\u023B\u0239\x03\x02\x02\x02" +
    "\u023C\u023F\x03\x02\x02\x02\u023D\u023B\x03\x02\x02\x02\u023D\u023E\x03" +
    "\x02\x02\x02\u023E\x91\x03\x02\x02\x02\u023F\u023D\x03\x02\x02\x02\u0240" +
    "\u0241\x05\x0E\b\x02\u0241\u0242\x05\x96L\x02\u0242\u0243\x05\x94K\x02" +
    "\u0243\x93\x03\x02\x02\x02\u0244\u0251\x05\x10\t\x02\u0245\u0246\x07\x88" +
    "\x02\x02\u0246\u024B\x05\x10\t\x02\u0247\u0248\x07\x85\x02\x02\u0248\u024A" +
    "\x05\x10\t\x02\u0249\u0247\x03\x02\x02\x02\u024A\u024D\x03\x02\x02\x02" +
    "\u024B\u0249\x03\x02\x02\x02\u024B\u024C\x03\x02\x02\x02\u024C\u024E\x03" +
    "\x02\x02\x02\u024D\u024B\x03\x02\x02\x02\u024E\u024F\x07\x87\x02\x02\u024F" +
    "\u0251\x03\x02\x02\x02\u0250\u0244\x03\x02\x02\x02\u0250\u0245\x03\x02" +
    "\x02\x02\u0251\x95\x03\x02\x02\x02\u0252\u0253\t\r\x02\x02\u0253\x97\x03" +
    "\x02\x02\x02\u0254\u0255\x07!\x02\x02\u0255\u0256\x075\x02\x02\u0256\x99" +
    "\x03\x02\x02\x02\u0257\u0258\x05\xA0Q\x02\u0258\x9B\x03\x02\x02\x02\u0259" +
    "\u025A\x07\x1C\x02\x02\u025A\u025B\x07\x88\x02\x02\u025B\u025C\x05\xA0" +
    "Q\x02\u025C\u025D\x07\x87\x02\x02\u025D\x9D\x03\x02\x02\x02\u025E\u025F" +
    "\x07\n\x02\x02\u025F\u0260\x07\x88\x02\x02\u0260\u0261\x05\xA0Q\x02\u0261" +
    "\u0262\x07\x87\x02\x02\u0262\x9F\x03\x02\x02\x02\u0263\u0268\x05\xA2R" +
    "\x02\u0264\u0265\x07\x85\x02\x02\u0265\u0267\x05\xA2R\x02\u0266\u0264" +
    "\x03\x02\x02\x02\u0267\u026A\x03\x02\x02\x02\u0268\u0266\x03\x02\x02\x02" +
    "\u0268\u0269\x03\x02\x02\x02\u0269\xA1\x03\x02\x02\x02\u026A\u0268\x03" +
    "\x02\x02\x02\u026B\u026E\x05Z.\x02\u026C\u026E\x05\\/\x02\u026D\u026B" +
    "\x03\x02\x02\x02\u026D\u026C\x03\x02\x02\x02\u026E\xA3\x03\x02\x02\x02" +
    "\u026F\u0274\x05\xA6T\x02\u0270\u0271\x07\x85\x02\x02\u0271\u0273\x05" +
    "\xA6T\x02\u0272\u0270\x03\x02\x02\x02\u0273\u0276\x03\x02\x02\x02\u0274" +
    "\u0272\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275\xA5\x03\x02\x02" +
    "\x02\u0276\u0274\x03\x02\x02\x02\u0277\u0279\x05\xACW\x02\u0278\u027A" +
    "\x05\xA8U\x02\u0279\u0278\x03\x02\x02\x02\u0279\u027A\x03\x02\x02\x02" +
    "\u027A\u027C\x03\x02\x02\x02\u027B\u027D\x05\xAAV\x02\u027C\u027B\x03" +
    "\x02\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D\xA7\x03\x02\x02\x02\u027E" +
    "\u027F\t\x0E\x02\x02\u027F\xA9\x03\x02\x02\x02\u0280\u0281\x07\x1A\x02" +
    "\x02\u0281\u0282\t\x0F\x02\x02\u0282\xAB\x03\x02\x02\x02\u0283\u0286\x05" +
    "Z.\x02\u0284\u0286\x05\\/\x02\u0285\u0283\x03\x02\x02\x02\u0285\u0284" +
    "\x03\x02\x02\x02\u0286\xAD\x03\x02\x02\x02\u0287\u0288\t\x10\x02\x02\u0288" +
    "\xAF\x03\x02\x02\x02\u0289\u028A\t\x11\x02\x02\u028A\xB1\x03\x02\x02\x02" +
    "C\xB6\xBD\xCE\xD1\xDE\xFA\u0107\u010A\u010D\u0110\u0114\u0116\u0119\u011C" +
    "\u011F\u0122\u0125\u012F\u0138\u0147\u015A\u015E\u0164\u016A\u016D\u0170" +
    "\u0173\u0176\u0179\u017C\u017F\u0189\u0190\u0194\u0198\u019C\u019F\u01A6" +
    "\u01AF\u01B5\u01BB\u01C2\u01D3\u01D7\u01DB\u01E2\u01EE\u01F5\u01FC\u0200" +
    "\u0204\u020D\u0217\u021F\u022A\u0230\u023D\u024B\u0250\u0268\u026D\u0274" +
    "\u0279\u027C\u0285";
SOQLParser._serializedATN = Utils.join([
    SOQLParser._serializedATNSegment0,
    SOQLParser._serializedATNSegment1
], "");
__decorate([
    Decorators.Override,
    Decorators.NotNull,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], SOQLParser.prototype, "vocabulary", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], SOQLParser.prototype, "grammarFileName", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [])
], SOQLParser.prototype, "ruleNames", null);
__decorate([
    Decorators.Override,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], SOQLParser.prototype, "serializedATN", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Keywords_alias_allowedContext)
], SOQLParser.prototype, "keywords_alias_allowed", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Keywords_name_allowedContext)
], SOQLParser.prototype, "keywords_name_allowed", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", NameContext)
], SOQLParser.prototype, "name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object_nameContext)
], SOQLParser.prototype, "object_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Field_nameContext)
], SOQLParser.prototype, "field_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Filter_scope_nameContext)
], SOQLParser.prototype, "filter_scope_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_group_nameContext)
], SOQLParser.prototype, "data_category_group_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_nameContext)
], SOQLParser.prototype, "data_category_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Alias_nameContext)
], SOQLParser.prototype, "alias_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", AliasContext)
], SOQLParser.prototype, "alias", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", LiteralContext)
], SOQLParser.prototype, "literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Date_formula_literalContext)
], SOQLParser.prototype, "date_formula_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Date_formula_n_literal_nameContext)
], SOQLParser.prototype, "date_formula_n_literal_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Date_formula_n_literalContext)
], SOQLParser.prototype, "date_formula_n_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Datetime_literalContext)
], SOQLParser.prototype, "datetime_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Date_literalContext)
], SOQLParser.prototype, "date_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Integer_literalContext)
], SOQLParser.prototype, "integer_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Real_literalContext)
], SOQLParser.prototype, "real_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String_literalContext)
], SOQLParser.prototype, "string_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Boolean_literalContext)
], SOQLParser.prototype, "boolean_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Null_literalContext)
], SOQLParser.prototype, "null_literal", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_nameContext)
], SOQLParser.prototype, "function_name", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_dateContext)
], SOQLParser.prototype, "function_date", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_aggregateContext)
], SOQLParser.prototype, "function_aggregate", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_locationContext)
], SOQLParser.prototype, "function_location", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_otherContext)
], SOQLParser.prototype, "function_other", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Soql_queryContext)
], SOQLParser.prototype, "soql_query", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Select_clauseContext)
], SOQLParser.prototype, "select_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", From_clauseContext)
], SOQLParser.prototype, "from_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Using_clauseContext)
], SOQLParser.prototype, "using_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Where_clauseContext)
], SOQLParser.prototype, "where_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Groupby_clauseContext)
], SOQLParser.prototype, "groupby_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Having_clauseContext)
], SOQLParser.prototype, "having_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Orderby_clauseContext)
], SOQLParser.prototype, "orderby_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Limit_clauseContext)
], SOQLParser.prototype, "limit_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Offset_clauseContext)
], SOQLParser.prototype, "offset_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", For_clauseContext)
], SOQLParser.prototype, "for_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Update_clauseContext)
], SOQLParser.prototype, "update_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Soql_subqueryContext)
], SOQLParser.prototype, "soql_subquery", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Subquery_select_clauseContext)
], SOQLParser.prototype, "subquery_select_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Select_specContext)
], SOQLParser.prototype, "select_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Subquery_select_specContext)
], SOQLParser.prototype, "subquery_select_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Field_specContext)
], SOQLParser.prototype, "field_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_call_specContext)
], SOQLParser.prototype, "function_call_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", FieldContext)
], SOQLParser.prototype, "field", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_callContext)
], SOQLParser.prototype, "function_call", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_parameter_listContext)
], SOQLParser.prototype, "function_parameter_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Function_parameterContext)
], SOQLParser.prototype, "function_parameter", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Typeof_specContext)
], SOQLParser.prototype, "typeof_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Typeof_when_then_clause_listContext)
], SOQLParser.prototype, "typeof_when_then_clause_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Typeof_when_then_clauseContext)
], SOQLParser.prototype, "typeof_when_then_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Typeof_then_clauseContext)
], SOQLParser.prototype, "typeof_then_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Typeof_else_clauseContext)
], SOQLParser.prototype, "typeof_else_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Field_listContext)
], SOQLParser.prototype, "field_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object_specContext)
], SOQLParser.prototype, "object_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object_prefixContext)
], SOQLParser.prototype, "object_prefix", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Comparison_operatorContext)
], SOQLParser.prototype, "comparison_operator", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Set_operatorContext)
], SOQLParser.prototype, "set_operator", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", ConditionContext)
], SOQLParser.prototype, "condition", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Condition1Context)
], SOQLParser.prototype, "condition1", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", ParenthesisContext)
], SOQLParser.prototype, "parenthesis", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Simple_conditionContext)
], SOQLParser.prototype, "simple_condition", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Field_based_conditionContext)
], SOQLParser.prototype, "field_based_condition", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Set_based_conditionContext)
], SOQLParser.prototype, "set_based_condition", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Like_based_conditionContext)
], SOQLParser.prototype, "like_based_condition", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Condition_fieldContext)
], SOQLParser.prototype, "condition_field", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Set_valuesContext)
], SOQLParser.prototype, "set_values", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Set_value_listContext)
], SOQLParser.prototype, "set_value_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", With_clauseContext)
], SOQLParser.prototype, "with_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", With_plain_clauseContext)
], SOQLParser.prototype, "with_plain_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", With_data_category_clauseContext)
], SOQLParser.prototype, "with_data_category_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_spec_listContext)
], SOQLParser.prototype, "data_category_spec_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_specContext)
], SOQLParser.prototype, "data_category_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_parameter_listContext)
], SOQLParser.prototype, "data_category_parameter_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Data_category_selectorContext)
], SOQLParser.prototype, "data_category_selector", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", With_security_enforced_clauseContext)
], SOQLParser.prototype, "with_security_enforced_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Group_by_plain_clauseContext)
], SOQLParser.prototype, "group_by_plain_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Group_by_rollup_clauseContext)
], SOQLParser.prototype, "group_by_rollup_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Group_by_cube_clauseContext)
], SOQLParser.prototype, "group_by_cube_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Group_by_listContext)
], SOQLParser.prototype, "group_by_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Group_by_specContext)
], SOQLParser.prototype, "group_by_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Order_by_listContext)
], SOQLParser.prototype, "order_by_list", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Order_by_specContext)
], SOQLParser.prototype, "order_by_spec", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Order_by_direction_clauseContext)
], SOQLParser.prototype, "order_by_direction_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Order_by_nulls_clauseContext)
], SOQLParser.prototype, "order_by_nulls_clause", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Order_by_fieldContext)
], SOQLParser.prototype, "order_by_field", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", For_valueContext)
], SOQLParser.prototype, "for_value", null);
__decorate([
    RuleVersion.RuleVersion(0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Update_valueContext)
], SOQLParser.prototype, "update_value", null);

/**
 * Soql query
 * This is the base query that will be built as the query is parsed
 */
class SoqlQuery {
    constructor() {
        this.fields = [];
    }
}
/**
 * Listener
 * All the listener methods called here are overrides from SOQLListener - generated from ANTLR
 * As each listener function is called, the context is used to build the parsed data structure.
 *
 */
class Listener {
    constructor(config = {}) {
        this.config = config;
        this.context = {
            isSubQuery: false,
            isWhereSubQuery: false,
            whereSubquery: null,
            currentItem: null,
            inWhereClauseGroup: false,
            tempData: null,
            tempDataBackup: null,
            currentSubquery: null,
        };
        config.logging = isBoolean(config.logging) ? config.logging : false;
        this.soqlQuery = new SoqlQuery();
    }
    /**
     * LISTENER METHODS
     */
    visitTerminal(ctx) {
        if (this.config.logging) {
            console.log('visitTerminal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            if (['NOT'].includes(ctx.text.toUpperCase())) {
                this.context.tempData.nextHasLogicalPrefix = ctx.text;
            }
            else if (['AND', 'OR'].includes(ctx.text.toUpperCase())) {
                this.context.tempData.currConditionOperation.operator = ctx.text.toUpperCase();
                // Because there is an operator, we know the right side will have at least one more condition
                // reset current condition
                this.context.tempData.currConditionOperation.right = {
                    left: null,
                };
                this.context.tempData.currConditionOperation = this.context.tempData.currConditionOperation.right;
                this.context.tempData.stack.push(this.context.tempData.currConditionOperation);
            }
        }
        else if (this.context.currentItem === 'having') {
            if (['NOT'].includes(ctx.text.toUpperCase())) {
                this.context.tempData.nextHasLogicalPrefix = ctx.text;
            }
            else if (['AND', 'OR'].includes(ctx.text.toUpperCase())) {
                this.context.tempData.currConditionOperation.operator = ctx.text.toUpperCase();
                // Because there is an operator, we know the right side will have at least one more condition
                // reset current condition
                this.context.tempData.currConditionOperation.right = {
                    left: null,
                };
                this.context.tempData.currConditionOperation = this.context.tempData.currConditionOperation.right;
                this.context.tempData.stack.push(this.context.tempData.currConditionOperation);
            }
        }
    }
    getSoqlQuery() {
        if (this.context.isSubQuery && this.context.currentSubquery) {
            return this.context.currentSubquery;
        }
        if (this.context.isWhereSubQuery) {
            return this.context.whereSubquery;
        }
        return this.soqlQuery;
    }
    enterKeywords_alias_allowed(ctx) {
        if (this.config.logging) {
            console.log('enterKeywords_alias_allowed:', ctx.text);
        }
    }
    exitKeywords_alias_allowed(ctx) {
        if (this.config.logging) {
            console.log('exitKeywords_alias_allowed:', ctx.text);
        }
    }
    enterKeywords_name_allowed(ctx) {
        if (this.config.logging) {
            console.log('enterKeywords_name_allowed:', ctx.text);
        }
    }
    exitKeywords_name_allowed(ctx) {
        if (this.config.logging) {
            console.log('exitKeywords_name_allowed:', ctx.text);
        }
    }
    enterName(ctx) {
        if (this.config.logging) {
            console.log('enterName:', ctx.text);
        }
    }
    exitName(ctx) {
        if (this.config.logging) {
            console.log('exitName:', ctx.text);
        }
    }
    enterObject_name(ctx) {
        if (this.config.logging) {
            console.log('enterObject_name:', ctx.text);
        }
    }
    exitObject_name(ctx) {
        if (this.config.logging) {
            console.log('exitObject_name:', ctx.text);
        }
    }
    enterField_name(ctx) {
        if (this.config.logging) {
            console.log('enterField_name:', ctx.text);
        }
        if (this.context.currentItem === 'having' && !this.context.tempData.currConditionOperation.left.fn) {
            this.context.tempData.currConditionOperation.left.field = ctx.text;
        }
    }
    exitField_name(ctx) {
        if (this.config.logging) {
            console.log('exitField_name:', ctx.text);
        }
    }
    enterFilter_scope_name(ctx) {
        if (this.config.logging) {
            console.log('enterFilter_scope_name:', ctx.text);
        }
    }
    exitFilter_scope_name(ctx) {
        if (this.config.logging) {
            console.log('exitFilter_scope_name:', ctx.text);
        }
    }
    enterData_category_group_name(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_group_name:', ctx.text);
        }
        this.context.tempData.conditions.push({
            groupName: ctx.text,
        });
    }
    exitData_category_group_name(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_group_name:', ctx.text);
        }
    }
    enterData_category_name(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_name:', ctx.text);
        }
        const condition = getLastItem(this.context.tempData.conditions);
        condition.parameters.push(ctx.text);
    }
    exitData_category_name(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_name:', ctx.text);
        }
    }
    enterAlias_name(ctx) {
        if (this.config.logging) {
            console.log('enterAlias_name:', ctx.text);
        }
        const query = this.getSoqlQuery();
        if (this.context.currentItem === 'from') {
            query.sObjectAlias = ctx.text;
            /** For objects that are aliased, the relationship fields need to have the alias removed and possibly even a type change */
            query.fields
                .filter(field => field.type === 'FieldRelationship')
                .forEach((field, i) => {
                field.relationships = field.relationships.filter(rel => rel !== ctx.text);
                if (field.relationships.length === 0) {
                    // field is not a relationship, it just had an object alias specified
                    query.fields[i] = {
                        type: 'Field',
                        field: field.field,
                        objectPrefix: ctx.text,
                    };
                }
                else {
                    query.fields[i].objectPrefix = ctx.text;
                }
            });
        }
        if (this.context.currentItem === 'field') {
            if (this.context.currentFieldFn) {
                this.context.currentFieldFn.alias = ctx.text;
            }
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.fn.alias = ctx.text;
        }
        if (this.context.currentItem === 'having') {
            this.context.tempData.currConditionOperation.left.fn.alias = ctx.text;
        }
        if (this.context.currentItem === 'orderby') {
            this.context.tempData.fn.alias = ctx.text;
        }
    }
    exitAlias_name(ctx) {
        if (this.config.logging) {
            console.log('exitAlias_name:', ctx.text);
        }
    }
    enterAlias(ctx) {
        if (this.config.logging) {
            console.log('enterAlias:', ctx.text);
        }
    }
    exitAlias(ctx) {
        if (this.config.logging) {
            console.log('exitAlias:', ctx.text);
        }
    }
    enterLiteral(ctx) {
        if (this.config.logging) {
            console.log('enterLiteral:', ctx.text);
        }
    }
    exitLiteral(ctx) {
        if (this.config.logging) {
            console.log('exitLiteral:', ctx.text);
        }
    }
    enterDate_formula_literal(ctx) {
        if (this.config.logging) {
            console.log('enterDate_formula_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'DATE_LITERAL';
        }
    }
    exitDate_formula_literal(ctx) {
        if (this.config.logging) {
            console.log('exitDate_formula_literal:', ctx.text);
        }
    }
    enterDate_formula_n_literal_name(ctx) {
        if (this.config.logging) {
            console.log('enterDate_formula_n_literal_name:', ctx.text);
        }
    }
    exitDate_formula_n_literal_name(ctx) {
        if (this.config.logging) {
            console.log('exitDate_formula_n_literal_name:', ctx.text);
        }
    }
    enterDate_formula_n_literal(ctx) {
        if (this.config.logging) {
            console.log('enterDate_formula_n_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'DATE_N_LITERAL';
            this.context.tempData.currConditionOperation.left.dateLiteralVariable = Number(ctx.getChild(2).text);
        }
    }
    exitDate_formula_n_literal(ctx) {
        if (this.config.logging) {
            console.log('exitDate_formula_n_literal:', ctx.text);
        }
    }
    enterDatetime_literal(ctx) {
        if (this.config.logging) {
            console.log('enterDatetime_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'DATETIME';
        }
    }
    exitDatetime_literal(ctx) {
        if (this.config.logging) {
            console.log('exitDatetime_literal:', ctx.text);
        }
    }
    enterDate_literal(ctx) {
        if (this.config.logging) {
            console.log('enterDate_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'DATE';
        }
    }
    exitDate_literal(ctx) {
        if (this.config.logging) {
            console.log('exitDate_literal:', ctx.text);
        }
    }
    enterInteger_literal(ctx) {
        if (this.config.logging) {
            console.log('enterInteger_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'INTEGER';
        }
    }
    exitInteger_literal(ctx) {
        if (this.config.logging) {
            console.log('exitInteger_literal:', ctx.text);
        }
    }
    enterReal_literal(ctx) {
        if (this.config.logging) {
            console.log('enterReal_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'DECIMAL';
        }
    }
    exitReal_literal(ctx) {
        if (this.config.logging) {
            console.log('exitReal_literal:', ctx.text);
        }
    }
    enterString_literal(ctx) {
        if (this.config.logging) {
            console.log('enterString_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'STRING';
        }
    }
    exitString_literal(ctx) {
        if (this.config.logging) {
            console.log('exitString_literal:', ctx.text);
        }
    }
    enterBoolean_literal(ctx) {
        if (this.config.logging) {
            console.log('enterBoolean_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'BOOLEAN';
        }
    }
    exitBoolean_literal(ctx) {
        if (this.config.logging) {
            console.log('exitBoolean_literal:', ctx.text);
        }
    }
    enterNull_literal(ctx) {
        if (this.config.logging) {
            console.log('enterNull_literal:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.tempData.currConditionOperation.left.literalType = 'NULL';
        }
    }
    exitNull_literal(ctx) {
        if (this.config.logging) {
            console.log('exitNull_literal:', ctx.text);
        }
    }
    enterFunction_name(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_name:', ctx.text);
        }
        if (this.context.currentItem === 'field' && this.context.currentFieldFn) {
            if (!this.context.currentFieldFn.fn) {
                this.context.currentFieldFn.fn = ctx.text;
            }
        }
        if (this.context.currentItem === 'where' || this.context.currentItem === 'having') {
            this.context.tempData.currConditionOperation.left.fn.name = ctx.text;
            if (this.context.tempData.currConditionOperation.left.field) {
                delete this.context.tempData.currConditionOperation.left.field;
            }
        }
        if (this.context.currentItem === 'orderby') {
            this.context.tempData.fn.name = ctx.text;
        }
    }
    exitFunction_name(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_name:', ctx.text);
        }
    }
    enterFunction_date(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_date:', ctx.text);
        }
    }
    exitFunction_date(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_date:', ctx.text);
        }
    }
    enterFunction_aggregate(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_aggregate:', ctx.text);
        }
        if (this.context.currentItem === 'field') {
            if (this.context.currentFieldFn) {
                this.context.currentFieldFn.isAggregateFn = true;
            }
            else {
                this.context.tempData.isAggregateFn = true;
            }
        }
    }
    exitFunction_aggregate(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_aggregate:', ctx.text);
        }
    }
    enterFunction_location(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_location:', ctx.text);
        }
    }
    exitFunction_location(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_location:', ctx.text);
        }
    }
    enterFunction_other(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_other:', ctx.text);
        }
    }
    exitFunction_other(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_other:', ctx.text);
        }
    }
    enterSoql_query(ctx) {
        if (this.config.logging) {
            console.log('enterSoql_query:', ctx.text);
        }
    }
    exitSoql_query(ctx) {
        if (this.config.logging) {
            console.log('exitSoql_query:', ctx.text);
        }
    }
    enterSelect_clause(ctx) {
        if (this.config.logging) {
            console.log('enterSelect_clause:', ctx.text);
        }
    }
    exitSelect_clause(ctx) {
        if (this.config.logging) {
            console.log('exitSelect_clause:', ctx.text);
        }
    }
    enterFrom_clause(ctx) {
        if (this.config.logging) {
            console.log('enterFrom_clause:', ctx.text);
        }
        this.context.currentItem = 'from';
    }
    exitFrom_clause(ctx) {
        if (this.config.logging) {
            console.log('exitFrom_clause:', ctx.text);
        }
    }
    enterUsing_clause(ctx) {
        if (this.config.logging) {
            console.log('enterUsing_clause:', ctx.text);
        }
    }
    exitUsing_clause(ctx) {
        if (this.config.logging) {
            console.log('exitUsing_clause:', ctx.text);
        }
    }
    enterWhere_clause(ctx) {
        if (this.config.logging) {
            console.log('enterWhere_clause:', ctx.text);
        }
        this.context.currentItem = 'where';
        const currConditionOperation = {
            left: null,
        };
        this.context.tempData = {
            stack: [currConditionOperation],
            currConditionOperation,
            data: currConditionOperation,
        };
    }
    exitWhere_clause(ctx) {
        if (this.config.logging) {
            console.log('exitWhere_clause:', ctx.text);
        }
        this.getSoqlQuery().where = this.context.tempData.data;
        this.context.tempData = null;
    }
    enterGroupby_clause(ctx) {
        if (this.config.logging) {
            console.log('enterGroupby_clause:', ctx.text);
        }
        this.context.currentItem = 'groupby';
        this.context.tempData = { field: null };
    }
    exitGroupby_clause(ctx) {
        if (this.config.logging) {
            console.log('exitGroupby_clause:', ctx.text);
        }
        this.getSoqlQuery().groupBy = this.context.tempData;
    }
    enterHaving_clause(ctx) {
        if (this.config.logging) {
            console.log('enterHaving_clause:', ctx.text);
        }
        this.context.currentItem = 'having';
        const currConditionOperation = {
            left: null,
        };
        this.context.tempData = {
            stack: [currConditionOperation],
            currConditionOperation,
            data: currConditionOperation,
        };
    }
    exitHaving_clause(ctx) {
        if (this.config.logging) {
            console.log('exitHaving_clause:', ctx.text);
        }
        this.getSoqlQuery().having = this.context.tempData.data;
    }
    enterOrderby_clause(ctx) {
        if (this.config.logging) {
            console.log('enterOrderby_clause:', ctx.text);
        }
        this.context.currentItem = 'orderby';
        this.context.tempData = {};
    }
    exitOrderby_clause(ctx) {
        if (this.config.logging) {
            console.log('exitOrderby_clause:', ctx.text);
        }
    }
    enterLimit_clause(ctx) {
        if (this.config.logging) {
            console.log('enterLimit_clause:', ctx.text);
        }
        this.getSoqlQuery().limit = Number(ctx.getChild(1).text);
    }
    exitLimit_clause(ctx) {
        if (this.config.logging) {
            console.log('exitLimit_clause:', ctx.text);
        }
    }
    enterOffset_clause(ctx) {
        if (this.config.logging) {
            console.log('enterOffset_clause:', ctx.text);
        }
        this.getSoqlQuery().offset = Number(ctx.getChild(1).text);
    }
    exitOffset_clause(ctx) {
        if (this.config.logging) {
            console.log('exitOffset_clause:', ctx.text);
        }
    }
    enterFor_clause(ctx) {
        if (this.config.logging) {
            console.log('enterFor_clause:', ctx.text);
        }
    }
    exitFor_clause(ctx) {
        if (this.config.logging) {
            console.log('exitFor_clause:', ctx.text);
        }
    }
    enterUpdate_clause(ctx) {
        if (this.config.logging) {
            console.log('enterUpdate_clause:', ctx.text);
        }
    }
    exitUpdate_clause(ctx) {
        if (this.config.logging) {
            console.log('exitUpdate_clause:', ctx.text);
        }
    }
    enterSoql_subquery(ctx) {
        if (this.config.logging) {
            console.log('enterSoql_subquery:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            this.context.isWhereSubQuery = true;
            this.context.whereSubquery = new SoqlQuery();
            delete this.context.tempData.currConditionOperation.left.value;
            this.context.tempDataBackup = this.context.tempData;
            this.context.tempData = null;
        }
        else {
            this.context.isSubQuery = true;
            this.context.currentSubquery = new SoqlQuery();
        }
    }
    exitSoql_subquery(ctx) {
        if (this.config.logging) {
            console.log('exitSoql_subquery:', ctx.text);
        }
        if (this.context.isWhereSubQuery) {
            this.context.isWhereSubQuery = false;
            this.context.tempData = this.context.tempDataBackup;
            this.context.tempData.currConditionOperation.left.valueQuery = this.context.whereSubquery;
        }
        else {
            this.context.isSubQuery = false;
            this.context.currentSubquery = null;
        }
    }
    enterSubquery_select_clause(ctx) {
        if (this.config.logging) {
            console.log('enterSubquery_select_clause:', ctx.text);
        }
    }
    exitSubquery_select_clause(ctx) {
        if (this.config.logging) {
            console.log('exitSubquery_select_clause:', ctx.text);
        }
    }
    enterSelect_spec(ctx) {
        if (this.config.logging) {
            console.log('enterSelect_spec:', ctx.text);
        }
        this.context.currentItem = 'field';
    }
    exitSelect_spec(ctx) {
        if (this.config.logging) {
            console.log('exitSelect_spec:', ctx.text);
        }
    }
    enterSubquery_select_spec(ctx) {
        if (this.config.logging) {
            console.log('enterSubquery_select_spec:', ctx.text);
        }
        this.context.currentItem = 'field';
    }
    exitSubquery_select_spec(ctx) {
        if (this.config.logging) {
            console.log('exitSubquery_select_spec:', ctx.text);
        }
    }
    enterField_spec(ctx) {
        if (this.config.logging) {
            console.log('enterField_spec:', ctx.text);
        }
        this.context.currentItem = 'field';
        const query = this.getSoqlQuery();
        if (ctx.text.includes('.')) {
            const fields = ctx.text.split('.');
            query.fields.push({
                type: 'FieldRelationship',
                field: fields.slice(-1)[0],
                relationships: fields.slice(0, -1),
                rawValue: ctx.text,
            });
        }
        else if (ctx.childCount > 1) {
            query.fields.push({
                type: 'Field',
                field: ctx.getChild(0).text,
            });
        }
        else {
            query.fields.push({
                type: 'Field',
                field: ctx.text,
            });
        }
    }
    enterFunction_call_spec(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_call_spec:', ctx.text);
        }
        if (this.context.currentItem === 'field') {
            // If nested function, init nested fn operator
            this.context.tempData = {
                type: 'FieldFunctionExpression',
            };
            this.context.currentFieldFn = this.context.tempData;
            if (!this.context.rootFieldFn) {
                this.context.rootFieldFn = this.context.tempData;
            }
            if (this.context.previousFieldFn) {
                this.context.previousFieldFn.parameters = [this.context.tempData];
            }
        }
        if (this.context.currentItem === 'having') {
            this.context.tempData.currConditionOperation.left.fn = {};
        }
    }
    exitFunction_call_spec(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_call_spec:', ctx.text);
        }
        if (this.context.currentItem === 'field') {
            if (this.context.rootFieldFn) {
                this.getSoqlQuery().fields.push(this.context.rootFieldFn);
            }
            else {
                this.getSoqlQuery().fields.push(this.context.tempData);
            }
            this.context.tempData = null;
            this.context.rootFieldFn = null;
            this.context.currentFieldFn = null;
            this.context.previousFieldFn = null;
        }
    }
    enterField(ctx) {
        if (this.config.logging) {
            console.log('enterField:', ctx.text);
        }
    }
    exitField(ctx) {
        if (this.config.logging) {
            console.log('exitField:', ctx.text);
        }
    }
    enterFunction_call(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_call:', ctx.text);
        }
        // COUNT(ID) or Count()
        if (this.context.currentItem === 'field') {
            this.context.currentFieldFn.rawValue = ctx.text;
        }
        if (this.context.currentItem === 'where' || this.context.currentItem === 'having') {
            this.context.tempData.currConditionOperation.left.fn = {
                text: ctx.text,
            };
        }
        if (this.context.currentItem === 'orderby') {
            this.context.tempData.fn.text = ctx.text;
        }
    }
    exitFunction_call(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_call:', ctx.text);
        }
        if (this.context.currentItem === 'field') {
            if (this.context.previousFieldFn &&
                this.context.currentFieldFn &&
                this.context.previousFieldFn !== this.context.currentFieldFn) {
                this.context.currentFieldFn = this.context.previousFieldFn;
            }
        }
    }
    enterFunction_parameter_list(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_parameter_list:', ctx.text);
        }
    }
    exitFunction_parameter_list(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_parameter_list:', ctx.text);
        }
    }
    enterFunction_parameter(ctx) {
        if (this.config.logging) {
            console.log('enterFunction_parameter:', ctx.text);
        }
        // Get correct fn object based on what is set in tempData (set differently for field vs having)
        if (this.context.currentItem === 'field') {
            if (ctx.getChild(0) instanceof Function_callContext) {
                this.context.previousFieldFn = this.context.currentFieldFn;
                this.context.currentFieldFn = {
                    type: 'FieldFunctionExpression',
                    fn: null,
                };
                this.context.previousFieldFn.parameters = this.context.previousFieldFn.parameters || [];
                this.context.previousFieldFn.parameters.push(this.context.currentFieldFn);
            }
            else {
                this.context.currentFieldFn.parameters = this.context.currentFieldFn.parameters || [];
                this.context.currentFieldFn.parameters.push(ctx.text);
            }
        }
        else if (this.context.currentItem === 'where' ||
            this.context.currentItem === 'having' ||
            this.context.currentItem === 'orderby') {
            let tempdataFnObj;
            if (this.context.tempData.currConditionOperation && this.context.tempData.currConditionOperation.left) {
                tempdataFnObj = this.context.tempData.currConditionOperation.left.fn;
            }
            else {
                tempdataFnObj = isObject(this.context.tempData.fn) ? this.context.tempData.fn : this.context.tempData;
            }
            if (isString(tempdataFnObj.parameter)) {
                tempdataFnObj.parameter = [tempdataFnObj.parameter, ctx.text];
            }
            else if (Array.isArray(tempdataFnObj.parameter)) {
                tempdataFnObj.parameter.push(ctx.text);
            }
            else {
                tempdataFnObj.parameter = ctx.text;
            }
        }
    }
    exitFunction_parameter(ctx) {
        if (this.config.logging) {
            console.log('exitFunction_parameter:', ctx.text);
        }
    }
    enterTypeof_spec(ctx) {
        if (this.config.logging) {
            console.log('enterTypeof_spec:', ctx.text);
        }
        this.context.currentItem = 'typeof';
        this.context.tempData = {
            type: 'FieldTypeof',
            field: ctx.getChild(1).text,
            conditions: [],
        };
    }
    exitTypeof_spec(ctx) {
        if (this.config.logging) {
            console.log('exitTypeof_spec:', ctx.text);
        }
        this.getSoqlQuery().fields.push(this.context.tempData);
        this.context.tempData = null;
        this.context.currentItem = 'field';
    }
    enterTypeof_when_then_clause_list(ctx) {
        if (this.config.logging) {
            console.log('enterTypeof_when_then_clause_list:', ctx.text);
        }
    }
    exitTypeof_when_then_clause_list(ctx) {
        if (this.config.logging) {
            console.log('exitTypeof_when_then_clause_list:', ctx.text);
        }
    }
    enterTypeof_when_then_clause(ctx) {
        if (this.config.logging) {
            console.log('enterTypeof_when_then_clause:', ctx.text);
        }
        this.context.tempData.conditions.push({
            type: 'WHEN',
            objectType: ctx.getChild(1).text,
        });
    }
    exitTypeof_when_then_clause(ctx) {
        if (this.config.logging) {
            console.log('exitTypeof_when_then_clause:', ctx.text);
        }
    }
    enterTypeof_then_clause(ctx) {
        if (this.config.logging) {
            console.log('enterTypeof_then_clause:', ctx.text);
        }
        const whenThenClause = getLastItem(this.context.tempData.conditions);
        whenThenClause.fieldList = ctx.getChild(1).text.split(',');
    }
    exitTypeof_then_clause(ctx) {
        if (this.config.logging) {
            console.log('exitTypeof_then_clause:', ctx.text);
        }
    }
    enterTypeof_else_clause(ctx) {
        if (this.config.logging) {
            console.log('enterTypeof_else_clause:', ctx.text);
        }
        this.context.tempData.conditions.push({
            type: 'ELSE',
            fieldList: ctx.getChild(1).text.split(','),
        });
    }
    exitTypeof_else_clause(ctx) {
        if (this.config.logging) {
            console.log('exitTypeof_else_clause:', ctx.text);
        }
    }
    enterField_list(ctx) {
        if (this.config.logging) {
            console.log('enterField_list:', ctx.text);
        }
    }
    exitField_list(ctx) {
        if (this.config.logging) {
            console.log('exitField_list:', ctx.text);
        }
    }
    enterObject_spec(ctx) {
        if (this.config.logging) {
            console.log('enterObject_spec:', ctx.text);
        }
        let objName = ctx.getChild(0).text;
        if (!this.context.isSubQuery) {
            const query = this.getSoqlQuery();
            query.sObject = objName;
        }
        else {
            const query = this.getSoqlQuery();
            query.relationshipName = objName;
            if (objName.includes('.')) {
                query.relationshipName = ctx.getChild(1).text;
                objName = ctx.getChild(1).text;
                let prefixList = [];
                for (let i = 0; i < ctx.getChild(0).childCount; i++) {
                    if (ctx.getChild(0).getChild(i) instanceof Object_nameContext) {
                        prefixList.push(ctx.getChild(0).getChild(i).text);
                    }
                }
                query.sObjectPrefix = prefixList;
            }
            this.soqlQuery.fields.push({
                type: 'FieldSubquery',
                from: objName,
                subquery: query,
            });
        }
    }
    exitObject_spec(ctx) {
        if (this.config.logging) {
            console.log('exitObject_spec:', ctx.text);
        }
    }
    enterObject_prefix(ctx) {
        if (this.config.logging) {
            console.log('enterObject_prefix:', ctx.text);
        }
    }
    exitObject_prefix(ctx) {
        if (this.config.logging) {
            console.log('exitObject_prefix:', ctx.text);
        }
    }
    enterComparison_operator(ctx) {
        if (this.config.logging) {
            console.log('enterComparison_operator:', ctx.text);
        }
    }
    exitComparison_operator(ctx) {
        if (this.config.logging) {
            console.log('exitComparison_operator:', ctx.text);
        }
    }
    enterSet_operator(ctx) {
        if (this.config.logging) {
            console.log('enterSet_operator:', ctx.text);
        }
    }
    exitSet_operator(ctx) {
        if (this.config.logging) {
            console.log('exitSet_operator:', ctx.text);
        }
    }
    enterCondition(ctx) {
        if (this.config.logging) {
            console.log('enterCondition:', ctx.text);
        }
    }
    exitCondition(ctx) {
        if (this.config.logging) {
            console.log('exitCondition:', ctx.text);
        }
    }
    enterCondition1(ctx) {
        if (this.config.logging) {
            console.log('enterCondition1:', ctx.text);
        }
    }
    exitCondition1(ctx) {
        if (this.config.logging) {
            console.log('exitCondition1:', ctx.text);
        }
    }
    enterParenthesis(ctx) {
        if (this.config.logging) {
            console.log('enterParenthesis:', ctx.text);
        }
        if (this.context.currentItem === 'where' || this.context.currentItem === 'having') {
            this.context.tempData.nextOpenParenCount = this.context.tempData.nextOpenParenCount || 0;
            this.context.tempData.nextOpenParenCount += 1;
        }
    }
    exitParenthesis(ctx) {
        if (this.config.logging) {
            console.log('exitParenthesis:', ctx.text);
        }
        if (this.context.currentItem === 'where' || this.context.currentItem === 'having') {
            const currConditionOperation = this.context.tempData.currConditionOperation.left;
            currConditionOperation.closeParen = currConditionOperation.closeParen || 0;
            currConditionOperation.closeParen += 1;
        }
    }
    enterSimple_condition(ctx) {
        if (this.config.logging) {
            console.log('enterSimple_condition:', ctx.text);
        }
    }
    exitSimple_condition(ctx) {
        if (this.config.logging) {
            console.log('exitSimple_condition:', ctx.text);
        }
    }
    enterField_based_condition(ctx) {
        if (this.config.logging) {
            console.log('enterField_based_condition:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            const currItem = {};
            if (!this.context.tempData.currConditionOperation.left) {
                this.context.tempData.currConditionOperation.left = currItem;
                if (this.context.tempData.nextOpenParenCount) {
                    currItem.openParen = currItem.openParen || 0;
                    currItem.openParen += this.context.tempData.nextOpenParenCount;
                    this.context.tempData.nextOpenParenCount = 0;
                }
                if (this.context.tempData.nextHasLogicalPrefix) {
                    currItem.logicalPrefix = this.context.tempData.nextHasLogicalPrefix;
                    this.context.tempData.nextHasLogicalPrefix = null;
                }
            }
            else {
                this.context.tempData.currConditionOperation.right = currItem;
            }
            currItem.field = ctx.getChild(0).text;
            currItem.operator = ctx.getChild(1).text;
            currItem.value = ctx.getChild(2).text;
            currItem.literalType = 'STRING'; // may be updated if type is different
        }
        else if (this.context.currentItem === 'having') {
            const currItem = {};
            if (!this.context.tempData.currConditionOperation.left) {
                this.context.tempData.currConditionOperation.left = currItem;
                if (this.context.tempData.nextOpenParenCount) {
                    currItem.openParen = currItem.openParen || 0;
                    currItem.openParen += this.context.tempData.nextOpenParenCount;
                    this.context.tempData.nextOpenParenCount = 0;
                }
                if (this.context.tempData.nextHasLogicalPrefix) {
                    currItem.logicalPrefix = this.context.tempData.nextHasLogicalPrefix;
                    this.context.tempData.nextHasLogicalPrefix = null;
                }
            }
            else {
                this.context.tempData.currConditionOperation.right = currItem;
            }
            currItem.operator = ctx.getChild(1).text;
            currItem.value = ctx.getChild(2).text;
        }
    }
    exitField_based_condition(ctx) {
        if (this.config.logging) {
            console.log('exitField_based_condition:', ctx.text);
        }
    }
    enterSet_based_condition(ctx) {
        if (this.config.logging) {
            console.log('enterSet_based_condition:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            const currItem = {};
            if (!this.context.tempData.currConditionOperation.left) {
                this.context.tempData.currConditionOperation.left = currItem;
                if (this.context.tempData.nextOpenParenCount) {
                    currItem.openParen = currItem.openParen || 0;
                    currItem.openParen += this.context.tempData.nextOpenParenCount;
                    this.context.tempData.nextOpenParenCount = 0;
                }
                if (this.context.tempData.nextHasLogicalPrefix) {
                    currItem.logicalPrefix = this.context.tempData.nextHasLogicalPrefix;
                    this.context.tempData.nextHasLogicalPrefix = null;
                }
            }
            else {
                this.context.tempData.currConditionOperation.right = currItem;
            }
            currItem.field = ctx.getChild(0).text;
            currItem.operator = ctx.getChild(1).children.map(child => child.text).join(' ');
            currItem.value = ctx.getChild(2).getChild(1).children
                .filter(child => !(child instanceof tree.TerminalNode))
                .map(child => child.text);
        }
    }
    exitSet_based_condition(ctx) {
        if (this.config.logging) {
            console.log('exitSet_based_condition:', ctx.text);
        }
    }
    enterLike_based_condition(ctx) {
        if (this.config.logging) {
            console.log('enterLike_based_condition:', ctx.text);
        }
        if (this.context.currentItem === 'where') {
            // Set current condition in temp data
            const currItem = {};
            if (!this.context.tempData.currConditionOperation.left) {
                this.context.tempData.currConditionOperation.left = currItem;
                if (this.context.tempData.nextOpenParenCount) {
                    currItem.openParen = currItem.openParen || 0;
                    currItem.openParen += this.context.tempData.nextOpenParenCount;
                    this.context.tempData.nextOpenParenCount = 0;
                }
                if (this.context.tempData.nextHasLogicalPrefix) {
                    currItem.logicalPrefix = this.context.tempData.nextHasLogicalPrefix;
                    this.context.tempData.nextHasLogicalPrefix = null;
                }
            }
            else {
                this.context.tempData.currConditionOperation.right = currItem;
            }
            currItem.field = ctx.getChild(0).text;
            currItem.operator = 'LIKE';
            currItem.value = ctx.getChild(ctx.children.length - 1).text;
            currItem.literalType = 'STRING';
        }
    }
    exitLike_based_condition(ctx) {
        if (this.config.logging) {
            console.log('exitLike_based_condition:', ctx.text);
        }
    }
    enterCondition_field(ctx) {
        if (this.config.logging) {
            console.log('enterCondition_field:', ctx.text);
        }
    }
    exitCondition_field(ctx) {
        if (this.config.logging) {
            console.log('exitCondition_field:', ctx.text);
        }
    }
    enterSet_values(ctx) {
        if (this.config.logging) {
            console.log('enterSet_values:', ctx.text);
        }
    }
    exitSet_values(ctx) {
        if (this.config.logging) {
            console.log('exitSet_values:', ctx.text);
        }
    }
    enterSet_value_list(ctx) {
        if (this.config.logging) {
            console.log('enterSet_value_list:', ctx.text);
        }
    }
    exitSet_value_list(ctx) {
        if (this.config.logging) {
            console.log('exitSet_value_list:', ctx.text);
        }
    }
    enterWith_clause(ctx) {
        if (this.config.logging) {
            console.log('enterWith_clause:', ctx.text);
        }
    }
    exitWith_clause(ctx) {
        if (this.config.logging) {
            console.log('exitWith_clause:', ctx.text);
        }
    }
    enterWith_plain_clause(ctx) {
        if (this.config.logging) {
            console.log('enterWith_plain_clause:', ctx.text);
        }
    }
    exitWith_plain_clause(ctx) {
        if (this.config.logging) {
            console.log('exitWith_plain_clause:', ctx.text);
        }
    }
    enterWith_data_category_clause(ctx) {
        if (this.config.logging) {
            console.log('enterWith_data_category_clause:', ctx.text);
        }
        this.context.currentItem = 'withDataCategory';
        this.context.tempData = {
            conditions: [],
        };
    }
    exitWith_data_category_clause(ctx) {
        if (this.config.logging) {
            console.log('exitWith_data_category_clause:', ctx.text);
        }
        this.getSoqlQuery().withDataCategory = this.context.tempData;
        this.context.tempData = null;
    }
    enterData_category_spec_list(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_spec_list:', ctx.text);
        }
    }
    enterWith_security_enforced_clause(ctx) {
        if (this.config.logging) {
            console.log('enterWith_security_enforced_clause:', ctx.text);
        }
        this.getSoqlQuery().withSecurityEnforced = true;
    }
    exitWith_security_enforced_clause(ctx) {
        if (this.config.logging) {
            console.log('exitWith_security_enforced_clause:', ctx.text);
        }
    }
    exitData_category_spec_list(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_spec_list:', ctx.text);
        }
    }
    enterData_category_spec(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_spec:', ctx.text);
        }
    }
    exitData_category_spec(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_spec:', ctx.text);
        }
    }
    enterData_category_parameter_list(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_parameter_list:', ctx.text);
        }
        const condition = getLastItem(this.context.tempData.conditions);
        condition.parameters = [];
    }
    exitData_category_parameter_list(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_parameter_list:', ctx.text);
        }
    }
    enterData_category_selector(ctx) {
        if (this.config.logging) {
            console.log('enterData_category_selector:', ctx.text);
        }
        const condition = getLastItem(this.context.tempData.conditions);
        condition.selector = ctx.text.toUpperCase();
    }
    exitData_category_selector(ctx) {
        if (this.config.logging) {
            console.log('exitData_category_selector:', ctx.text);
        }
    }
    enterGroup_by_plain_clause(ctx) {
        if (this.config.logging) {
            console.log('enterGroup_by_plain_clause:', ctx.text);
        }
    }
    exitGroup_by_plain_clause(ctx) {
        if (this.config.logging) {
            console.log('exitGroup_by_plain_clause:', ctx.text);
        }
    }
    enterGroup_by_rollup_clause(ctx) {
        if (this.config.logging) {
            console.log('enterGroup_by_rollup_clause:', ctx.text);
        }
        this.context.tempData.type = 'ROLLUP';
    }
    exitGroup_by_rollup_clause(ctx) {
        if (this.config.logging) {
            console.log('exitGroup_by_rollup_clause:', ctx.text);
        }
    }
    enterGroup_by_cube_clause(ctx) {
        if (this.config.logging) {
            console.log('enterGroup_by_cube_clause:', ctx.text);
        }
        this.context.tempData.type = 'CUBE';
    }
    exitGroup_by_cube_clause(ctx) {
        if (this.config.logging) {
            console.log('exitGroup_by_cube_clause:', ctx.text);
        }
    }
    enterGroup_by_list(ctx) {
        if (this.config.logging) {
            console.log('enterGroup_by_list:', ctx.text);
        }
    }
    exitGroup_by_list(ctx) {
        if (this.config.logging) {
            console.log('exitGroup_by_list:', ctx.text);
        }
    }
    enterGroup_by_spec(ctx) {
        if (this.config.logging) {
            console.log('enterGroup_by_spec:', ctx.text);
        }
        if (Array.isArray(this.context.tempData.field)) {
            this.context.tempData.field.push(ctx.text);
        }
        else if (isString(this.context.tempData.field)) {
            this.context.tempData.field = [this.context.tempData.field, ctx.text];
        }
        else {
            this.context.tempData.field = ctx.text;
        }
    }
    exitGroup_by_spec(ctx) {
        if (this.config.logging) {
            console.log('exitGroup_by_spec:', ctx.text);
        }
    }
    enterOrder_by_list(ctx) {
        if (this.config.logging) {
            console.log('enterOrder_by_list:', ctx.text);
        }
    }
    exitOrder_by_list(ctx) {
        if (this.config.logging) {
            console.log('exitOrder_by_list:', ctx.text);
        }
    }
    enterOrder_by_spec(ctx) {
        if (this.config.logging) {
            console.log('enterOrder_by_spec:', ctx.text);
        }
        this.context.tempData = {};
    }
    exitOrder_by_spec(ctx) {
        if (this.config.logging) {
            console.log('exitOrder_by_spec:', ctx.text);
        }
        const soqlQuery = this.getSoqlQuery();
        if (isNil(soqlQuery.orderBy)) {
            soqlQuery.orderBy = this.context.tempData;
        }
        else if (Array.isArray(soqlQuery.orderBy)) {
            soqlQuery.orderBy.push(this.context.tempData);
        }
        else {
            soqlQuery.orderBy = [soqlQuery.orderBy, this.context.tempData];
        }
    }
    enterOrder_by_direction_clause(ctx) {
        if (this.config.logging) {
            console.log('enterOrder_by_direction_clause:', ctx.text);
        }
        ctx.text;
        this.context.tempData.order = ctx.text.toUpperCase() === 'ASC' ? 'ASC' : 'DESC';
    }
    exitOrder_by_direction_clause(ctx) {
        if (this.config.logging) {
            console.log('exitOrder_by_direction_clause:', ctx.text);
        }
    }
    enterOrder_by_nulls_clause(ctx) {
        if (this.config.logging) {
            console.log('enterOrder_by_nulls_clause:', ctx.text);
        }
        this.context.tempData.nulls = ctx.getChild(1).text.toUpperCase() === 'FIRST' ? 'FIRST' : 'LAST';
    }
    exitOrder_by_nulls_clause(ctx) {
        if (this.config.logging) {
            console.log('exitOrder_by_nulls_clause:', ctx.text);
        }
    }
    enterOrder_by_field(ctx) {
        if (this.config.logging) {
            console.log('enterOrder_by_field:', ctx.text);
        }
        // If order by is not a function, set field
        if (ctx.getChild(0) instanceof Function_callContext) {
            this.context.tempData.fn = { text: ctx.text };
        }
        else {
            this.context.tempData.field = ctx.text;
        }
    }
    exitOrder_by_field(ctx) {
        if (this.config.logging) {
            console.log('exitOrder_by_field:', ctx.text);
        }
    }
    enterFor_value(ctx) {
        if (this.config.logging) {
            console.log('enterFor_value:', ctx.text);
        }
        this.getSoqlQuery().for = ctx.text.toUpperCase();
    }
    exitFor_value(ctx) {
        if (this.config.logging) {
            console.log('exitFor_value:', ctx.text);
        }
    }
    enterUpdate_value(ctx) {
        if (this.config.logging) {
            console.log('enterUpdate_value:', ctx.text);
        }
    }
    exitUpdate_value(ctx) {
        if (this.config.logging) {
            console.log('exitUpdate_value:', ctx.text);
        }
        this.getSoqlQuery().update = ctx.text;
    }
}

function configureBaseDefaults(config = {}) {
    config.logging = isBoolean(config.logging) ? config.logging : false;
}
function configureDefaults(config = {}) {
    config.continueIfErrors = isBoolean(config.continueIfErrors) ? config.continueIfErrors : false;
    config.logging = isBoolean(config.logging) ? config.logging : false;
}
/**
 * @description Returns the ANTLR SOQL parser
 * @param {soql} String SOQL query
 * @param {SoqlQueryConfig} SoqlQueryConfig optional configuration
 * @returns SOQLParser
 */
function getSoqlQueryContext(soql, config = {}) {
    let inputStream = new antlr4ts.ANTLRInputStream(soql);
    let lexer = new SOQLLexer(inputStream);
    // bug-56 - The lever must have error listeners added to ensure no logging directly to the console
    lexer.removeErrorListeners();
    lexer.addErrorListener(new SyntaxErrorListener());
    let tokenStream = new antlr4ts.CommonTokenStream(lexer);
    const parser = new SOQLParser(tokenStream);
    if (!config.continueIfErrors) {
        parser.removeErrorListeners();
        parser.addErrorListener(new SyntaxErrorListener());
    }
    return parser;
}
/**
 * @description For a given soql query, parse the query and return a parsed SoqlQuery object
 * @param {soql} String SOQL query
 * @param {SoqlQueryConfig} SoqlQueryConfig optional configuration
 * @returns SoqlQuery
 */
function parseQuery(soql, config = {}) {
    configureDefaults(config);
    if (config.logging) {
        console.time('parser');
        console.log('Parsing Query:', soql);
    }
    const soqlQueryContext = getSoqlQueryContext(soql, config).soql_query();
    const listener = new Listener(config);
    // Walk the AST tree and trigger listeners
    tree.ParseTreeWalker.DEFAULT.walk(listener, soqlQueryContext);
    if (config.logging) {
        console.timeEnd('parser');
    }
    return listener.soqlQuery;
}
/**
 * @description Parse query to determine if the query is valid.
 * @param {soql} String SOQL query
 * @param {logging} boolean optional Prints out logging information
 * @returns boolean
 */
function isQueryValid(soql, config = {}) {
    configureBaseDefaults(config);
    let isValid = true;
    if (config.logging) {
        console.time('isQueryValid');
        console.log('Parsing Query:', soql);
    }
    try {
        getSoqlQueryContext(soql).soql_query();
    }
    catch (ex) {
        isValid = false;
    }
    finally {
        if (config.logging) {
            console.log('isValidQuery', isValid);
            console.timeEnd('isQueryValid');
        }
    }
    return isValid;
}

/**
 * Formats query - This will compose and then parse a query with the provided format options
 * or the defaults if omitted
 * @param soql
 * @param [formatOptions]
 * @returns
 */
function formatQuery(soql, formatOptions) {
    return composeQuery(parseQuery(soql), { format: true, formatOptions });
}
/**
 * Composes a parsed query back to a SOQL query
 * The parsing methods are public in case there is a need to parse just a part of a query,
 * but the common case is to call the "start()" method
 * @param soql
 * @param [config]
 * @returns query
 */
function composeQuery(soql, config = {}) {
    config.format = config.format ? true : false;
    if (config.logging) {
        console.time('composer');
        console.log('Composing Query:', soql);
        console.log('Format output:', config.format);
    }
    const query = new Compose(soql, config).query;
    if (config.logging) {
        console.timeEnd('composer');
    }
    return query;
}
/**
 * Compose
 * This class handles all the logic for turning a Query into a SOQL query
 * This depends on the Format class for parts of the processing
 */
class Compose {
    constructor(soql, config = {}) {
        this.soql = soql;
        this.logging = false;
        this.format = false;
        config = Object.assign({ autoCompose: true }, config);
        const { logging } = config;
        this.logging = logging;
        this.format = config.format;
        this.query = '';
        this.formatter = new Formatter(this.format, Object.assign({ logging: this.logging }, config.formatOptions));
        if (config.autoCompose) {
            this.start();
        }
    }
    /**
     * Starts compose
     */
    start() {
        this.query = this.parseQuery(this.soql);
    }
    /**
     * If logging is enabled, print the query to the console
     * @param soql
     */
    log(soql) {
        if (this.logging) {
            console.log('Current SOQL:', soql);
        }
    }
    /**
     * Parses query
     * Base entry point for the query
     * this may be called multiple times recursively for subqueries and WHERE queries
     * @param query
     * @returns query
     */
    parseQuery(query) {
        const fieldData = {
            fields: this.parseFields(query.fields).map(field => ({
                text: field,
                isSubquery: field.startsWith('('),
                prefix: '',
                suffix: '',
            })),
            isSubquery: isSubquery(query),
            lineBreaks: [],
        };
        let output = `SELECT `;
        // Format fields based on configuration
        this.formatter.formatFields(fieldData);
        fieldData.fields.forEach(field => {
            output += `${field.prefix}${field.text}${field.suffix}`;
        });
        output += this.formatter.formatClause('FROM');
        if (isSubquery(query)) {
            const sObjectPrefix = query.sObjectPrefix || [];
            sObjectPrefix.push(query.relationshipName);
            output += ` ${sObjectPrefix.join('.')}${get(query.sObjectAlias, '', ' ')}`;
        }
        else {
            output += ` ${query.sObject}${get(query.sObjectAlias, '', ' ')}`;
        }
        this.log(output);
        if (query.where) {
            output += this.formatter.formatClause('WHERE');
            output += ` ${this.parseWhereClause(query.where)}`;
            this.log(output);
        }
        if (query.groupBy) {
            output += this.formatter.formatClause('GROUP BY');
            output += ` ${this.parseGroupByClause(query.groupBy)}`;
            this.log(output);
            if (query.having) {
                output += this.formatter.formatClause('HAVING');
                output += ` ${this.parseHavingClause(query.having)}`;
                this.log(output);
            }
        }
        if (query.orderBy) {
            output += this.formatter.formatClause('ORDER BY');
            output += ` ${this.parseOrderBy(query.orderBy)}`;
            this.log(output);
        }
        if (isNumber(query.limit)) {
            output += this.formatter.formatClause('LIMIT');
            output += ` ${query.limit}`;
            this.log(output);
        }
        if (isNumber(query.offset)) {
            output += this.formatter.formatClause('OFFSET');
            output += ` ${query.offset}`;
            this.log(output);
        }
        if (query.withDataCategory) {
            output += this.formatter.formatClause('WITH DATA CATEGORY');
            output += ` ${this.parseWithDataCategory(query.withDataCategory)}`;
            this.log(output);
        }
        if (query.withSecurityEnforced) {
            output += this.formatter.formatClause('WITH SECURITY_ENFORCED');
            this.log(output);
        }
        if (query.for) {
            output += this.formatter.formatClause('FOR');
            output += ` ${query.for}`;
            this.log(output);
        }
        if (query.update) {
            output += this.formatter.formatClause('UPDATE');
            output += ` ${query.update}`;
            this.log(output);
        }
        return output;
    }
    /**
     * Parses fields
     * e.x.: SELECT amount, FORMAT(amount) Amt, (SELECT Id, Name FROM Contacts)
     * @param fields
     * @returns fields
     */
    parseFields(fields) {
        return fields.map(field => {
            const objPrefix = field.objectPrefix ? `${field.objectPrefix}.` : '';
            switch (field.type) {
                case 'Field': {
                    return `${objPrefix}${field.field}`;
                }
                case 'FieldFunctionExpression': {
                    let params = '';
                    if (field.parameters) {
                        if (isString(field.parameters[0])) {
                            params = field.parameters.join(',');
                        }
                        else {
                            params = this.parseFields(field.parameters).join(',');
                        }
                    }
                    return `${field.fn}(${params})${field.alias ? ` ${field.alias}` : ''}`;
                }
                case 'FieldRelationship': {
                    return `${objPrefix}${field.relationships.join('.')}.${field.field}`;
                }
                case 'FieldSubquery': {
                    return this.formatter.formatSubquery(this.parseQuery(field.subquery));
                }
                case 'FieldTypeof': {
                    return this.parseTypeOfField(field);
                }
                default:
                    break;
            }
        });
    }
    /**
     * Parses type of Field
     * e.x.: TYPEOF What WHEN Account THEN Phone, NumberOfEmployees WHEN Opportunity THEN Amount, CloseDate ELSE Name
     * @param typeOfField
     * @returns type of field
     */
    parseTypeOfField(typeOfField) {
        let output = `TYPEOF ${typeOfField.field} `;
        output += typeOfField.conditions
            .map(cond => {
            return `${cond.type} ${get(cond.objectType, ' THEN ')}${cond.fieldList.join(', ')}`;
        })
            .join(' ');
        output += ` END`;
        return output;
    }
    /**
     * Parses fn from a WHERE clause
     * @param fn
     * @returns fn
     */
    parseFn(fn) {
        return `${(fn.text || '').replace(/,/g, ', ')} ${fn.alias || ''}`.trim();
    }
    /**
     * Parses where clause
     * e.x.: WHERE LoginTime > 2010-09-20T22:16:30.000Z AND LoginTime < 2010-09-21T22:16:30.000Z
     * WHERE Id IN (SELECT AccountId FROM Contact WHERE LastName LIKE 'apple%') AND Id IN (SELECT AccountId FROM Opportunity WHERE isClosed = false)
     * @param where
     * @returns where clause
     */
    parseWhereClause(where) {
        let output = '';
        if (where.left) {
            output +=
                isNumber(where.left.openParen) && where.left.openParen > 0
                    ? new Array(where.left.openParen).fill('(').join('')
                    : '';
            output += `${get(where.left.logicalPrefix, ' ')}`;
            output += where.left.fn ? this.parseFn(where.left.fn) : where.left.field;
            output += ` ${where.left.operator} `;
            output += where.left.valueQuery
                ? this.formatter.formatSubquery(this.parseQuery(where.left.valueQuery), 1, true)
                : getAsArrayStr(getWhereValue(where.left.value, where.left.literalType));
            output +=
                isNumber(where.left.closeParen) && where.left.closeParen > 0
                    ? new Array(where.left.closeParen).fill(')').join('')
                    : '';
        }
        if (where.right) {
            const formattedData = this.formatter.formatWhereClauseOperators(get(where.operator), this.parseWhereClause(where.right));
            return `${output}${formattedData}`.trim();
        }
        else {
            return output.trim();
        }
    }
    /**
     * Parses group by clause
     * e.x.: GROUP BY CampaignId
     * @param groupBy
     * @returns group by clause
     */
    parseGroupByClause(groupBy) {
        if (groupBy.type) {
            return `${groupBy.type}${getAsArrayStr(groupBy.field, true)}`;
        }
        else {
            return (Array.isArray(groupBy.field) ? groupBy.field : [groupBy.field]).join(', ');
        }
    }
    /**
     * Parses having clause
     * e.x.: HAVING COUNT(Name) > 100 and LeadSource > 'Phone'
     * @param having
     * @returns having clause
     */
    parseHavingClause(having) {
        let output = '';
        if (having.left) {
            output += new Array(having.left.openParen || 0).fill('(').join('');
            output += having.left.fn ? this.parseFn(having.left.fn) : having.left.field;
            output += ` ${having.left.operator} ${having.left.value}`;
            output += new Array(having.left.closeParen || 0).fill(')').join('');
        }
        if (having.right) {
            return `${output} ${get(having.operator)} ${this.parseHavingClause(having.right)}`;
        }
        else {
            return output.trim();
        }
    }
    /**
     * Parses order by
     * e.x.: ORDER BY BillingPostalCode ASC NULLS LAST
     * @param orderBy
     * @returns order by
     */
    parseOrderBy(orderBy) {
        if (Array.isArray(orderBy)) {
            return this.formatter.formatOrderByArray(orderBy.map(ob => this.parseOrderBy(ob)));
        }
        else {
            let output = `${get(orderBy.field, ' ')}`;
            output += orderBy.fn ? this.parseFn(orderBy.fn) : '';
            output += `${get(orderBy.order, ' ')}${get(orderBy.nulls, '', 'NULLS ')}`;
            return output.trim();
        }
    }
    /**
     * Parses with data category
     * e.x.: WITH DATA CATEGORY Geography__c AT (usa__c, uk__c)
     * @param withDataCategory
     * @returns with data category
     */
    parseWithDataCategory(withDataCategory) {
        return withDataCategory.conditions
            .map(condition => {
            const params = condition.parameters.length > 1
                ? `(${condition.parameters.join(', ')})`
                : `${condition.parameters.join(', ')}`;
            return `${condition.groupName} ${condition.selector} ${params}`;
        })
            .join(' AND ');
    }
}

/*
 * Copyright (c) Austin Turner
 * The software in this package is published under the terms of the MIT license,
 * a copy of which has been included with this distribution in the LICENSE.txt file.
 */

exports.isSubquery = isSubquery;
exports.getComposedField = getComposedField;
exports.getFlattenedFields = getFlattenedFields;
exports.formatQuery = formatQuery;
exports.composeQuery = composeQuery;
exports.Compose = Compose;
exports.parseQuery = parseQuery;
exports.isQueryValid = isQueryValid;
//# sourceMappingURL=index.js.map
